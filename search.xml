<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Beeper使用体验</title>
      <link href="2023/07/23/Beeper%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%20e874962ef0db4acf9e1b6013148d3e9f/"/>
      <url>2023/07/23/Beeper%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%20e874962ef0db4acf9e1b6013148d3e9f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="漫长的等待"><a href="#漫长的等待" class="headerlink" title="漫长的等待"></a>漫长的等待</h2><p>在经历了一年半的等待后，在某个深夜决定入睡的前5分钟，我终于收到了来自Beeper官方发来的内测申请。作为一个对科技产品，尤其是对新的硬件与软件尤为热衷的geek，三下五除二马上翻开电脑进行了安装与试用。但等待的兴奋感在安装软件体验十分钟后就消散了，试用的结论就是: 还是用回独立软件吧。</p><p><img src="https://s2.loli.net/2023/07/23/bD17BFWnRJ6y4ix.png"></p><h2 id="Beeper"><a href="#Beeper" class="headerlink" title="Beeper"></a>Beeper</h2><p>两年前一个YouTube的广告吸引了我，在一个软件中你可以回复telegram，可以回复ins，可以回复iMessage，这是什么神仙科技，当时便在官网进行了注册，不出意料，想要获得试用，你必须加入waitlist并需要经过可能漫长也可能极短的等待。在申请完后，我开始去了解Beeper软件的发展。</p><p>Beeper实际上是上个世纪在移动通讯的发展中不可忽视的一个小物件，中文应该叫做寻呼机，在广东，或者香港这边我们常常叫做BB机，这便是Beeper词语背后最直接的意思。</p><p><img src="https://s2.loli.net/2023/07/23/R7UupQVkaIofvF3.png"></p><p>而对应于产品背后的含义，我想Beeper的团队肯定想到了对应寻呼机后面的使用习惯。一个物品集合了全部的通讯，同时通过系统给出的信息可以在电话亭再去进行相对应的联络，我想这便也是Beeper App的核心构建逻辑。</p><p><img src="https://s2.loli.net/2023/07/23/LRJUqjuwb9KiZ5v.png"></p><p>All In One的想法看起来很美好，但是对于程序员而言则绝对是地狱难度级别的项目，通讯软件通常是所有实时类软件中对于隐私控制最为严格的软件之一，通常各大通讯软件的厂商并不会直接向外提供可以获取通信信息的SDK或API，而通过其他途径获取的数据也很可能会遭到第三方的监听或者篡改，因此一个软件集合全部的通讯软件并将功能进行对接，作为一个菜鸡程序员，这是一个听到产品说完第一句话就会马上跑路的项目。那Beeper是如何做到的？</p><h2 id="Matrix协议"><a href="#Matrix协议" class="headerlink" title="Matrix协议"></a>Matrix协议</h2><p>Beeper的核心技术是一个叫做Matrix的开源通讯协议，Matrix主要是一套用以去中心化通信的API，可以使用Matrix来构建类似即时消息，IP语音或者IoT这类的通信系统，Matrix将其的作用定义为桥，目的是为新的开放式实时通信生态系统奠定基础。同时其中数据的交互都是通过JSON数据以Restful API的形式进行传递的，这对于目前的开发人员显得十分友好。</p><p><img src="https://s2.loli.net/2023/07/23/EDVk3SMw1Zdvlog.png"></p><p>如此看来Beeper选用Matrix协议的理由就十分充分了，归根结底Beeper其实是一个巨大的中转站，将所有需要发送的消息传递给Beeper，Beeper再通过Matrix协议转发给不同的通讯软件。</p><p>那就只剩下最后一个问题，怎么和其他的私有加密协议的通讯软件进行对接的？</p><h2 id="Beeper-Web"><a href="#Beeper-Web" class="headerlink" title="Beeper Web"></a>Beeper Web</h2><p>Beeper Web承担了将需要发送的消息解密后重新使用平台（iMessage/Signal）私有加密协议进行加密并将数据传输至平台的功能。听起来很绕，但只是Beeper在后端重新实现了对应平台的私有加密协议算法，而这则是Beeper软件在代码构建上的核心杀手锏。</p><p>在2020年Beeper公司创始人<strong>Eric Migicovsky</strong>发表的博客<strong>The Universal Communication Bus</strong>中他提到，他想在一套系统上与全部社交平台上的好友进行联络，但是没有这样的软件，因此他便亲自来创建这样的一个APP，听上去是一个野心很大的创业项目，那Beeper的实际体验如何呢？</p><h2 id="挠痒痒般的体验"><a href="#挠痒痒般的体验" class="headerlink" title="挠痒痒般的体验"></a>挠痒痒般的体验</h2><p>在官网下载安装包后，你会发现安装包的大小仅有3MB，不知道是哪里来的预感，我猜Beeper的桌面端肯定是采用<em>Electron</em>技术进行构建的，事实也没有打我的脸，在经历漫长的下载后Beeper终于安装进了电脑中，在没有进行任何聊天的情况下，Beeper的占用体积就达到了惊人的985.6MB，莫非Beeper的app in one是指在那么大的占用体积中将我用的通讯APP都偷偷安装在内吗？！虽然知道这锅得<em>Electron</em>背但在还没有打开软件的情况下也属实给了我一个国产厂商震撼。</p><p>进入Beeper后，首先得进行登录，输入邮箱，点击邮箱中的跳转链接进行登录，方式中规中矩。登录完成后进行最重要的一步，不同软件的绑定。</p><p><img src="https://s2.loli.net/2023/07/23/bVqlACkMdyZBmjK.png"></p><p>绑定各类软件的体验并不能算是傻瓜式的绑定，例如ins与twitter都需要设置繁琐的二部验证后再去邮箱中进行绑定，而类似iMessage则是需要登录后再在手机设置中增加iMessage的消息转发，通常在添加这一步需要用到的耗时就有10分钟之久。</p><p>而在软件的体验上，Beeper也并不算太好，首先是资源占用，在打开Beeper5分钟后，我的电脑温度就飙升到了71度，同时CPU的占用率也在不断上升中，目前Beeper对于软件性能的优化估计由于功能的未完善因此优先度也不高。</p><p><img src="https://s2.loli.net/2023/07/23/e9Z5S7C2XT3KlIf.png"></p><p>Beeper的软件首页分为三个大块，左侧为不同软件的分类，中间为对应的对话列表，右侧则是具体的对话内容，从界面的设计美观上与大多数的软件持平，但在交互上Beeper并没有太多的动画，而且在按钮的可见性与交互上也不能算是很完善，在许多地方常常会出现有一个按钮但完全不知道其作用的情况。</p><p><img src="https://s2.loli.net/2023/07/23/U7Z6qQH9p8iYADV.png"></p><p>同时在具体的聊天内容设计上，颜色的设计与字体大小也透露出目前Beeper还处于非常早期的阶段，没有经过太多的设计思考与打磨。在聊天的交互上，Beeper有点食之无味二弃之可惜。</p><p><img src="https://s2.loli.net/2023/07/23/xEkb7FGfTCQn3Jl.png"></p><h2 id="功能的残缺"><a href="#功能的残缺" class="headerlink" title="功能的残缺"></a>功能的残缺</h2><p>在telegram对应的模块中，没有评论功能，不能获取到部分的群组与没有机器人功能。</p><p>在iMessage中，缺少了原生iMessage中那些额外的插件功能也显得有点索然无味。</p><p><img src="https://s2.loli.net/2023/07/23/OnNaS3HdDIxhpVw.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>有的时候可能你以为全部人都需要的核心需求反而只是一小部分人的自嗨，我不否认Beeper软件在统一通讯软件上所付出的努力，但在体验过后，我想这个软件可能只适合那些由于各种原因需要在不同的交友软件上进行交友后需要在一个地方统一管理的人，如果只看简单的通讯，Beeper显然已经可以满足需求，但正是那些特色的功能我们选择了用不同的软件进行沟通，很多时候例如使用ins，twitter并不只是单纯为了简单的文字聊天，我们会利用到平台内的内容进行分享，例如分享推文或者ins的图片，或我们非常喜爱的telegram的机器人，正是这些独特的功能使得我们有力气在不同的软件中进行穿梭而不觉得疲劳。而Beeper目前对于我而言，想要突破这个乏味的使用体验并真正变成一个all in one，还有很长的路要走。</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭配GitHub Actions为Release增加Changelog</title>
      <link href="2023/07/16/%E6%90%AD%E9%85%8DGitHub%20Actions%E4%B8%BARelease%E5%A2%9E%E5%8A%A0Changelog%202b9af1cd39284deb8dcae3d3720abf46/"/>
      <url>2023/07/16/%E6%90%AD%E9%85%8DGitHub%20Actions%E4%B8%BARelease%E5%A2%9E%E5%8A%A0Changelog%202b9af1cd39284deb8dcae3d3720abf46/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在浏览GitHub上许多知名的社区项目时，总能在Release中看到各种不同的Changelog，其中通常包含这代码的提交信息，有一些则是重大的更新点，其中有人工进行Changelog编写的，也有许多是使用自动化工具生成的。</p><img src="https://s2.loli.net/2023/07/16/kRPThvUOj614wFM.png" style="zoom:25%;" /><p>Goframe项目的Changelog</p><p>于是我们尝试在Speed-Cron项目中引入自动化的Changelog生成工具，帮助我们生成好看又实用的Changelog。</p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><img src="https://s2.loli.net/2023/07/16/1LBJonWKgNpUmZH.png" style="zoom: 25%;" /><h2 id="目前常见的Changelog自动化工具"><a href="#目前常见的Changelog自动化工具" class="headerlink" title="目前常见的Changelog自动化工具"></a>目前常见的Changelog自动化工具</h2><p>目前社区中有十分多不同风格与用法的Changelog自动化生成工具，比如npm中的 <strong><strong>auto-changelog</strong></strong> ，或者GitHub官方的<strong>Automatically generated release notes</strong>，而今天选用的，则是一款在GitHub上知名度较高的 <strong><a href="https://github.com/orhun/git-cliff">git-cliff</a> ，git-cliff</strong> 是用rust语言编写的自动化生产变更日志的工具，可以通过下载二进制文件在本地生成 Changelog ，或者引入到GitHub Actions中进行使用。</p><img src="https://s2.loli.net/2023/07/16/dgH8boyW4SRMOQN.png" style="zoom:25%;" /><p>在本项目中，我们将利用git-cliff官方的Actions套件为Release阶段生成Changelog。</p><h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><p><a href="https://git-cliff.org/docs/github-actions/git-cliff-action">https://git-cliff.org/docs/github-actions/git-cliff-action</a></p><p>在官方的文档中对于如何在Actions中使用git-cliff有很详细的介绍。通过在workflow文件中引入并配置git-cliff Actions即可。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">repository</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">a</span> <span class="string">changelog</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">orhun/git-cliff-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">cliff.toml</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">--verbose</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">OUTPUT:</span> <span class="string">CHANGELOG.md</span></span><br></pre></td></tr></table></figure><p>可以使用默认的cliff.toml，或者我们自定义更符合我们需求的git-cliff配置文件。</p><img src="https://s2.loli.net/2023/07/16/G4mEyViUQHzuSR7.png" style="zoom: 50%;" /><p>在项目中，我们创建一个git-cliff文件夹以用来存放git-cliff的配置文件，现在直接先摆上完整的配置文件。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git-cliff ~ configuration file</span></span><br><span class="line"><span class="comment"># https://git-cliff.org/docs/configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lines starting with &quot;#&quot; are comments.</span></span><br><span class="line"><span class="comment"># Configuration options are organized into tables and keys.</span></span><br><span class="line"><span class="comment"># See documentation for more information on available options.</span></span><br><span class="line"></span><br><span class="line">[<span class="string">changelog</span>]</span><br><span class="line"><span class="comment"># changelog header</span></span><br><span class="line"><span class="string">header</span> <span class="string">=</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"># Changelog\n</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># template for the changelog body</span></span><br><span class="line"><span class="comment"># https://tera.netlify.app/docs/</span></span><br><span class="line"><span class="string">body</span> <span class="string">=</span> <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#123;% if version %&#125;\</span></span><br><span class="line"><span class="string">    ## Release <span class="template-variable">&#123;&#123; version | trim_start_matches(pat=&quot;v&quot;) &#125;&#125;</span> - <span class="template-variable">&#123;&#123; timestamp | date(format=&quot;%Y-%m-%d&quot;) &#125;&#125;</span></span></span><br><span class="line"><span class="string">&#123;% else %&#125;\</span></span><br><span class="line"><span class="string">    ## [unreleased]</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;\</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;% for group, commits in commits | group_by(attribute=&quot;</span><span class="string">group&quot;)</span> <span class="string">%&#125;</span></span><br><span class="line">    <span class="comment">### &#123;&#123; group | upper_first &#125;&#125;</span></span><br><span class="line">    &#123;<span class="string">%</span> <span class="string">for</span> <span class="string">commit</span> <span class="string">in</span> <span class="string">commits</span> <span class="string">%</span>&#125;</span><br><span class="line">        <span class="bullet">-</span> &#123;&#123; <span class="string">commit.message</span> <span class="string">|</span> <span class="string">upper_first</span> &#125;&#125; <span class="string">([&#123;&#123;</span> <span class="string">commit.id</span> <span class="string">|</span> <span class="string">truncate(length=7,</span> <span class="string">end=&quot;&quot;)</span> <span class="string">&#125;&#125;](https://github.com/hamster1963/Speed-Cron/commit/&#123;&#123;</span> <span class="string">commit.id</span> <span class="string">&#125;&#125;))\</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">for</span> <span class="string">footer</span> <span class="string">in</span> <span class="string">commit.footers</span> <span class="string">-%</span>&#125;</span><br><span class="line">            <span class="string">,</span> &#123;&#123; <span class="string">footer.token</span> &#125;&#125;&#123;&#123; <span class="string">footer.separator</span> &#125;&#125;&#123;&#123; <span class="string">footer.value</span> &#125;&#125;<span class="string">\</span></span><br><span class="line">          &#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;<span class="string">\</span></span><br><span class="line">    &#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;<span class="string">\n</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"># remove the leading and trailing whitespace from the template</span></span><br><span class="line"><span class="string">trim = true</span></span><br><span class="line"><span class="string"># changelog footer</span></span><br><span class="line"><span class="string">footer = &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[git]</span></span><br><span class="line"><span class="string"># parse the commits based on https://www.conventionalcommits.org</span></span><br><span class="line"><span class="string">conventional_commits = true</span></span><br><span class="line"><span class="string"># filter out the commits that are not conventional</span></span><br><span class="line"><span class="string">filter_unconventional = true</span></span><br><span class="line"><span class="string"># process each line of a commit as an individual commit</span></span><br><span class="line"><span class="string">split_commits = true</span></span><br><span class="line"><span class="string"># regex for preprocessing the commit messages</span></span><br><span class="line"><span class="string">commit_preprocessors = [</span></span><br><span class="line"><span class="string">  &#123; pattern = &#x27;\((\w+\s)?#([0-9]+)\)&#x27;, replace = &quot;</span><span class="string">([#$&#123;2&#125;](https://github.com/orhun/git-cliff/issues/$&#123;2&#125;))&quot;</span> <span class="string">&#125;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="comment"># regex for parsing and grouping commits</span></span><br><span class="line"><span class="string">commit_parsers</span> <span class="string">=</span> [</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^feat&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 0 --&gt;⛰️  Features&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^fix&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 1 --&gt;🐛 Bug Fixes&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^doc&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 3 --&gt;📚 Documentation&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^perf&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 4 --&gt;⚡ Performance&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^refactor&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 2 --&gt;🚜 Refactor&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^style&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 5 --&gt;🎨 Styling&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^test&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 6 --&gt;🧪 Testing&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(release\\): prepare for&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(pr\\)&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(pull\\)&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 7 --&gt;⚙️ Miscellaneous Tasks&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">body</span> <span class="string">=</span> <span class="string">&quot;.*security&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 8 --&gt;🛡️ Security&quot;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># protect breaking changes from being skipped due to matching a skipping commit_parser</span></span><br><span class="line"><span class="string">protect_breaking_commits</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># filter out the commits that are not matched by commit parsers</span></span><br><span class="line"><span class="string">filter_commits</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># glob pattern for matching git tags</span></span><br><span class="line"><span class="string">tag_pattern</span> <span class="string">=</span> <span class="string">&quot;v[0-9]*&quot;</span></span><br><span class="line"><span class="comment"># regex for skipping tags</span></span><br><span class="line"><span class="string">skip_tags</span> <span class="string">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># regex for ignoring tags</span></span><br><span class="line"><span class="string">ignore_tags</span> <span class="string">=</span> <span class="string">&quot;v.*-beta.*&quot;</span></span><br><span class="line"><span class="comment"># sort the tags topologically</span></span><br><span class="line"><span class="string">topo_order</span> <span class="string">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># sort the commits inside sections by oldest/newest order</span></span><br><span class="line"><span class="string">sort_commits</span> <span class="string">=</span> <span class="string">&quot;oldest&quot;</span></span><br></pre></td></tr></table></figure><p>可以在配置文件中看出，主要的配置块分为Changelog部分与GitHub部分，分别对Changelog的格式以及读取GitHub的行为进行配置。</p><p>在Changelog部分，我们将每一行的commit都看做一个独立的变更（虽然在多人项目中不太建议）。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># process each line of a commit as an individual commit</span></span><br><span class="line"><span class="string">split_commits</span> <span class="string">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>并且在变更的末尾附上对应的commit_id，方便直接在Changelog页面可以直接点击跳转到对应的commit变更对比页面中。</p><p>在变更类别中，分为:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">commit_parsers</span> <span class="string">=</span> [</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^feat&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 0 --&gt;⛰️  Features&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^fix&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 1 --&gt;🐛 Bug Fixes&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^doc&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 3 --&gt;📚 Documentation&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^perf&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 4 --&gt;⚡ Performance&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^refactor&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 2 --&gt;🚜 Refactor&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^style&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 5 --&gt;🎨 Styling&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^test&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 6 --&gt;🧪 Testing&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(release\\): prepare for&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(pr\\)&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore\\(pull\\)&quot;</span>, <span class="string">skip</span> <span class="string">=</span> <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">message</span> <span class="string">=</span> <span class="string">&quot;^chore&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 7 --&gt;⚙️ Miscellaneous Tasks&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">body</span> <span class="string">=</span> <span class="string">&quot;.*security&quot;</span>, <span class="string">group</span> <span class="string">=</span> <span class="string">&quot;&lt;!-- 8 --&gt;🛡️ Security&quot;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么多类，通过正则表达式进行匹配分类到不同的类别中。</p><p>对于版本号的格式：正式分发的版本采用<code>v.0.0.1</code>的格式进行,如为测试版则是<code>v0.0.1-beta.1</code>的版本格式。因此需要在tag_pattern与ignore-tags中定义区分正式版与测试版本的正则表达式。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># glob pattern for matching git tags</span></span><br><span class="line"><span class="string">tag_pattern</span> <span class="string">=</span> <span class="string">&quot;v[0-9]*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># regex for ignoring tags</span></span><br><span class="line"><span class="string">ignore_tags</span> <span class="string">=</span> <span class="string">&quot;v.*-beta.*&quot;</span></span><br></pre></td></tr></table></figure><p>这样定义之后，正式版进行生成变更日志时会寻找上一条正式版的版本记录，会跳过与测试版本的比对，这样子就可以将测试过程中的变更日志也一并包含到最后的正式版中。</p><p>目前为止基础的配置就完成了。</p><h2 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h2><p>我们在jobs中定义一个job专门用以生成Changelog文本并显示在对应的Release变更日志中。</p><p>在配置文件中，将路径改为仓库中存放git-cliff配置文件的路径。</p><p>在Release step中，将生成的Changelog文本推送至对应的变更日志中。</p><p>完整Release workflow如下:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">build-go-binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">created</span>] <span class="comment"># 表示在创建新的 Release 时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">changelog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">changelog</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">outputs:</span></span><br><span class="line">      <span class="attr">release_body:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.git-cliff.outputs.content</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">a</span> <span class="string">changelog</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">orhun/git-cliff-action@v2</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">git-cliff</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">config:</span> <span class="string">git-cliff/cliff.toml</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">-vv</span> <span class="string">--latest</span> <span class="string">--strip</span> <span class="string">&#x27;footer&#x27;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">OUTPUT:</span> <span class="string">CHANGES.md</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">startsWith(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">)</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">body:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.git-cliff.outputs.content</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_REPOSITORY:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build-go-binary:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在workflow中，我们使用到<code>$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</code>作为身份验证，需要在设置中开启对于仓库的读写权限，请参考上篇文章中的配置步骤。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>好看的Release Changelog也是吸引更多用户的一个有效手段，同时对于后续的维护人员，也可以简单地通过Changelog快速了解到不同版本号之间的差异。Hope u enjoy!</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多Docker仓库Github Actions流程</title>
      <link href="2023/07/13/%E5%A4%9ADocker%E4%BB%93%E5%BA%93Github%20Actions%E6%B5%81%E7%A8%8B%20d5807c069f7742fd9fe5d9081ca00f0b/"/>
      <url>2023/07/13/%E5%A4%9ADocker%E4%BB%93%E5%BA%93Github%20Actions%E6%B5%81%E7%A8%8B%20d5807c069f7742fd9fe5d9081ca00f0b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h2><p>公司后端的服务采用Docker镜像的方式进行分发与部署，之前选用DockerHub作为托管平台，但由于DockerHub对于私有仓库数的限制以及最近各种网络状况频出，选用GitHub在2020年推出的ghcr以及阿里云的容器镜像服务都可以更好的满足公司内部对于安全以及持续集成的需求。</p><p><img src="https://s2.loli.net/2023/07/13/pInFAY5vzOTUWgM.png"></p><p><img src="https://s2.loli.net/2023/07/13/fIvj8pDaidxABLU.png"></p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>整个CICD的流程都采用GitHub Actions来进行，采用GitHub Actions的优点有很多，不仅可以很方便的看到整个自动化的进度，而且从维护成本来看只需要管理好GitHub Actions的配置文件即可，配置文件也叫做工作流文件(workflow)，采用yml格式文件进行编写。</p><p><img src="https://s2.loli.net/2023/07/13/brjPJ5D6gzF7ikW.png"></p><h2 id="推送至ghcr与阿里云"><a href="#推送至ghcr与阿里云" class="headerlink" title="推送至ghcr与阿里云"></a>推送至ghcr与阿里云</h2><p>在Actions中，我们采用几个核心的步骤来进行镜像的打包，标记与分发。</p><ol><li>首先进行不同库的登录操作，目的是获取对应仓库的操作权限。</li><li>对镜像进行不同仓库的对应标记，使其可以上传到对应的仓库中。</li><li>进行分发。</li></ol><p>在GitHub Actions中有许多已经封装好核心逻辑的Action可供使用，有官方的也有第三方的，在本Action中与Docker相关的操作都采用了docker官方出品的Action。</p><h2 id="登录操作"><a href="#登录操作" class="headerlink" title="登录操作"></a>登录操作</h2><p>由于ghcr是GitHub官方的镜像库，因此用户名与密码并不需要显式定义出来，用户名用<code>$&#123;&#123; github.repository_owner &#125;&#125;</code> ,password用<code>$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</code>即可，需要注意的是，上传至ghcr需要开放github_token对于库的读写权限，可在仓库设置中开启。</p><p>在Settings-Actions-General中，将Workflow permissions的权限勾选为读写权限。</p><p><img src="https://s2.loli.net/2023/07/13/iM297FtILgjeZRr.png"></p><p><img src="https://s2.loli.net/2023/07/13/bFVQTH7i3dOKE4r.png"></p><p>对于阿里云的镜像管理服务，则需要在secret中定义从阿里云获取的用户名与密码。</p><p><img src="https://s2.loli.net/2023/07/13/br5meVGHh6nto2P.png"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Container</span> <span class="string">Registry</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="string">ghcr.io</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">AliYun</span> <span class="string">Container</span> <span class="string">Registry</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line"><span class="attr">registry:</span> <span class="string">registry.cn-guangzhou.aliyuncs.com</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ALI_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ALI_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="对镜像进行标记"><a href="#对镜像进行标记" class="headerlink" title="对镜像进行标记"></a>对镜像进行标记</h2><p>在images一栏中填入ghcr与阿里云的镜像地址即可，下方的tags为标记的逻辑。</p><p>默认采用latest与当前tag版本号即可。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Extract</span> <span class="string">metadata</span> <span class="string">(tags,</span> <span class="string">labels)</span> <span class="string">for</span> <span class="string">Docker</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">meta</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/metadata-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">  <span class="attr">images:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">ghcr.io/$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">registry.cn-guangzhou.aliyuncs.com/hamster-home/kes-speed-backend</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">type=raw,value=latest</span></span><br><span class="line">            <span class="string">type=ref,event=tag</span></span><br></pre></td></tr></table></figure><h2 id="进行镜像的推送"><a href="#进行镜像的推送" class="headerlink" title="进行镜像的推送"></a>进行镜像的推送</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">docker/build-push-action@v4</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.tags</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.meta.outputs.labels</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="推送后续"><a href="#推送后续" class="headerlink" title="推送后续"></a>推送后续</h2><p>推送后即可在GitHub以及阿里云中看到最新推送的镜像。</p><p><img src="https://s2.loli.net/2023/07/13/S14LRtukzZ2HcI9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Go构建一套网络监控系统</title>
      <link href="2023/07/02/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7%20683f1c2b3b3d4a30bef2a2e52259eef2/"/>
      <url>2023/07/02/%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7%20683f1c2b3b3d4a30bef2a2e52259eef2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>入职第二天，主管就马上下来了一个需求，监控终端的网络。原因是公司的网络很差，总是有同事反映网络很慢，钉钉不断断开重连，连接本地的群晖文件服务器也有问题，但目前的应对手段主要就是重启路由器与服务器，因此想找到一个可以稳定监控的方法。</p><h2 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h2><p>公司主营业务是跨境电商，因此在宽带的数量上，其中有2条为专线宽带，不需要太多操心，其他例如运营用1条电信宽带，设计，开发与IT部门共用2条宽带，分别是电信的500M与联通的1000M宽带，从网络设备上来看就比较有意思了。</p><ol><li>联通光猫→蒲公英路由</li><li>电信光猫→蒲公英路由</li><li>电信光猫→蒲公英路由</li></ol><p>采用了链路聚合的形式，将两条宽带结合为一条宽带进行使用，蒲公英后台设置中为双wan模式，由蒲公英对数据包的分发进行管理。</p><p>而在AP方面，都采用了钉钉的C1路由器作为AP进行使用，接入钉钉的智能办公网络，在新人入职后可以很方便的直接在钉钉中点击智能办公室网络小程序进行网络的连接，进行打卡或是访问内网。</p><p>从架构来看，主要就是在蒲公英端或者是在钉钉AP端出现了某些问题，需要对网络继续一个基本的测试后再进行问题的排查。</p><p><img src="https://s2.loli.net/2023/07/03/VWzRsnPycH4lgDv.png"></p><h2 id="项目构想"><a href="#项目构想" class="headerlink" title="项目构想"></a>项目构想</h2><p>想要持续监控终端网络的状况，主要还是得看到达员工端电脑上的网络速率，很多时候自己拿着去测觉得网络状态不错，但实际使用中由于不同电脑的各种硬件不同也可能会产生许多问题。</p><p>马上第一个想法便是利用speedtest的功能，定时在终端上进行测速，再通过某个渠道将数据进行汇总，这样便可以很方便的看到不同设备中的速度了，也很容易看到问题的大概方向。因此花了一个整体架构的草图，非常的简单，便是在终端，例如手提或者台式机器上利用speedtest进行测速，再构建一个后端系统进行数据的汇总，架构就完成了。</p><p><img src="https://s2.loli.net/2023/07/03/dTZ6DbB1ezIR2Yf.png"></p><h2 id="项目选型"><a href="#项目选型" class="headerlink" title="项目选型"></a>项目选型</h2><p>简单的架构完成后，马上遇到的问题就是，如何利用speedtest以及用什么语言去构建安装在终端上的定时测速程序呢？</p><p>首先第一个问题很快得到了解决，Ookla公司旗下的Speedtest工具为开发者提供了Speedtest CLI，这意味着我只需要去调用CLI并且获得数据即可完成测速的功能。简单了解指令后便设置用json格式获取测速CLI的输出以获得测速的数据。</p><p><img src="https://s2.loli.net/2023/07/03/Xng9oQlBTIWxfP7.png"></p><p>完整的命令为:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">&quot;speed_cli/speedCLI/speedtest.exe&quot;</span>, <span class="string">&quot;--accept-gdpr&quot;</span>, <span class="string">&quot;--accept-license&quot;</span>, <span class="string">&quot;56634&quot;</span>,</span><br><span class="line"><span class="string">&quot;--progress=yes&quot;</span>, <span class="string">&quot;--format=json&quot;</span>, <span class="string">&quot;--progress-update-interval=200&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中，”–accept-gdpr”与”–accept-license”可以跳过初次启动CLI需要输入YES同意的条款提示，</p><p>“56634”则是指定的测速服务器id，可以使得结果比较具有统一性，后续主要为获取数据的配置，–format=json将CLI的输出配置为JSON格式，可以很好的用map的形式去管理测速数据。</p><p>在语言选择方面，首先这门语言必须占用资源少，不会影响到终端的正常工作，其次语言应该具有良好的多架构适配性以可以安装在公司不同架构的电脑上，比如arm，amd64等，最后是最好可以编译为二进制文件，便于适配系统后台服务以及工具的分发。</p><p>没错，在考虑了开发需求与开发成本中，结果很明显，使用Golang语言进行客户端测速程序的编写明显是一个很好的选择。同时在框架上，选用了后端的goframe框架进行魔改后可以方便的利用到框架内的例如缓存，HTTP客户端以及定时任务的功能，降低了很多的开发成本。</p><p><img src="https://s2.loli.net/2023/07/03/eF9zdUrW41JR85c.png"></p><p>核心的问题解决了，那就进行开发吧。</p><h2 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h2><p>到了开发更多就是根据语言特性选择不同的模块去实现功能了。这里主要介绍定时任务这个功能。</p><p>定时任务直接采用goframe框架中的gcron-定时任务进行构建。<code>gcron</code>模块提供了对定时任务的实现，支持类似<code>crontab</code>的配置管理方式，并支持最小粒度到<code>秒</code>的定时任务管理。</p><p>使用起来非常的简单，只需要在客户端程序启动的时候，进行定时任务的注册即可。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addSpeedCron</span><span class="params">(ctx context.Context, initData g.Map, timePattern <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">glog.Notice(ctx, <span class="string">&quot;开始定时测速服务&quot;</span>, timePattern)</span><br><span class="line">_, err = gcron.AddSingleton(ctx, timePattern, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">err := cli_utils.CmdCore.StartSpeedCmd(ctx, initData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Error(ctx, <span class="string">&quot;定时测速服务失败: &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;Speed-Cron&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;添加定时测速服务失败: &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timePattern选择gcorn库中的预定义格式，默认为<code>@every 1h</code></p><p>同时定时任务选择为单例模式，避免上次的测速未结束又进行了第二次测速造成测速CLI的冲突。</p><p>在goframe项目启动中，定时任务便也启动，按照定义好的时间间隔进行测速命令的执行。</p><p>为了后端对于客户端有足够的控制权限，timePattern内容与测速节点id是从后端进行获取的，这便需要客户端定时向后端获取最新的客户端配置，并且根据配置的内容再进行测速定时任务的创建。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">glog.Debug(ctx, <span class="string">&quot;开始初始化定时任务管理器&quot;</span>)</span><br><span class="line">_, err = gcron.AddSingleton(ctx, <span class="string">&quot;@every 30s&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">err := cron_utils.CronManage.GetConfigAndStart(ctx, initData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Error(ctx, <span class="string">&quot;初始化定时任务管理器服务失败: &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;Cron-Manager&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;添加初始化定时任务管理器服务失败: &quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用配置定时任务管理器的形式进行测速定时任务的管理。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取测速定时任务</span></span><br><span class="line">localSpeedCron := gcron.Search(<span class="string">&quot;Speed-Cron&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> localSpeedCron == <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Notice(ctx, <span class="string">&quot;本地不存在定时任务,添加Speed-Cron定时任务&quot;</span>)</span><br><span class="line">err = addSpeedCron(ctx, initData, speedInterval)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;添加Speed-Cron定时器失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">speedEntryPattern := reflect.ValueOf(localSpeedCron).Elem().FieldByName(<span class="string">&quot;schedule&quot;</span>).Elem().FieldByName(<span class="string">&quot;pattern&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> speedEntryPattern.String() != speedInterval &#123;</span><br><span class="line">glog.Notice(ctx, <span class="string">&quot;更新Speed-Cron定时器&quot;</span>)</span><br><span class="line"><span class="comment">// 更新定时任务</span></span><br><span class="line">gcron.Stop(<span class="string">&quot;Speed-Cron&quot;</span>)</span><br><span class="line">gcron.Remove(<span class="string">&quot;Speed-Cron&quot;</span>)</span><br><span class="line">err = addSpeedCron(ctx, initData, speedInterval)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;更新Speed-Cron定时器失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">glog.Notice(ctx, <span class="string">&quot;Speed-Cron定时器无需更新&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获取配置后，将本地的配置与服务器的配置进行比对，如果有改变，则找到原本的测速定时任务进行销毁再根据新配置创建新的定时任务。在这里比较特别的是，在gcron中，定时任务在创建完成后，其中时间间隔字段是私有字段，不能从外部直接获取，因此这里采用反射对测速定时任务的结构体进行了私有字段的获取以用以与服务器配置进行比对。</p><p>最后比较核心的模块便是与Speedtest CLI的交互了，十分的简单，这里直接给出完整的命令行信息获取函数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StartSpeedCmd</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//@dc: 开始测速命令行交互</span></span><br><span class="line"><span class="comment">//@params:</span></span><br><span class="line"><span class="comment">//@response:</span></span><br><span class="line"><span class="comment">//@author: hamster   @date:2023/6/20 10:06:06</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *uCmdCore)</span> <span class="title">StartSpeedCmd</span><span class="params">(ctx context.Context, initData g.Map)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">cmd := CliUtils.CreateSpeedCmd()</span><br><span class="line"><span class="keyword">if</span> cmd == <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;创建命令失败,获取测速节点失败&quot;</span>)</span><br><span class="line">err = gerror.New(<span class="string">&quot;创建命令失败,获取测速节点失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取命令的标准输出管道</span></span><br><span class="line">stdout, err := cmd.StdoutPipe()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;获取标准输出管道时发生错误:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动命令</span></span><br><span class="line">err = cmd.Start()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;启动命令时发生错误:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">scanner             = bufio.NewScanner(stdout)</span><br><span class="line">defaultBars         = Bar.InitDefaultBar()</span><br><span class="line">uploadNetDataStruct = &amp;NetInfoUploadData&#123;&#125;</span><br><span class="line">)</span><br><span class="line">uploadNetDataStruct.Department = gconv.String(initData[<span class="string">&quot;department&quot;</span>])</span><br><span class="line">uploadNetDataStruct.StaffName = gconv.String(initData[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">// 持续获取输出</span></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line"><span class="comment">// 获取输出行</span></span><br><span class="line">line := scanner.Bytes()</span><br><span class="line">ok, err := CmdProgress.CmdCoreProgress(ctx, <span class="keyword">string</span>(line), defaultBars, uploadNetDataStruct)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;处理命令行输出时发生错误:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待命令执行完成</span></span><br><span class="line">err = cmd.Wait()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">glog.Warning(ctx, <span class="string">&quot;等待命令执行完成时发生错误:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心就是创建了一个命令行的输出管道，通过<code>for scanner.Scan()</code> 的方式不断获取命令行的输出再进行处理。</p><p>测速完成后，组装信息上传至后端即可。</p><h2 id="系统服务"><a href="#系统服务" class="headerlink" title="系统服务"></a>系统服务</h2><p>在终端上进行，那就需要服务可以一直在后台运行，最好具有错误重启，开机自启动的功能，在对比了nvvm与winsw后，选用winsw进行Windows端系统服务的构建。</p><p>配置十分简单，配置一些基础的信息，搭配github上的预编译文件加命令即可完成系统服务的注册与开启。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>v0.1.0<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>My Go Application<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>This is a Windows service for running my Go application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>%BASE%\core_bin\speed_cron.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">workingdirectory</span>&gt;</span>%BASE%\core_bin<span class="tag">&lt;/<span class="name">workingdirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-department=IT -name=方大同<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logpath</span>&gt;</span>%BASE%\logs<span class="tag">&lt;/<span class="name">logpath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>roll<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> <span class="attr">delay</span>=<span class="string">&quot;10 sec&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">onfailure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义完成后利用<code>install</code>与<code>start</code>便可以将定时测速客户端注册为服务运行在系统后台</p><h2 id="后端构建"><a href="#后端构建" class="headerlink" title="后端构建"></a>后端构建</h2><p>增删查改，建好数据库的表就可以了，再添加一个定时检测机器状态的定时任务即可。<img src="https://s2.loli.net/2023/07/03/ozM1rmiFkXEt248.png"></p><h2 id="监控一段时间后发现的问题"><a href="#监控一段时间后发现的问题" class="headerlink" title="监控一段时间后发现的问题"></a>监控一段时间后发现的问题</h2><p>在部分网络状态不佳的设备上安装并等待一段数据的上报后，首先发现，怎么网段都不一样…</p><p><img src="https://s2.loli.net/2023/07/03/cOWbosgwY7z8XQx.png"></p><p>在清一色的10网段中，怎么混入了172网段？！</p><p>艰辛万苦的排查后，发现是某台钉钉的路由器错误地设置为了路由模式，造成DHCP直接变成又钉钉路由器进行，就造成了网段的不一样，而由于钉钉路由器在路由模式下性能很差…就造成了连到这台路由器的设备会出现网络卡顿，断线的情况。</p><p>第一个问题解决了，还剩下一个就是网络总是定期有波动，从测速数据来看波动还是挺大的，最后从外部ip中发现了问题，发现蒲公英切换到电信500M的时候网络状态就十分不理想，解决办法很简单，把蒲公英路由器上电信那条网线拔了，对你没有听错….</p><p>问题都解决了。</p><h2 id="一些后话"><a href="#一些后话" class="headerlink" title="一些后话"></a>一些后话</h2><p>解决完这个问题后总感觉为了一碟醋包了一盘饺子…但是转念一想，没有这些大量数据的支撑，也很难通过测试发现问题的所在，同时在过程中也发现有一些是网卡硬件或者网线的问题造成协商速率只有100M，这些通过人工去测试当然也行，但是程序员就是懒嘛！让同事小手一点安装一下，等个半天看看数据再去处理，也是非常的轻松惬意，同时系统还可以接入比如预警，消息通知的第三方以完成更高程度监控自动化，也是非常灵活的！（嘴硬）</p><p>最后谢谢你看到这里，希望其中的一些golang實作可以给你一些启发。</p><p><img src="https://s2.loli.net/2023/07/03/4Sq3IfOmTg1AGLM.png"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变成怎样的大人</title>
      <link href="2023/06/18/%E5%8F%98%E6%88%90%E6%80%8E%E6%A0%B7%E7%9A%84%E5%A4%A7%E4%BA%BA/"/>
      <url>2023/06/18/%E5%8F%98%E6%88%90%E6%80%8E%E6%A0%B7%E7%9A%84%E5%A4%A7%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="982e75f5f7d39b0625fca5fd347114d318402f495d4e0cfee980db9f6932cafb">8b27e0094abfe1a4081fbfd52f0fbcd80b66af6d4ba8e72beb2147e5ab3a1ae2c31d08eca945961dd74485148a79029c4433ffb40824017393ecf32c341adb0a671ad2f896cc410f660f0b5f0f45472cf1d3fd9bc7d12343bd0edef0e9c649cd95ba79b8c36f705e995db04ebc04ba4743a0a9cd741887b45a253724aa02af1be59c63c5c7620d0bdfc2b7ae8538e7bee22b0155e666a0013ff4fa79ab7cbf9b7cac11199ee6a5cb015c6b9fc6c9a1da4e1f8fa90ee51a90cd009b037fd31001c3e96ef49407831553ced14aea7a6b2c8e322bd472e52bfc2a7fb3237f71a9f8a24293d082ca0495ee60e926ace0f20c26d218e0b172db7e409546c49679df816e8ae4aa9285081e4afe67530d2dc77061f5f76f5f9c0341f59e2f359c78952fb4c95a9bee101548a59604b26cbb21bf3cd4d871ffdb53fcb405e1e4d036dd8b8b9228710d57b3417e97df3329f316f743a04b50b67ea155723006750d402856ac2d3b4a3a93b51588a3e326388c26486433577a357a5a479aa6a862986fb3c48a72c400e083cb6c3397da469179b548b1625e34df89bd52eb4d296cfbe2d63a0b7fcd374d4b15f062b067cadc9e16652115116a2a1c9aa10e46721da22f262744164d6c8543303208579507bcd5c0be3d92d0aa9efd8223164675520c350af483bde80f1f788215ee5a561de19d76f8c8ebb2351cd3131bf378ded432d3ec586a83f4b6df6bcf6fcd0cfdcc7d308eec8687c8fc1529eb677f81f2bd227766fc6c3651a3bf2a63a25f7f141f1a664e52b185a32fa398811a27a42a06fad1ae81d1c68f39d22debe4e3b3d7a6b39fdb19020c3ae9a44fbf3863dee2b1033653b39d4404109a5f8e893ad54fd8da73d646060ac98abb2aa10fa8b7ed7f68c63854ecb93261ac28f6d2d92c451e004fc9f78341575e80e95feed6f125f7928f3238e682097a155f90d6766638b449c9c0dfcbc33cfe5351a0dfbbeaa77a398ee2a0c31ef9ca4c7128bce07b6a8421dd333c788d0127977e19dade41f6e39b64eedba68fcf6228cacd6017e2872e6c4776e5999ea4e4dfd29ada730e692ebd8856b1e18022b8fef5c2f59633925ebd6812f90bbe5f324c7a1f0e057fc933acbb0da94bca7624d8d2b85b8d5e055e10f4103e5b4e8c41c9ef9ae440ebb02fa0357294cbd27f8940241889b8b9fc2945b5ffc09668746750f232f386db1a15811fc56597039ccc211183cb5f0a84f8b87ab0803bae9774d28d7b377be1de4b3a42e6d0cc2214c3e59b3b40263c7e81e6b89d0a064bc3e035eaa91feb5f4727434b3d9dcb60adf9c969a4ccee760a0247dcffdba1f61fe2ab5dbfef7b39e169f1d3692041aff2bb474d48457eacacd66b84b2e8b700d54c2f1fab680404ace6a326b22d47e0f453cc527a9241b82781a76938e0e51ffa75a25254a0eae12e086439473e2f570e3d2eb0725f4b8c24d99bcb6ef49a5a7619c707b99bce7810d13a60f352fcdd62662708f77f1f656dce795dd7ee3bcbf1a48fff69b6546e1a7c5af6a1fe0a1c9c3d19ef9b2108055a2b9a34e18b41838e0b2ca8ed85a73e54b1f1dd284c033a9cc35a7ed0a4de3b5630726b4b2f5e9fe03263d97d567633c1782f970818533244a444a0817f761466fd6d1a93534497ef32e3336109dd0e87f25b425b0240e0f22a3cdc7d6af53b5149987a22a5bb71e9c5cb1dceb6ec06eaca49a3841d8a12e935880679c431b77cf7f57837aaed791f3880f5ef9de77fff1c31abf67e65d517feaab5a83e4dd6162406b10bcc92501b353a099a93a0f1cea131d4bd6cbb8be2b7a46f09ecb411db19ceab343cdbceb20a8c521ee66b9727fedd1907a5cacfdfa69de7c628ef240d9db7518b62fb59b37fafd1dceef0f4c5782e0d8f6d8ed7dcc496f7f9c428efba4fc70240019512174081cca1e42132680523c940f320bae8d2d74c77f01bc0fc65e319bac2cb3486f9aaf035894923b4a82306dc7e1134884de8bcd270e4ee7d918e54c80f211857576e32fce999ad24c6f2a798d027b855e71a7748f79b8eb532e59a782011a9020765b920339b2294574f857a3f00db1cec7aae40224728880b635cbd9815965b1ea05544221ccc6a9e6667c1415515de31322952900087ae666a037450f37f7a0888032703d5fb22c723983b1c6a34a159b04124c4056082c2f2e78dd0e5e9a6724ebf702046e84a29bd1a43947e86098950cd515291ad41656f45b24982b5a9c705390c620954423a556e50f4c65e8803d0b0e3d2719676a48957d4d049ae47e8f04705517aed1851eb6ade2bee28bedfca0cbc7ede33051fb6ac5b4f69c882727078d35fbd119bb15d6760b3527a500f850ce1a2db89c632fa13d1b94baa084279dd123f6920912ee9477fc78f02cb12fb2ea20d76e9480bc39f8baf24bf10a0aa033d4e0a020a89fbd22536e01ba357d0c335ee96ea6c17cfd4eb3fb4a5e79331edd18db64eb44e07a44add187c4305624aea9fc56e2a04087bcd0c0ee83b6163655f15f42767c608fbbacfa81be7376eb4662259d7ab918786ce539c2566da43713d2aaa2f6ffbefe4c262fa6942463bdf1770333479c020daa9fd291fe5dbd2241f1bccc1ae3bf690325ac7206791d0521956da1b79f195871df11b71c0ba52fdc23390e01ab2173f95083f36eea5c80d1a2f44943798be371341e270d95a1f0228e31bf9cf55f91143172d5b776f6db5b2540dde89dfc1a596246c129237a19776f15e240b242db401eb8517d4e2ac0d931d6d6bb5554ff11eadd5e14e425994fd07d6b5a2336c9fb4087d86b57afacedf0853fdf4de989b8f2e2a4f00aae4eb810a0d022c4b5d47fb0fb6eff4f5dfacc485f02e3e0af0a59368687c5f522a1978b6a0f5f56dfcf0686acd6c0b5ceedd85332f2b2168d3c05cd32d675b4b409c8fea2eefb96f511253a0c7fee011026f485574195d5583428ecb5d08732fac2e58b484ac32f769ab334ebadb8bab39500341e2be7e3a17615a925bdf6da6edabfb001035a009c7b2029b835e4da27c9714befccb143bc6caa4f7a44f80226bfcfb6276c247c7cd89a89369697d813b405a38404892e31418004a0500b90cc84faeda1e8178b6214663b5ef7aa938c10581205d3e6080792d8d38fd59f0270ee510b03d78a48b99b12a53bf6d842659b9cc378f7dbe23e8f825d627c5b297e40e11fd174aca9f7a927ee911b801bd655a35f376f139108f20885ee70028d1ea1fb86831c8a40a0c3a333a55ba0a391394622e8ef3c264e4267f20f78b653f73bc1b99f17cd35dd904e4914a21f8235d4cf746ab9e0bfe39931e9c50a67408a5484771bc9632d39e339d8e38dd0657fded374a3873b169fda44a539b1c964c7ccd4a7e8708bd90d826dffa0ae4e8e3ca1db4e338f380f7adfe572882e3aaaa686ac0da44a0123de39009094a770fc4ed1bfba3dd941ffe2db84cf2769ba83df4a03b6f98539b01df9b03ee5815e134754f227eb22996f53ad16645ab8d13170e342d879cc0d88fcf4b0c233f0c974e6d63b9dec2c18f058cf536c8a00e32418553c61ef8d0c5769db03a898ff956278081c487438fb4c4e5694171a87d4cc175fa9d6a258a4a72f20eb18812309b3cbdefd31293b4077437985c0936077df8ce286dcf3329d14ff5ba011c1743b12aa96b69aef8412162ada41537fd3dc6e3b026d185dcd8a8804c35c2b0e8d715d35bd6a5cae6702ab733ea388fd918d223d8efb0d252f0c038354f16fa6d21209870d89f32c5901e89dc7e806a61e955bde0af974d09fa100710c87d5a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Keep Out.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Me </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用watchtower实现Docker容器的自动更新部署</title>
      <link href="2023/05/24/%E5%88%A9%E7%94%A8watchtower%E5%AE%9E%E7%8E%B0Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2/"/>
      <url>2023/05/24/%E5%88%A9%E7%94%A8watchtower%E5%AE%9E%E7%8E%B0Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在前几篇文章中，讨论了利用Github Actions针对Go项目进行构建与打包镜像，而本文章关注于在简单场景下，单体应用的自动检测镜像版本并在获取到新版本时自动更新并清除旧版本的镜像，这对于测试环境或个人开发者来说较为方便，也可以减少手动更新所带来的时间成本。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><img src="https://s2.loli.net/2023/05/23/NVSKzd53wo4mfGu.jpg" style="zoom:50%;" /><p>在Github打包上传镜像至DockerHub后，部署服务的服务器通过watchtower进行检测更新并拉取镜像进行替换更新。完成后进行消息推送的通知。</p><p>watchtower项目地址: <a href="https://github.com/containrrr/watchtower">https://github.com/containrrr/watchtower</a></p><h2 id="Watchtower配置文件"><a href="#Watchtower配置文件" class="headerlink" title="Watchtower配置文件"></a>Watchtower配置文件</h2><p>在所需部署的服务器上采用docker-compose启动watchtower服务，指定版本为1.5.3，在不指定的情况下，latest可能并不能拉取到最新版本的镜像。在<code>WATCHTOWER_NOTIFICATION_URL</code> 中，需要指明的是如果不是通过slack，discord等途径进行消息推送，而是通过http webhook的形式进行推送，则需要在URL前加上generic表明采用原生请求进行推送。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">watchtower:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">containrrr/watchtower:1.5.3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--interval</span> <span class="number">15</span> <span class="string">--cleanup</span> <span class="string">nasnetwork_push_go-push-go-1</span> <span class="string">push_go_docker-push-go-1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WATCHTOWER_NOTIFICATION_REPORT:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">      <span class="attr">WATCHTOWER_NOTIFICATION_TITLE_TAG:</span> <span class="string">&quot;hamster&quot;</span></span><br><span class="line">      <span class="attr">WATCHTOWER_NOTIFICATION_URL:</span> <span class="string">&quot;generic+http://yourip:port/DockerUpdatePushCore&quot;</span></span><br><span class="line">      <span class="attr">WATCHTOWER_NOTIFICATION_DELAY:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">WATCHTOWER_NOTIFICATION_TEMPLATE:</span> <span class="string">|</span></span><br><span class="line">        &#123;&#123;<span class="bullet">-</span> <span class="string">if</span> <span class="string">.Report</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">          &#123;&#123;<span class="bullet">-</span> <span class="string">with</span> <span class="string">.Report</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">        &#123;&#123;<span class="string">len</span> <span class="string">.Scanned</span>&#125;&#125; <span class="string">Scanned,</span> &#123;&#123;<span class="string">len</span> <span class="string">.Updated</span>&#125;&#125; <span class="string">Updated,</span> &#123;&#123;<span class="string">len</span> <span class="string">.Failed</span>&#125;&#125; <span class="string">Failed</span></span><br><span class="line">              &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Updated</span>&#125;&#125;</span><br><span class="line">        <span class="bullet">-</span> &#123;&#123;<span class="string">.Name</span>&#125;&#125; <span class="string">(&#123;&#123;.ImageName&#125;&#125;):</span> &#123;&#123;<span class="string">.CurrentImageID.ShortID</span>&#125;&#125; <span class="string">updated</span> <span class="string">to</span> &#123;&#123;<span class="string">.LatestImageID.ShortID</span>&#125;&#125;</span><br><span class="line">              &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">              &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Fresh</span>&#125;&#125;</span><br><span class="line">        <span class="bullet">-</span> &#123;&#123;<span class="string">.Name</span>&#125;&#125; <span class="string">(&#123;&#123;.ImageName&#125;&#125;):</span> &#123;&#123;<span class="string">.State</span>&#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Skipped</span>&#125;&#125;</span><br><span class="line">        <span class="bullet">-</span> &#123;&#123;<span class="string">.Name</span>&#125;&#125; <span class="string">(&#123;&#123;.ImageName&#125;&#125;):</span> &#123;&#123;<span class="string">.State</span>&#125;&#125;<span class="string">:</span> &#123;&#123;<span class="string">.Error</span>&#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Failed</span>&#125;&#125;</span><br><span class="line">        <span class="bullet">-</span> &#123;&#123;<span class="string">.Name</span>&#125;&#125; <span class="string">(&#123;&#123;.ImageName&#125;&#125;):</span> &#123;&#123;<span class="string">.State</span>&#125;&#125;<span class="string">:</span> &#123;&#123;<span class="string">.Error</span>&#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">          &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">        &#123;&#123;<span class="bullet">-</span> <span class="string">else</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">          &#123;&#123;<span class="string">range</span> <span class="string">.Entries</span> <span class="string">-</span>&#125;&#125;&#123;&#123;<span class="string">.Message</span>&#125;&#125;&#123;&#123;<span class="string">&quot;\n&quot;</span>&#125;&#125;&#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">        &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>如不需要推送服务，则无需添加environment部分内容。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">watchtower:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">containrrr/watchtower:1.5.3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--interval</span> <span class="number">15</span> <span class="string">--cleanup</span> <span class="string">nasnetwork_push_go-push-go-1</span> <span class="string">push_go_docker-push-go-1</span></span><br></pre></td></tr></table></figure><p>volumes指定系统下docker.sock的路径，而在command中进行绑定需要监测的容器与其他命令，在上述command中，</p><p> <code>—interval</code> 指定每次检测的间隔秒数，15则为15秒</p><p><code>—cleanup</code> 指定在更新容器后清理旧容器与旧镜像</p><p><code>nasnetwork_push_go-push-go-1</code> 与 <code>push_go_docker-push-go-1</code> 都为容器名，可通过<code>docker ps</code> 进行查看，多个容器之间通过空格进行分割。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>首先通过 <code>docker-compose pull</code> 进行镜像的拉取</p><p>拉取完成后，通过<code>docker-compose up -d</code> 进行watchtower的启动</p><p>完成后即可通过查看日志获取检测结果信息。</p><p><img src="https://s2.loli.net/2023/05/23/39TIpxOSBLDvVEY.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这几篇文章，可以以较小的维护成本与开发成本构建一套属于自己的CI/CD流程，利用Docker容器轻松进行容器的分发与部署。后续会继续介绍统一消息推送中心以及k8s与k3s的构建与部署。</p><p>之前的文章：</p><p><a href="https://buycoffee.top/2023/05/01/%E4%BD%BF%E7%94%A8GitHub%20Actions%E4%B8%BAGo%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93CI:CD/">https://buycoffee.top/2023/05/01/使用GitHub Actions为Go项目实现简易CI:CD/</a></p><p><a href="https://buycoffee.top/2023/05/23/%E5%88%A9%E7%94%A8Github%20Actions%E4%B8%BAGo%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0git%E4%B8%8E%E7%BC%96%E8%AF%91%E4%BF%A1%E6%81%AF/">https://buycoffee.top/2023/05/23/利用Github Actions为Go程序添加git与编译信息/</a></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Github Actions为Go程序添加git与编译信息</title>
      <link href="2023/05/23/%E5%88%A9%E7%94%A8Github%20Actions%E4%B8%BAGo%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0git%E4%B8%8E%E7%BC%96%E8%AF%91%E4%BF%A1%E6%81%AF/"/>
      <url>2023/05/23/%E5%88%A9%E7%94%A8Github%20Actions%E4%B8%BAGo%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0git%E4%B8%8E%E7%BC%96%E8%AF%91%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>可以通过/version获取到当前服务的git版本号以及相关信息，也可以看到编译时间与编译环境等信息。</p><p><img src="https://s2.loli.net/2023/05/23/F5xGV3UgXrmOPAh.png"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在进行Go程序的编译时，可以通过传入额外的参数来修改编译过程，比较常见的有：</p><ol><li><strong><code>o &lt;output&gt;</code></strong>: 指定输出文件的名称。例如，<code>go build -o myprogram</code>将生成名为 <code>myprogram</code> 的可执行文件。</li><li><strong><code>ldflags &quot;&lt;flags&gt;&quot;</code></strong>: 用于传递链接器（ld）的标志。您可以使用此选项将特定标志传递给链接器，例如设置版本信息或自定义链接行为。例如，<code>go build -ldflags &quot;-X main.version=1.0.0&quot;</code>将在构建过程中设置名为 <strong><code>version</code></strong> 的变量的值为 <code>1.0.0</code>。</li><li><strong><code>gcflags &quot;&lt;flags&gt;&quot;</code></strong>: 用于传递Go编译器（gc）的标志。您可以使用此选项传递特定标志给编译器，例如优化级别或其他调试信息。例如，<code>go build -gcflags &quot;-N -l&quot;</code> 将禁用优化并生成带有调试信息的可执行文件。</li></ol><p>本次的实现则是利用<code>ldflags &quot;&lt;flags&gt;&quot;</code>指令进行信息的注入。</p><h2 id="核心构建指令"><a href="#核心构建指令" class="headerlink" title="核心构建指令"></a>核心构建指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build -o ./temp/release/linux_amd64/service -ldflags <span class="string">&quot;     -X &#x27;home-network-watcher/utility/bin_utils.GitTag=v1.11.12&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=8405a9a7a15c33399d8cc400f08836e14b9dc085&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=2023.05.21.03:56:22&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=github@action golang:1.20-buster&#x27; &quot;</span>  main.go</span><br></pre></td></tr></table></figure><p>接下来进行Go代码与GitHub Actions、Dockerfile的编写。</p><h2 id="Go美化注入代码"><a href="#Go美化注入代码" class="headerlink" title="Go美化注入代码"></a>Go美化注入代码</h2><p>新建一个.Go文件，以变量的形式用以储存在程序中需要的git与版本信息，并创建一个函数用以美化显示信息。</p><p>创建需要注入信息的变量，设置默认值为unknown，等待编译注入再进行重新赋值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> binInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化为 unknown，如果编译时没有传入这些值，则为 unknown</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">GitTag         = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">GitCommitLog   = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">GitStatus      = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">BuildTime      = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">BuildGoVersion = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">VersionString = <span class="string">&quot;GitTag:&quot;</span> + GitTag + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;GitCommitLog:&quot;</span> + GitCommitLog + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;GitStatus:&quot;</span> + GitStatus + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;BuildTime:&quot;</span> + BuildTime + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;BuildGoVersion:&quot;</span> + BuildGoVersion + <span class="string">&quot;\n&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*// StringifySingleLine 返回单行格式</span></span><br><span class="line"><span class="comment">func StringifySingleLine() string &#123;</span></span><br><span class="line"><span class="comment">return fmt.Sprintf(&quot;GitTag=%s. GitCommitLog=%s. GitStatus=%s. BuildTime=%s. GoVersion=%s. runtime=%s/%s.&quot;,</span></span><br><span class="line"><span class="comment">GitTag, GitCommitLog, GitStatus, BuildTime, BuildGoVersion, runtime.GOOS, runtime.GOARCH)</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringifyMultiLine 返回多行格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringifyMultiLine</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;GitTag=%s\nGitCommitLog=%s\nGitStatus=%s\nBuildTime=%s\nGoVersion=%s\nruntime=%s/%s\n&quot;</span>,</span><br><span class="line">GitTag, GitCommitLog, GitStatus, BuildTime, BuildGoVersion, runtime.GOOS, runtime.GOARCH)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">beauty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对一些值做美化处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">beauty</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> GitStatus == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// GitStatus 为空时，说明本地源码与最近的 commit 记录一致，无修改</span></span><br><span class="line"><span class="comment">// 为它赋一个特殊值</span></span><br><span class="line">GitStatus = <span class="string">&quot;cleanly&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 将多行结果合并为一行</span></span><br><span class="line">GitStatus = strings.Replace(strings.Replace(GitStatus, <span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot; |&quot;</span>, <span class="number">-1</span>), <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; |&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Go项目中显示git与编译信息"><a href="#在Go项目中显示git与编译信息" class="headerlink" title="在Go项目中显示git与编译信息"></a>在Go项目中显示git与编译信息</h2><p>可在main.go中设置命令行参数进行信息显示。</p><p>如下代码，在运行编译后的二进制文件时，通过<code>-v</code>进行信息显示。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/gogf/gf/contrib/drivers/mysql/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gogf/gf/v2/os/gctx&quot;</span></span><br><span class="line"><span class="string">&quot;home-network-watcher/internal/cmd&quot;</span></span><br><span class="line">_ <span class="string">&quot;home-network-watcher/internal/logic&quot;</span></span><br><span class="line">_ <span class="string">&quot;home-network-watcher/internal/packed&quot;</span></span><br><span class="line">binInfo <span class="string">&quot;home-network-watcher/utility/bin_utils&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := flag.Bool(<span class="string">&quot;v&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Show bin info.&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *v &#123;</span><br><span class="line">_, _ = fmt.Fprint(os.Stderr, binInfo.StringifyMultiLine())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">cmd.Main.Run(gctx.New())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以通过绑定接口的形式，在访问服务<code>/version</code> 时进行信息的显示。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">group.ALL(<span class="string">&quot;/version&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(r *ghttp.Request)</span></span> &#123;</span><br><span class="line">r.Response.Write(binInfo.VersionString)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Dockerfile编写"><a href="#Dockerfile编写" class="headerlink" title="Dockerfile编写"></a>Dockerfile编写</h2><p>首先定义Go构建器</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br></pre></td></tr></table></figure><p>设置需要注入的构建参数的默认值</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> GIT_TAG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_COMMIT_LOG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TIME=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_GO_VERSION=<span class="string">&quot;github@action golang:1.20-buster&quot;</span></span><br></pre></td></tr></table></figure><p>关键的注入则是通过在docker进行构建时也可以进行参数的绑定这个特性来完成的。</p><p>GitHub Action将ARG的参数传入docker build后，接下来则将信息传入到gf build或者go build中，首先构建传入的信息。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 LDFlags 变量</span></span><br><span class="line"><span class="keyword">ENV</span> LDFLAGS=<span class="string">&quot; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=$&#123;GIT_COMMIT_LOG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=$&#123;BUILD_TIME&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=$&#123;BUILD_GO_VERSION&#125;&#x27; \</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>以<code>&#39;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#39;</code> 为例</p><p>go通过追溯包名进行参数数据的传递，在上述定义存储变量的Go文件中，模块为<code>&quot;home-network-watcher/utility/bin_utils”</code> ，则在构建时也是传入包名加内部的变量名进行数据传递，在这里我们将上面获取到的GIT_TAG传递给GitTag变量。</p><p>最后则是通过go build传递进去</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -ldflags <span class="string">&quot;<span class="variable">$&#123;LDFLAGS&#125;</span>&quot;</span> -o temp/release/linux_amd64/service main.go</span></span><br></pre></td></tr></table></figure><p>以下为完整Dockerfile</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置构建参数的默认值</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_TAG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_COMMIT_LOG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TIME=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_GO_VERSION=<span class="string">&quot;github@action golang:1.20-buster&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印构建参数</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;GIT_TAG=<span class="variable">$&#123;GIT_TAG&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;GIT_COMMIT_LOG=<span class="variable">$&#123;GIT_COMMIT_LOG&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;BUILD_TIME=<span class="variable">$&#123;BUILD_TIME&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;BUILD_GO_VERSION=<span class="variable">$&#123;BUILD_GO_VERSION&#125;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 LDFlags 变量</span></span><br><span class="line"><span class="keyword">ENV</span> LDFLAGS=<span class="string">&quot; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=$&#123;GIT_COMMIT_LOG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=$&#123;BUILD_TIME&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=$&#123;BUILD_GO_VERSION&#125;&#x27; \</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get github.com/gogf/gf/cmd/gf/v2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go install github.com/gogf/gf/cmd/gf/v2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> gf build -e <span class="string">&quot;-ldflags \&quot;<span class="variable">$&#123;LDFLAGS&#125;</span>\&quot; &quot;</span></span></span><br><span class="line"><span class="comment"># RUN go build -ldflags &quot;$&#123;LDFLAGS&#125;&quot; -o temp/release/linux_amd64/service main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> loads/alpine:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;Hamster &lt;liaolaixin@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                INSTALLATION</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的项目路径</span></span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">WORKDIR</span><span class="bash"> /app/main</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go/src/app/temp/release/linux_amd64/service <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 添加应用可执行文件，并设置执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 增加端口绑定</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10401</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                   START</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$WORKDIR</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;./service&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="Github-Actions编写"><a href="#Github-Actions编写" class="headerlink" title="Github Actions编写"></a>Github Actions编写</h2><p>十分简单，只需要利用Actions里面可以方便获取的git信息即可，通过<code>—build-arg</code>传递入docker build中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-push:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">get_version</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;CURRENT_VERSION=$&#123;GITHUB_REF/refs\/tags\//&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Git</span> <span class="string">Commit</span> <span class="string">Log</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">git-commit-log</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;GIT_COMMIT_LOG=$<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Build</span> <span class="string">Time</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">build-time</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;BUILD_TIME=$(date +&#x27;%Y.%m.%d.%H:%M:%S&#x27;)&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">Dockerhub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">.</span> <span class="string">--build-arg</span> <span class="string">GIT_TAG=$&#123;&#123;env.CURRENT_VERSION&#125;&#125;</span> <span class="string">--build-arg</span> <span class="string">GIT_COMMIT_LOG=&quot;$&#123;&#123;env.GIT_COMMIT_LOG&#125;&#125;&quot;</span> <span class="string">--build-arg</span> <span class="string">BUILD_TIME=$&#123;&#123;env.BUILD_TIME&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">environment</span> <span class="string">variables</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.GIT_COMMIT_LOG&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.BUILD_TIME&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.CURRENT_VERSION&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">env.CURRENT_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">as</span> <span class="string">latest</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:latest</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">env.CURRENT_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:latest</span></span><br></pre></td></tr></table></figure><p>将获取到的信息首先储存在<code>$GITHUB_ENV</code>中，在构建docker build指令时进行传递</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="variable">$IMAGE_NAME</span>:<span class="variable">$&#123;&#123; github.sha &#125;</span>&#125; . --build-arg GIT_TAG=<span class="variable">$&#123;&#123;env.CURRENT_VERSION&#125;</span>&#125; --build-arg GIT_COMMIT_LOG=<span class="string">&quot;<span class="variable">$&#123;&#123;env.GIT_COMMIT_LOG&#125;</span>&#125;&quot;</span> --build-arg BUILD_TIME=<span class="variable">$&#123;&#123;env.BUILD_TIME&#125;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/23/z5es4VuFhUygAI7.png"></p><p>这样子便完成了git与版本信息的注入，十分的自动便捷。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>主要的难点还是如何将信息在整个构建的过程中传递下去，只要可以传递好所需的信息在构建的时候即可以方便地通过go build的-ldflags将信息传递入二进制文件中。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Docker </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions为Go项目实现简易CI/CD</title>
      <link href="2023/05/01/%E4%BD%BF%E7%94%A8GitHub%20Actions%E4%B8%BAGo%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93CI:CD/"/>
      <url>2023/05/01/%E4%BD%BF%E7%94%A8GitHub%20Actions%E4%B8%BAGo%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93CI:CD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Github-Actions与CI-CD"><a href="#Github-Actions与CI-CD" class="headerlink" title="Github Actions与CI/CD"></a>Github Actions与CI/CD</h2><p>GitHub Actions是GitHub提供的一种自动化工具，可以帮助您在代码仓库中自动执行任务，如构建、测试和部署。CI/CD（持续集成/持续部署）是一种自动化软件开发实践，可以帮助您更快地交付高质量的软件。在本文中，我们将介绍如何使用GitHub Actions为Go项目实现简易CI/CD。</p><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p><img src="https://s2.loli.net/2023/05/01/3knKw9TEiHsIJYt.png"></p><p>将Actions主要分为三个部分</p><ol><li>在代码提交后进行编译检查，检查是否存在代码错误。</li><li>在进行git tag操作后，针对tag进行docker镜像的构建与推送。</li><li>达到版本号发布时，自动构建多平台可执行二进制文件。</li></ol><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><h3 id="为Actions开放仓库权限"><a href="#为Actions开放仓库权限" class="headerlink" title="为Actions开放仓库权限"></a>为Actions开放仓库权限</h3><p>在仓库主页，选中<strong>Settings→Actions→General→Workflow permissions</strong>，将权限设置为Read and write permisssions。</p><p><img src="https://s2.loli.net/2023/05/01/4I6uCWfpiXgcNZK.png"></p><h3 id="获取Docker相关信息"><a href="#获取Docker相关信息" class="headerlink" title="获取Docker相关信息"></a>获取Docker相关信息</h3><p>将信息储存在<strong>Actions secrets and variables</strong>中，分别设置Docker用户名，token与仓库名称。</p><p>获取 Docker token 的步骤如下：</p><ol><li>登录到 Docker Hub 帐户。</li><li>点击右上角的头像，选择“Account Settings”。</li><li>在左侧菜单中选择“Security”。</li><li>滚动到“Access Tokens”部分，然后单击“New Access Token”按钮。</li><li>输入访问令牌的描述，选择令牌的有效期，并选择要授予令牌的权限。</li><li>单击“Create”按钮以生成令牌。</li><li>复制生成的令牌并保存在安全的地方。</li></ol><p>仓库名称则为 <strong>用户名/仓库名</strong></p><h3 id="进行secrets的设置"><a href="#进行secrets的设置" class="headerlink" title="进行secrets的设置"></a>进行secrets的设置</h3><p>在<strong>Settings→Secrets and variables</strong>中点击<strong>New repository secret</strong>进行新增。</p><ol><li>DOCKER_USERNAME</li><li>DOCKER_ACCESS_TOKEN </li><li>DOCKER_IMAGE_NAME</li></ol><p><img src="https://s2.loli.net/2023/05/01/5WStRVPOZh4MzeD.png"></p><h2 id="设置Actions"><a href="#设置Actions" class="headerlink" title="设置Actions"></a>设置Actions</h2><p>点击仓库内<strong>Actions</strong>模块，点击<strong>New workflow</strong>进行工作流的新增。</p><h3 id="代码编译检查工作流"><a href="#代码编译检查工作流" class="headerlink" title="代码编译检查工作流"></a>代码编译检查工作流</h3><p>将会在检测到push或pull_request后进行代码编译检查。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a golang project</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">代码编译测试</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-go@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">go-version:</span> <span class="number">1.19</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">go</span> <span class="string">build</span> <span class="string">-v</span> <span class="string">./...</span></span><br><span class="line">        <span class="string">pwd</span></span><br></pre></td></tr></table></figure><h3 id="编译构建并推送Docker镜像"><a href="#编译构建并推送Docker镜像" class="headerlink" title="编译构建并推送Docker镜像"></a>编译构建并推送Docker镜像</h3><p>此工作流只会在仓库新增tag时进行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">tag</span> <span class="string">v0.0.1</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">--tags</span></span><br></pre></td></tr></table></figure><p>工作流分为以下几个步骤</p><ol><li>获取tag作为版本号</li><li>根据Dockerfile进行Docker镜像的构建</li><li>针对构建完成镜像进行tag打版本号</li><li>将镜像推送至Dockerhub</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-push:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">get_version</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;VERSION=$&#123;GITHUB_REF/refs\/tags\//&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_OUTPUT</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">Dockerhub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">steps.get_version.outputs.VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">as</span> <span class="string">latest</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:latest</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">steps.get_version.outputs.VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:latest</span></span><br></pre></td></tr></table></figure><p>这时我们需要针对项目进行Dockerfile的编写，一下是一个针对Goframe项目的示例。</p><ol><li>设置golang构建环境，有许多版本可以选择，可以参考<a href="https://hub.docker.com/_/golang">https://hub.docker.com/_/golang</a>，这里选择<strong>golang:1.20-buster。</strong></li><li>拷贝代码至构建环境，进行构建，在这里将编译完成后将二进制文件命名为service，构建命令也可以指定系统与架构，在命令中加上<strong>GOOS=linux GOARCH=amd64</strong>。</li><li>设置镜像环境，设置工作路径，为二进制文件添加权限并增加端口绑定。</li><li>设置入口命令。</li></ol><p>至此一份Dockerfile就编写完成了。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> VERSION=dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 go build -o service -ldflags=-X=main.version=<span class="variable">$&#123;VERSION&#125;</span> main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> loads/alpine:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;Hamster &lt;liaolaixin@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                INSTALLATION</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的项目路径</span></span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">WORKDIR</span><span class="bash"> /app/main</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go/src/app/service <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 添加应用可执行文件，并设置执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加端口绑定</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10399</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                   START</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$WORKDIR</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;./service&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>新增后通过git tag测试工作流，检查Dockerhub是否有最新构建镜像。</p><p><img src="https://s2.loli.net/2023/05/01/bTpIQWdFaGjXs6t.png"></p><p><img src="https://s2.loli.net/2023/05/01/slGbngieMRJIqZo.png"></p><h2 id="编译多平台二进制文件"><a href="#编译多平台二进制文件" class="headerlink" title="编译多平台二进制文件"></a>编译多平台二进制文件</h2><p>设置为只在新增release时进行构建，可以设置需要的系统架构或排除的，十分简单易用。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">build-go-binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">created</span>] <span class="comment"># 表示在创建新的 Release 时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-go-binary:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">goos:</span> [<span class="string">linux</span>, <span class="string">windows</span>, <span class="string">darwin</span>] <span class="comment"># 需要打包的系统</span></span><br><span class="line">        <span class="attr">goarch:</span> [<span class="string">amd64</span>, <span class="string">arm64</span>] <span class="comment"># 需要打包的架构</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="comment"># 排除某些平台和架构</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">goarch:</span> <span class="string">arm64</span></span><br><span class="line">            <span class="attr">goos:</span> <span class="string">windows</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wangyoucao577/go-release-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 一个默认的变量，用来实现往 Release 中添加文件</span></span><br><span class="line">          <span class="attr">goos:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.goos</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">goarch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.goarch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">goversion:</span> <span class="number">1.18</span> <span class="comment"># 可以指定编译使用的 Golang 版本</span></span><br><span class="line">          <span class="attr">binary_name:</span> <span class="string">&quot;push_go&quot;</span> <span class="comment"># 可以指定二进制文件的名称</span></span><br><span class="line">          <span class="attr">pre_command:</span> <span class="string">export</span> <span class="string">CGO_ENABLED=0</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">GODEBUG=http2client=0</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在仓库中新增release并测试，等待编译完成后即可在release中查看不同系统架构的二进制文件。</p><p><img src="https://s2.loli.net/2023/05/01/AMTp96LrmwROkcj.png"></p><p><img src="https://s2.loli.net/2023/05/01/mCYA7OkpiJ43Pba.png"></p><h2 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h2><p>可针对Actions的进度进行消息通知，在<strong>Settings→Webhooks</strong>设置推送目标URL，搭配自建的消息推送即可实现在手机上获取Actions进度流程。</p><img src="https://s2.loli.net/2023/05/01/tVzdPTXu3UZeb8k.jpg" style="zoom:33%;" /><h2 id="TODO-可复用工作流"><a href="#TODO-可复用工作流" class="headerlink" title="TODO: 可复用工作流"></a>TODO: 可复用工作流</h2>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Docker </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向破解登录获取360路由器信息</title>
      <link href="2023/04/29/%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96360%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BF%A1%E6%81%AF%20/"/>
      <url>2023/04/29/%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96360%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BF%A1%E6%81%AF%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>360路由器目前没有无损刷机的办法，获取ssh终端权限较为困难，如想获取路由器状态信息以及连接设备信息就比较困难，但可以通过采用逆向破解网页登陆的形式进行后台的登录进行信息获取。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/hamster1963/360-router-data-retriever">https://github.com/hamster1963/360-router-data-retriever</a></p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>采用代码进行360后台的登录，进行路由器信息的获取。</p><p><img src="https://s2.loli.net/2023/04/29/lP21qpnfYciB8ku.png"></p><h2 id="登陆过程分析"><a href="#登陆过程分析" class="headerlink" title="登陆过程分析"></a>登陆过程分析</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>直接采用Safari的开发者工具进行抓包。</p><p>在输入框中输入管理员密码进行登录。</p><img src="https://s2.loli.net/2023/04/29/qKLdOtjYf2nrNwJ.png" style="zoom:50%;" /><p><img src="https://s2.loli.net/2023/04/29/kSl9RNuyVEebhtM.png"></p><p>可以看到页面首先请求了get_rand_key.cgi（CGI是通用网关接口，是一种比较传统的动态网页的实现方式），通过Get方法获取到了一串随机的字符串。</p><p><img src="https://s2.loli.net/2023/04/29/hYjMGzbcuK3rn9F.png"></p><p>在获取完成后进行一些暂时未知的处理后请求了web_login.cgi，请求数据中包括了管理员用户名与密码，可以发现pass密码中的值并不是我们所填入的密码值，首先猜测可能为md5或aes加密后的字符串。</p><p><img src="https://s2.loli.net/2023/04/29/dRaCTYcKXIGtn9e.png"></p><p>查看登陆接口在登陆成功后的返还与Header。接口返还了登陆状态码以及Token-ID字段数据，同时在返回的Header中可以看到有Set-Cookie字段，猜测在后续的数据接口中应该会在请求头中携带token以及cookie进行权限验证。</p><p><img src="https://s2.loli.net/2023/04/29/uhJop1VMIiS2AHF.png"></p><p><img src="https://s2.loli.net/2023/04/29/97WvGq3pLAVJyY8.png"></p><p>查看后续请求头，可以观察到在Cookie中携带了先前返回的信息，包含Set-Cookie以及token信息。</p><p><img src="https://s2.loli.net/2023/04/29/p6kqYZRSTmeH5C7.png"></p><p>目前为止，可以对登陆过程进行一个小总结。</p><p>输入账号密码→点击登录→获取随机字符串→进行加密→请求登录接口→获取Cookie以及token</p><p>目前主要难点为如何进行加密的逆向破解。</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>首先尝试md5加密，与目标密码不一致。</p><p>其次尝试简单粗暴的方式，查源码。查看js代码后，发现js代码进过webpack混淆打包，从函数名以及变量名中很难找出加密的代码块，因此使用关键词进行搜索。</p><p><img src="https://s2.loli.net/2023/04/29/CvOPTq6JdurMxmn.png"></p><p>果然还是简单粗暴比较有用，在搜索到AES关键词后，可以从代码中发现密码加密的关键逻辑<img src="https://s2.loli.net/2023/04/29/8x3N4wdiPZRpShO.png"></p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">                        <span class="keyword">switch</span> (t.prev = t.next) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.next = <span class="number">2</span>, c(<span class="number">0</span>).then((<span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">                                r = n || t;</span><br><span class="line">                                <span class="keyword">var</span> o = a.enc.Hex.parse(r.rand_key),</span><br><span class="line">                                    u = a.enc.Latin1.parse(<span class="string">&quot;360luyou@install&quot;</span>),</span><br><span class="line">                                    c = a.AES.encrypt(e, o, &#123;</span><br><span class="line">                                        iv: u,</span><br><span class="line">                                        mode: a.mode.CBC,</span><br><span class="line">                                        padding: a.pad.Pkcs7</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                i = c.ciphertext.toString()</span><br><span class="line">                            &#125;));</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.abrupt(<span class="string">&quot;return&quot;</span>, r.key_index + i);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.stop()</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">                        <span class="keyword">switch</span> (t.prev = t.next) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">if</span> (r = e.substr(<span class="number">32</span>, e.length - <span class="number">32</span>), i = &#123;&#125;, !n) &#123;</span><br><span class="line">                                t.next = <span class="number">6</span>;</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            i.rand_key = n,</span><br><span class="line">                            t.next = <span class="number">9</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.next = <span class="number">8</span>, c(<span class="number">0</span>, e, !<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                            i = t.sent;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                            <span class="keyword">if</span> (i.rand_key) &#123;</span><br><span class="line">                                t.next = <span class="number">11</span>;</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> t.abrupt(<span class="string">&quot;return&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                            <span class="keyword">return</span> u = a.enc.Hex.parse(i.rand_key), s = a.enc.Latin1.parse(<span class="string">&quot;360luyou@install&quot;</span>), d = a.enc.Hex.parse(r).toString(a.enc.Base64), p = a.AES.decrypt(d, u, &#123;</span><br><span class="line">                                iv: s,</span><br><span class="line">                                mode: a.mode.CBC,</span><br><span class="line">                                padding: a.pad.Pkcs7</span><br><span class="line">                            &#125;), t.abrupt(<span class="string">&quot;return&quot;</span>, p.toString(a.enc.Utf8));</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.stop()</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p>虽然变量名与函数名被混淆，但可以从代码中看到采用AES加密。</p><p>首先进行加密前的处理，对rand_key进行hex，定义iv，设置模式为CBC，padding为PKCS7。</p><p>加密步骤为：</p><ol><li>获取rand_key的后32位进行hex</li><li>对密码进行PKCS7Encode</li><li>最后以hex后的rand_key作为key，PKCS7Encode后的密码作为plainText，360luyou@install字符串进行hex后作为iv</li><li>进行AES加密</li></ol><p>在加密结束后，将前rand_key前32位与加密字符串进行拼接作为pass传输到路由器进行登录验证。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里给出Python与Go的加密示例。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_aes_str</span>(<span class="params">rand_key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27;\x33\x36\x30\x6c\x75\x79\x6f\x75\x40\x69\x6e\x73\x74\x61\x6c\x6c&#x27;</span>  <span class="comment"># &quot;360luyou@install&quot;.decode(&#x27;hex&#x27;)</span></span><br><span class="line">    encryptor = AES.new(rand_key, mode, iv)</span><br><span class="line">    encoder = PKCS7Encoder()</span><br><span class="line">    text = <span class="string">&quot;password&quot;</span>  <span class="comment"># password</span></span><br><span class="line">    pad_text = encoder.encode(text)</span><br><span class="line">    cipher = encryptor.encrypt(<span class="built_in">bytes</span>(pad_text, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GenerateAesString 生成加密字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">GenerateAesString</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 判断随机字符串是否为空</span></span><br><span class="line"><span class="keyword">if</span> r.randStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">g.Dump(<span class="string">&quot;randStr is empty&quot;</span>)</span><br><span class="line">err := r.GetRandomString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// randKey := &quot;fbf8a1ca3b31ace17adece7f6941a278017ff28b58200c5a153e07f5dc840b3f&quot;</span></span><br><span class="line">decodeString, err := hex.DecodeString(r.randStr[<span class="number">32</span>:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">block, err := aes.NewCipher(decodeString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">encryptor := cipher.NewCBCEncrypter(block, configs.DefaultAesIv)</span><br><span class="line">p7 := utils.PKCS7Encoder&#123;BlockSize: <span class="number">16</span>&#125;</span><br><span class="line">padded := p7.Encode([]<span class="keyword">byte</span>(r.Password))</span><br><span class="line">cipherText := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(padded))</span><br><span class="line">encryptor.CryptBlocks(cipherText, padded)</span><br><span class="line">r.aesStr = hex.EncodeToString(cipherText)</span><br><span class="line"><span class="keyword">if</span> r.aesStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">g.Dump(<span class="string">&quot;aesStr is empty&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;aesStr is empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">g.Dump(gtime.Now().String() + <span class="string">&quot; Generate AESKey &quot;</span> + r.aesStr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go项目代码层级"><a href="#Go项目代码层级" class="headerlink" title="Go项目代码层级"></a>Go项目代码层级</h2><p>完整的登陆以及获取信息由Go代码进行编写。</p><p>首先定义不同模块的接口以及结构体</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LoginMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">Login() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AesMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">GetRandomString() error</span><br><span class="line">GenerateAesString() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Router <span class="keyword">struct</span> &#123;</span><br><span class="line">Address   <span class="keyword">string</span></span><br><span class="line">Password  <span class="keyword">string</span></span><br><span class="line">state     <span class="keyword">bool</span></span><br><span class="line">aesIv     []<span class="keyword">byte</span></span><br><span class="line">inHeaders <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">randStr   <span class="keyword">string</span></span><br><span class="line">aesStr    <span class="keyword">string</span></span><br><span class="line">token     <span class="keyword">string</span></span><br><span class="line">cookie    <span class="keyword">string</span></span><br><span class="line">Headers   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RouterMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">GetRouterInfo() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后以嵌套接口的形式将不同模块组合起来。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RouterController <span class="keyword">interface</span> &#123;</span><br><span class="line">LoginMethod</span><br><span class="line">AesMethod</span><br><span class="line">RouterMethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用时，采用接口赋值的形式调用接口内的方法，使程序变得更加灵活且便于维护。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> routerMain internal.RouterController</span><br><span class="line">myRouter := internal.Router&#123;</span><br><span class="line">Address:  configs.RouterAddress,</span><br><span class="line">Password: configs.RouterPassword,</span><br><span class="line">&#125;</span><br><span class="line">routerMain = &amp;myRouter</span><br><span class="line"></span><br><span class="line">err := routerMain.GetRandomString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.GenerateAesString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.Login()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.GetRouterInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言项目内存泄露问题的发现与解决</title>
      <link href="2023/04/24/%E4%B8%80%E6%AC%A1Go%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
      <url>2023/04/24/%E4%B8%80%E6%AC%A1Go%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>后端功能为采集家庭网络信息并对外开放接口，每1s或每5s进行采集。</p><p>采用docker打包Go编译完成后的二进制文件，通过docker-compose部署在云服务器上。</p><p>在运行一段时间后，内存报警，内存占用不断增高，怀疑发生了内存泄漏，且GC在其中无法清理内存。</p><h2 id="原功能实现"><a href="#原功能实现" class="headerlink" title="原功能实现"></a>原功能实现</h2><p>原功能采用for关键词加time.Sleep进行实现，参考于Python服务器探针代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">CPU = get_cpu()</span><br><span class="line">Uptime = get_uptime()</span><br><span class="line">Load_1, Load_5, Load_15 = os.getloadavg()</span><br><span class="line">MemoryTotal, MemoryUsed, SwapTotal, SwapFree = get_memory()</span><br><span class="line">HDDTotal, HDDUsed = get_hdd()</span><br><span class="line">  get_router_info()</span><br></pre></td></tr></table></figure><p>在Go代码中，为获取一段时间内的消耗流量与消耗流量最多用户，创建了两个变量。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxFLow <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> maxFLowUser <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>并在后续的计算中给变量赋值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算用户流量变化</span></span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> userList.Array() &#123;</span><br><span class="line">userMap := gconv.Map(user)</span><br><span class="line"><span class="keyword">for</span> _, userNow := <span class="keyword">range</span> userListNow &#123;</span><br><span class="line">userNowMap := gconv.Map(userNow)</span><br><span class="line"><span class="keyword">if</span> userMap[<span class="string">&quot;id&quot;</span>] == userNowMap[<span class="string">&quot;id&quot;</span>] &#123;</span><br><span class="line"><span class="comment">// 计算用户流量变化</span></span><br><span class="line">totalFlow := gconv.Int(userNowMap[<span class="string">&quot;down&quot;</span>]) - gconv.Int(userMap[<span class="string">&quot;down&quot;</span>])</span><br><span class="line"><span class="keyword">if</span> totalFlow &gt; maxFLow &#123;</span><br><span class="line">maxFLow = totalFlow</span><br><span class="line">maxFLowUser = gconv.String(userNowMap[<span class="string">&quot;remark&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄露原因"><a href="#内存泄露原因" class="headerlink" title="内存泄露原因"></a>内存泄露原因</h2><p>由于采用for关键词，在 Go 中，如果在 for 循环中创建了一个新的变量，但在每个循环迭代中没有将其重新分配，则可能会导致内存泄漏。</p><p>例如，以下代码段将创建一个新的字符串，并在每个循环迭代中将其连接到另一个字符串上，但它没有在每个迭代中将新字符串重新分配：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    newString := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    result += newString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，每次迭代都会创建一个新的字符串，但由于新的字符串没有重新分配，因此在每个迭代后，将有一个新的字符串和一个旧的字符串（在 result 变量中）仍然引用它。这会导致大量的内存泄漏，因为旧的字符串仍然存在于内存中，而无法被垃圾回收器清理。</p><p>为了避免内存泄漏，可以在每个迭代中将新字符串重新分配给变量，如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    newString := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    result += newString</span><br><span class="line">    newString = <span class="string">&quot;&quot;</span> <span class="comment">// 重新分配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将新字符串分配给一个新变量，可以确保每次迭代都有一个新的变量来引用新的字符串，从而避免内存泄漏。在重新分配新变量后，旧的字符串将不再被引用，并且可以被垃圾回收器清理。</p><p>归根结底，则是在每次循环中创建的变量一直处在引用状态，GC无法正确对其进行垃圾回收，导致程序内存占用一直在不断升高。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>采用Go语言的思路进行书写，项目基于Goframe框架，重构后采用框架中的gcron（定时任务）进行定期的数据拉取，函数内部定义参数可在函数在执行结束后结束引用关系，避免采用for循环造成内存泄露。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err = gcron.AddSingleton(ctx, <span class="string">&quot;*/5 * * * * *&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">err = network_utils.NodeUtils.GetNodeInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;获取当前代理节点信息&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于GC"><a href="#关于GC" class="headerlink" title="关于GC"></a>关于GC</h2><p>Go语言的垃圾回收（GC）是在运行时进行的，不是在函数结束后。Go语言的垃圾回收器是一种并发、自适应的垃圾回收器，它会在程序运行时自动检测内存使用情况，并在必要时回收不再使用的内存。</p><p>具体来说，Go语言的垃圾回收器会在程序运行时周期性地扫描堆内存中的对象，标记那些仍然被引用的对象，然后清理那些未被引用的对象。垃圾回收器的执行时间由当前程序的内存使用情况和硬件配置等因素决定，并不一定在函数结束后立即进行。</p><p>总之，Go语言的垃圾回收是一种自动的、并发的机制，它可以在程序运行时周期性地回收未被引用的内存。这种机制可以减少程序员的内存管理负担，提高程序的可靠性和性能。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭负载均衡节点部署</title>
      <link href="2023/04/15/%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8A%82%E7%82%B9%E5%88%86%E4%BA%AB%20/"/>
      <url>2023/04/15/%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8A%82%E7%82%B9%E5%88%86%E4%BA%AB%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实现原因"><a href="#实现原因" class="headerlink" title="实现原因"></a>实现原因</h2><p>身边的几个朋友有着查查谷歌学术，逛逛ig的需求，但是都对科学上网了解不多且对软件的认知还停在vpn阶段。</p><p>因此计划利用家用服务器进行节点的搭建，对外只暴露为vmess节点，内部为多个机场与服务器组成的负载均衡节点，在保障科学上网稳定的同时也可以降低朋友们的学习成本，采用流行的软件进行连接即可。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><h3 id="外部节点效果"><a href="#外部节点效果" class="headerlink" title="外部节点效果"></a>外部节点效果</h3><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/IMG_2162.jpg" style="zoom: 20%;" /><h3 id="x-ui面板管理节点界面"><a href="#x-ui面板管理节点界面" class="headerlink" title="x-ui面板管理节点界面"></a>x-ui面板管理节点界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled.png"></p><h3 id="v2rayA界面"><a href="#v2rayA界面" class="headerlink" title="v2rayA界面"></a>v2rayA界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%201.png"></p><h3 id="Uptime-Kuma节点监控界面"><a href="#Uptime-Kuma节点监控界面" class="headerlink" title="Uptime Kuma节点监控界面"></a>Uptime Kuma节点监控界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%202.png"></p><h3 id="Bark推送示例"><a href="#Bark推送示例" class="headerlink" title="Bark推送示例"></a>Bark推送示例</h3><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/WechatIMG321.jpeg" style="zoom:25%;" /><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>架构为下图所示</p><p>在路由器针对单用户节点进行端口转发，在xui中设置出站流量转发至v2raya。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%203.png"></p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>在nas上进行部署，配置如下图，配置不高但转发性能远大于家宽上传带宽，因此将就一下也可以。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%204.png" style="zoom:50%;" /><p>全部组件都在Docker上进行部署，便于后续的维护与升级。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%205.png"></p><h2 id="v2raya搭建"><a href="#v2raya搭建" class="headerlink" title="v2raya搭建"></a>v2raya搭建</h2><p><strong>项目地址</strong> <a href="https://github.com/v2rayA/v2rayA">https://github.com/v2rayA/v2rayA</a></p><p>本次项目的核心负载均衡部分由开源项目v2rayA进行控制，v2rayA 是一个支持全局透明代理的 V2Ray Linux 客户端，同时兼容SS、SSR、Trojan(trojan-go)、<a href="https://github.com/esrrhs/pingtunnel">PingTunnel</a>协议。</p><h3 id="采用Docker进行部署v2rayA"><a href="#采用Docker进行部署v2rayA" class="headerlink" title="采用Docker进行部署v2rayA"></a>采用Docker进行部署v2rayA</h3><p>采用Docker进行部署。在本项目中由于我们主要将v2rayA用以对外服务，因此在部署时不采用host模式，手动进行端口的开放。我们只需要开发管理后台的2017端口以及接收x-ui面板转发socks5流量的20172端口（可自行选择更换）。也可以开放更多端口供后续其他用途。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run v2raya</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d \</span></span><br><span class="line"><span class="bash">  -p 2017:2017 \</span></span><br><span class="line"><span class="bash">  -p 20170-20172:20170-20172 \</span></span><br><span class="line"><span class="bash">  --restart=always \</span></span><br><span class="line"><span class="bash">  --name v2raya \</span></span><br><span class="line"><span class="bash">  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \</span></span><br><span class="line"><span class="bash">  -v /etc/v2raya:/etc/v2raya \</span></span><br><span class="line"><span class="bash">  mzz2017/v2raya</span></span><br></pre></td></tr></table></figure><h3 id="管理后台配置"><a href="#管理后台配置" class="headerlink" title="管理后台配置"></a>管理后台配置</h3><p>因为v2rayA的用途为节点的负载均衡，因此在设置中可以将分流关闭，对外只作为一个节点，并且将透明代理与系统代理关闭，不进行过多的流量处理。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%206.png" style="zoom:50%;" /><p>在设置中开启端口分享，在地址与端口中将socks5端口绑定到Docker部署时开放的端口。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%207.png" style="zoom:50%;" /><h3 id="节点的添加与负载均衡"><a href="#节点的添加与负载均衡" class="headerlink" title="节点的添加与负载均衡"></a>节点的添加与负载均衡</h3><p>v2rayA可以添加服务器与订阅多种使用节点的方式，点击创建为新建单节点，点击导入则为订阅。</p><p>在添加完节点与订阅后，只需点击节点后的选择，即为加入负载均衡列表中。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%208.png"></p><p>负载均衡的原理为针对每个节点进行延迟的测试，自动连接延迟最低的节点进行使用。在PROXY中可以配置延迟测试的站点，测试间隔时间。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%209.png" style="zoom:33%;" /><p>配置完成后，点击左上角运行按钮，等待显示正在运行蓝色按钮即配置完成。也可在左边栏中查看当前节点连接情况与延迟。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2010.png" style="zoom: 33%;" /><h2 id="x-ui搭建"><a href="#x-ui搭建" class="headerlink" title="x-ui搭建"></a>x-ui搭建</h2><p>x-ui为一个支持多协议多用户的xray面板，在项目中只要用作对外开放节点的管理以及将出口流量转发至v2rayA。</p><h3 id="采用Docker进行部署x-ui"><a href="#采用Docker进行部署x-ui" class="headerlink" title="采用Docker进行部署x-ui"></a>采用Docker进行部署x-ui</h3><p>在部署x-ui时，采用host模式进行部署，避免后续节点新增带来的端口映射问题。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">mkdir x-ui &amp;&amp; cd x-ui</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd --network=host \</span></span><br><span class="line"><span class="bash">    -v <span class="variable">$PWD</span>/db/:/etc/x-ui/ \</span></span><br><span class="line"><span class="bash">    -v <span class="variable">$PWD</span>/cert/:/root/cert/ \</span></span><br><span class="line"><span class="bash">    --name x-ui --restart=unless-stopped \</span></span><br><span class="line"><span class="bash">    enwaiax/x-ui:latest</span></span><br></pre></td></tr></table></figure><p>部署完成后，访问ip:54321进行面板的访问，初始用户名与密码为admin。</p><p>登陆完成后，务必修改用户名与密码。</p><h3 id="x-ui流量转发配置"><a href="#x-ui流量转发配置" class="headerlink" title="x-ui流量转发配置"></a>x-ui流量转发配置</h3><p>此步将配置x-ui全部的出站流量转发至v2rayA中，达到采用负载均衡节点的目的。</p><p>在面板设置中的xray项目相关设置中进行设置。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;api&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;services&quot;</span>:[</span><br><span class="line">            <span class="string">&quot;HandlerService&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LoggerService&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StatsService&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;api&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;listen&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>:<span class="number">62789</span>,</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;dokodemo-door&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;api&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;outbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;socks&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;servers&quot;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;192.168.31.93&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;port&quot;</span>:<span class="number">20172</span>,</span><br><span class="line">                        <span class="attr">&quot;users&quot;</span>:[</span><br><span class="line">                            </span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;direct&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;blackhole&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;blocked&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;policy&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;system&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;statsInboundDownlink&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;statsInboundUplink&quot;</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;routing&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;rules&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;inboundTag&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;api&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;ip&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;blocked&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;domain&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geosite:cn&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;ip&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;blocked&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;protocol&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;bittorrent&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;stats&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心在outbounds中，进行协议的配置与目标服务器ip与端口的配置，此处填入服务器内网ip与socks5端口即可。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2011.png" style="zoom:50%;" /><h3 id="添加节点进行测试"><a href="#添加节点进行测试" class="headerlink" title="添加节点进行测试"></a>添加节点进行测试</h3><p>在入站列表进行对外节点的添加，选择vmess协议，端口随机生成，其余配置不变点击添加。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2012.png" style="zoom:50%;" /><p>可以利用软件扫描节点二维码进行连接测试。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2013.png" style="zoom:50%;" /><h2 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h2><p>在上述组件配置完成后，最后一步则是进行域名的配置，因为家宽的ip通常在72小时会进行重新拨号获取，因此采用DDNS用于动态域名解析，省去手动更换ip进行连接的使用成本。</p><p>本项目采用DDNS-Go进行动态解析。在Domains中填入需要动态解析的域名即可。IP变更通知配置可采用bark推送进行通知。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2014.png" style="zoom:50%;" /><h2 id="路由器进行端口转发并通过域名进行节点连接"><a href="#路由器进行端口转发并通过域名进行节点连接" class="headerlink" title="路由器进行端口转发并通过域名进行节点连接"></a>路由器进行端口转发并通过域名进行节点连接</h2><p>在路由器后台针对单节点进行端口转发即可用域名加端口的方式进行节点连接。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2015.png"></p><h2 id="节点监控"><a href="#节点监控" class="headerlink" title="节点监控"></a>节点监控</h2><p>采用uptimekuma进行节点的监控，采用bark进行推送。</p><p>在xui新建一个加密的sock5节点（注意⚠️：这种方式并不安全），记录信息后在uptimekuma中进行创建新监控服务。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2016.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2017.png" style="zoom:50%;" /><p>通过检测访问<a href="https://gstatic.com/generate_204">https://gstatic.com/generate_204</a>进行节点连通性的检测。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2018.png"></p><h3 id="节点通知"><a href="#节点通知" class="headerlink" title="节点通知"></a>节点通知</h3><p>采用bark进行节点状态的通知，关于推送配置可直接使用Uptime Kuma中的bark配置或BarkPush-Go进行多设备统一推送，此项目仍在完善中，请关注后续文章。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2019.png" style="zoom:33%;" /><h2 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h2><p>最后可以针对nas整体进行状态的监控，本项目采用哪吒探针进行监控。</p><p><a href="https://github.com/naiba/nezha">https://github.com/naiba/nezha</a></p><p><img src="https://github.com/naiba/nezha/raw/master/resource/static/brand.svg" alt="https://github.com/naiba/nezha/raw/master/resource/static/brand.svg"></p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>生命不息，折腾不止。</p><p>如有任何疑问与建议务必留言，每条留言都会用心回复。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于音乐的分享</title>
      <link href="2021/05/20/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
      <url>2021/05/20/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> Hello大家好!!!</p><p>这是我第一次尝试写下关于音乐分享的文章，很不成熟也很可能味如嚼蜡，谢谢您的谅解！！</p><div class="tag-plugin note" color="blue"><div class="body"><p>推荐歌单仅仅是个人喜好哦！</p></div></div><div class="tag-plugin note" color="dark"><div class="title"><strong>小提示</strong></div><div class="body"><p>全部歌曲都可以直接点击播放</p></div></div><h2 id="关于我喜欢的音乐风格"><a href="#关于我喜欢的音乐风格" class="headerlink" title="关于我喜欢的音乐风格"></a>关于我喜欢的音乐风格</h2><h3 id="小时候"><a href="#小时候" class="headerlink" title="小时候"></a>小时候</h3><p>对于听歌这件事主要还是小时侯家庭的影响，在我还在母亲肚子里时我父母听到别人聊天时说到听音乐也是一种“胎教”，便两个人去了我们这个小城市的音响店买了一对立式的音响和一个功放机，开始在家里播放音乐，根据后来他们所说，最早期播放的大多是古典音乐，像莫扎特、巴赫的钢琴曲和交响曲，后来觉得有些乏味，便开始播放邓丽君，陈百强，张学友的歌曲。</p>        <div id="aplayer-bRBbwBhu" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-bRBbwBhu"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "月亮代表我的心",              author: "邓丽君",              url: "https://music.163.com/song/media/outer/url?id=228755.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-aReCKFbJ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aReCKFbJ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "偏偏喜欢你",              author: "陈百强",              url: "https://music.163.com/song/media/outer/url?id=27874938.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-abVvHonX" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-abVvHonX"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "吻别",              author: "张学友",              url: "https://music.163.com/song/media/outer/url?id=190449.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>如今在我家书柜还存放着当年的CD，但也有一部分在搬家的过程中丢失了。我父母在我小时候的印象里总是会抱着一些CD回来，放进CD机等待播放，印象最深刻的是两件事，第一个便是在CD机放进CD机后并不能马上播放歌曲，因为功放机还需要一点点的“热身”，叫做热机，功放在第一次开机时会有很清脆的滴答声，而真正热身好则是在大约2分钟后有一声非常清脆的滴答声，这个时候便可以按下CD机上的播放键了。</p>        <div id="aplayer-jAAStwlt" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-jAAStwlt"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Blue Bossa",              author: "Eddie Higgins",              url: "https://music.163.com/song/media/outer/url?id=1307049.mp3",              pic: "https://i.loli.net/2021/04/08/FufDKxeGiPJdXNU.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>第二件印象深刻的事情便是小学每次放学坐公交车回家，常常会在走进屋子前听到里面传来的乐器声或者唱歌的人声，闷闷的，而打开门走进去的一瞬间耳朵就会被音乐包裹，如同爱丽丝掉进树洞一般，而如果开门前没有听到，估计是我做错了什么，需要提前做好挨揍的准备。我的许多音乐的来源在智能手机出现之前都是来自于家里CD所播放的音乐，还有一部分来自于《猫和老鼠》中的交响乐（哈）。</p>        <div id="aplayer-avruVElu" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-avruVElu"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Tom and Jerry",              author: "Bradley",              url: "https://music.163.com/song/media/outer/url?id=25962464.mp3",              pic: "https://i.loli.net/2021/04/08/UwXvYIDgdoznLMi.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="前智能手机"><a href="#前智能手机" class="headerlink" title="前智能手机"></a>前智能手机</h3><p>在智能手机之前其实还有一个小小的时代，我叫做前智能时代，印象最深的便是诺基亚的5230型号，有着如今智能手机基本的功能，但是操作起来并不是那么顺畅，屏幕是电容屏，需要用手指戳下去才能响应，也有了那个时候的特色就是触控笔。<br><img src="https://s2.loli.net/2023/05/17/JmcKdktWyu6vSMe.png" style="zoom:50%;" /></p><p>但当时可以将音乐随身放在一个手机里已经让我非常震撼了，当时传输的方式主要是用线连接电脑后传输，或者用蓝牙传输，蓝牙在那个时候可谓称得上是真正的黑科技，在电脑上选择文件，选择蓝牙传输到手机，那时候音乐的文件，大多数是acc或者mp3的文件，256k的音质，蓝牙的传输速率那时大约200k左右，传一张专辑的歌曲还是需要一点点耐心的。</p><p><img src="https://s2.loli.net/2023/05/17/sLEwe6X2G8Qcquh.png" alt="XP的蓝牙"><br>诺基亚5230陪伴了我小学期间每天放学从学校到家里的一小段路，那时候也是网络歌手充斥网络的时代，和现在不同，那时候的网络歌手并没有一个完整的团队，很多时候只有自己录制自己唱歌就发到网上去了，虽然质量比不上如今的，但是很多经典的歌曲还是留了下来。尤其是经典的网恋歌曲….</p>        <div id="aplayer-lLPvEdAW" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-lLPvEdAW"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "爱到花开",              author: "戊道子",              url: "https://music.163.com/song/media/outer/url?id=5244681.mp3",              pic: "https://i.loli.net/2021/04/08/jMLB9rwEWPbCF48.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>我印象里在小学三四年级天天回家听的就是这首可谓是网恋元祖歌曲哈哈哈哈，以至于在很长一段时间内听到这首歌的前奏都有点起鸡皮疙瘩的感觉…..</p><h3 id="智能手机时代"><a href="#智能手机时代" class="headerlink" title="智能手机时代"></a>智能手机时代</h3><p>在初一的时候我真正的迎来了我的第一台智能手机，那便是大名鼎鼎(以前)的台湾手机厂商HTC(火腿肠)的Incredible S，出厂预装的是安卓2.2.</p><p><img src="https://s2.loli.net/2023/05/17/tZK3hH2Cepar7AT.png" alt="htc G11"></p><p>第一个下载的软件除了QQ便是QQ音乐了，还记得第一次打开QQ音乐，主页上扑面而来的帅气男人，那肯定就是周董了</p>        <div id="aplayer-maOlKfIM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-maOlKfIM"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "说好的幸福呢",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-说好的幸福呢.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-uAEtEVpm" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-uAEtEVpm"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "花海",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-花海.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-vTrgYBWu" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-vTrgYBWu"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "给我一首歌的时间",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-给我一首歌的时间.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>也是在听过周董的歌之后，我对于自己所喜欢的音乐才有了一个初步的理解，那时的我喜欢干净的音乐，在歌曲里各种乐器的位置摆放合理，不会互相打架，用尽可能少的乐器演绎出丰富的听觉效果，而在那个时候，听得最多的除了周董，便是李荣浩了。</p><p>第一次认识李荣浩是在电台里，在FM102.2深夜12点开始的节目叫做《千里共良宵》，某一次广告前的过场音乐直接抓住了我的耳朵，13年的听歌识曲并不完善，我只能尽可能的记住歌词，然后再去搜索，那时候我印象最深的一句便是“越勇敢越孤单”，这一句便让我认识了李荣浩。</p>        <div id="aplayer-CzcFgcxq" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-CzcFgcxq"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "都一样",              author: "李荣浩",              url: "https://music.163.com/song/media/outer/url?id=27731172.mp3",              pic: "https://i.loli.net/2021/04/08/X6V1nOjuELw3pSF.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>那段时间向身边的同学推荐李荣浩，他们的表情就像李荣浩的眼睛一样，眯成了一条缝，那个时候没有抖音，大家听歌还是有耐心听完一整首的，大家所喜欢的风格也不同，但李荣浩在那个时候可谓时流行音乐的一个异类，前有R&amp;B教父陶喆、周董还有陈奕迅三座大山，那时候很多人说李荣浩是周杰伦加陈奕迅，也有人说李荣浩的音乐千篇一律，但是李荣浩确实闯出了一条路来。</p>        <div id="aplayer-bLukYoVz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-bLukYoVz"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "不搭",              author: "李荣浩",              url: "https://music.163.com/song/media/outer/url?id=29764563.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/14ce36d3d539b6009f46967be350352ac75cb776.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>李荣浩最厉害的对于和声的运用，这与他多年的幕后经验是紧密相关的，许多歌曲旋律并不复杂但和声的运用使得歌曲增彩不少。</p><h3 id="吉他"><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h3><p>在初三中考完的假期内我拥有了我的第一把吉他，也就是这个时候我开始真正的不仅仅去听音乐，更想要去触碰音乐。</p>        <div id="aplayer-fRIQWUMX" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-fRIQWUMX"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "拥抱",              author: "五月天",              url: "https://music.163.com/song/media/outer/url?id=386542.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/a8014c086e061d95bcc46a0c79f40ad162d9ca00.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>五月天的拥抱是我学习的第一首歌曲，当时是一位朋友的朋友在唱吧上唱了这一首并且分享给了我，当时第一次听到我便下定决心要学会这一首拥抱，第二天打开吉他教材，噢～好家伙，第一页就是这首歌的谱子，也就是在这样的机缘巧合下我慢慢开始学习一首又一首的歌，我也开始接触指弹。</p>        <div id="aplayer-hokVdKzq" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-hokVdKzq"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "LOVIN' YOU",              author: "押尾コータロー",              url: "https://music.163.com/song/media/outer/url?id=22822506.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s4716396.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>押尾桑的许多歌曲都可谓是吉他指弹入门的必练曲，到并不是因为多简单，而是因为实在是太好听了，虽然许多人都认为押尾的歌曲的难度稍低，但是如果想要完整流畅地弹奏下来还是需要多年的苦练的。而上面这一首LOVIN’ YOU则是我第一首学会弹奏的指弹曲，直到现在我也不敢说我已经可以完全无压力地弹奏下来了，每一次弹奏都为这精致的编排所震撼。</p><p>在押尾桑后我开始了解更多来自世界各地的指弹大师，首先当然是来自澳洲的<em>Tommy Emmanuel</em>，还记得第一次听到close to you的弹奏时，我根本不相信这是一把吉他所能创造的效果，各种技巧和和弦都是为了旋律服务的感觉实在是太棒了。也让我对吉他的理解更加的深刻。</p>        <div id="aplayer-fkCjhISf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-fkCjhISf"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Since We Met",              author: "Tommy Emmanuel",              url: "https://music.163.com/song/media/outer/url?id=2002030.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s3681710.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><img src="https://s2.loli.net/2023/05/17/46ewkH5IDc9UsBX.png" alt="Tommy Emmanuel" style="zoom:50%;" /><img src="https://s2.loli.net/2023/05/17/YDlqBuKeSksMIOP.png" alt="Tommy Emmanuel" style="zoom:50%;" /><p>当然除了Tommy Emmanuel我还尤其喜欢来自日本的伍伍慧，他极具天赋的编曲以及各种古典技巧的融合使得他的曲子听起来尤其的活泼以及有生气，他所改编的爵士名曲<em>Moon River</em>不仅仅尤其地温暖，而且其中的改编更让人如痴如醉。</p>        <div id="aplayer-aJAZnYBI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aJAZnYBI"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Moon River",              author: "伍伍慧",              url: "https://music.163.com/song/media/outer/url?id=26450089.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s27996751.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="方大同"><a href="#方大同" class="headerlink" title="方大同"></a>方大同</h3><p>终于在高中，我开始认识方大同。</p>        <div id="aplayer-cjWJxkEz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-cjWJxkEz"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "红豆",              author: "方大同",              url: "https://m10.music.126.net/20210517202811/6dd994d699da3e242260e335e3880d91/ymusic/ff10/edf4/18cd/a81822d7d51e1de5206569eb09576e58.mp3",              pic: "https://s2.loli.net/2023/05/17/o4O1ueAUaZcvn56.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>“有时候　有时候</p><p>我会相信一切有尽头</p><p>相聚离开都有时候</p><p>没有什么会永垂不朽</p><p>可是我　有时候</p><p>宁愿选择留恋不放手</p><p>等到风景都看透</p><p>也许你会陪我看细水长流</p><p>”</p><p>那天晚上是我第一次认真听方大同的歌，回到宿舍我马上去向朋友借了一把吉他，开始弹奏方大同的红豆。也是第一次我从心底感觉原来弹唱也可以这么酷，吉他的编排可以如此抓耳朵。我一直弹一直弹，我舍友久违地说了一句：真好听啊。在那个时候我知道方大同这个男人以后应该会陪我很久很久了。</p><p>第二天在秋游的路上我也一直在耳机里不断地循环，回来的路上也是。</p><p>第二天开始我开始听方大同的其他歌曲，刚开始这并不是一个很顺畅的过程，以往的流行歌曲经验对于大同的歌曲来说并不管用，无论是旋律，和声，和弦，对于我来说都完全是崭新的，我还记得第一次听《暖》，并不觉得这首歌是我的菜，直到两天后第二次听，才发现，噢！太棒了！</p>        <div id="aplayer-XHexVqMw" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-XHexVqMw"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "暖",              author: "方大同",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/方大同-暖.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/9825bc315c6034a82b7f9283c313495409237616.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>大同的许多歌曲都是如此，有着难以言喻的前瞻性，让你在每一次重播时都觉得，这首歌太潮了！</p><p>也是因为大同，我对于音乐的理解更加深入，大同的许多音乐灵感其实是来自于他小时候所听的黑人音乐，爵士乐，放克，还有各种灵魂乐，布鲁斯以及R&amp;B。也使得他的歌曲不仅仅多元，而且极具创造性，各种即兴信手拈来。</p><p>也是在那个时候开始我开始收集方大同的专辑，像让大同的声音在音响上呈现，我第一张真正意义上的方大同发行专辑便是《橙月》。</p><img src="https://s2.loli.net/2023/05/17/pvnMTQmGIF4wV36.png" alt="Orange Moon" style="zoom: 50%;" />        <div id="aplayer-REpGwLsH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-REpGwLsH"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "小小虫",              author: "方大同",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/方大同-小小虫.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/9d82d158ccbf6c81d15b405dbc3eb13533fa4012.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>随着听大同的歌曲越来越来，我发现我的耳朵也变刁了，尤其是听到流行歌曲的时候，不自主地会与大同的歌曲进行比较，如果这首歌是完完全全在套路之内的，那我大可能就把这首歌给pass掉，但如果有意料之外的旋律或者和弦就会马上吸引到我。</p><img src="https://s2.loli.net/2023/05/17/D7XYSgJZR5OpByx.png" alt="the show"  /><h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>疫情期间我开始花大量的时间去听歌，一天的时间都泡在音乐App中，巧合的是，在某一个晚上我打开YouTube，首页给我推荐了一张合辑，名字叫做睡前R&amp;B，封面是昏暗的房间，地上摆放着各种唱片，点击，便让我发现了这一位宝藏歌手。</p>        <div id="aplayer-vZdEbVQl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-vZdEbVQl"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "easy",              author: "Mac Ayres",              url: "https://music.163.com/song/media/outer/url?id=519943092.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s29520620.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>许多人评价Mac Ayres是如今被远远低估的R&amp;B歌手，我也很赞同，但他才23岁，未来可期。</p><p>这首歌还在被我用在了歌手大赛的复赛中（由于英语发音根本不标准被评委吐槽，但如果叫我评选2020年我的年度单曲，我会毫不犹豫地选择这首歌）</p><p>在疫情中我还认识了另外一位“老师”，那便是来自台湾的“李友廷老师”了</p><p>李友廷以极强的吉他演奏能力和极具个人风格的作品在台湾的综艺节目声林之王第一季夺得冠军，并在2020年底终于推出了首张个人专辑《如果你也爱我就好了》，听就好了。</p>        <div id="aplayer-RijXkFgp" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RijXkFgp"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "直到我遇见了你",              author: "李友廷",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/李友廷-直到我遇见了你.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s33763909.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="本月推荐歌单"><a href="#本月推荐歌单" class="headerlink" title="本月推荐歌单"></a>本月推荐歌单</h2><img src="https://s2.loli.net/2023/05/17/xB3QnjAqSsW15Do.png"  /><p>@</p><p>@@</p><p>@@@</p><p>@@@@</p><p>@@@@@</p><p>@@@@@@</p><p>@@@@@@@</p><p>@@@@@@@@</p><p>@@@@@@@@@</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>谢谢你的阅读</p><p>致敬那些漫漫长夜</p><p>谢谢ni。</p><p>2021.4.11</p>]]></content>
      
      
      <categories>
          
          <category> 音乐分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日校园自动填写表单信息脚本</title>
      <link href="2021/05/18/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%BE%85%E5%AF%BC%E5%91%98%E4%BF%A1%E6%81%AF%E8%84%9A%E6%9C%AC/"/>
      <url>2021/05/18/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%BE%85%E5%AF%BC%E5%91%98%E4%BF%A1%E6%81%AF%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢<a href="https://gitee.com/Finch1"><strong>Finch</strong></a>、<a href="https://gitee.com/lemofire"><strong>柠火</strong></a>提供的方法与思路。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在windows系统下，下载压缩包，在文件夹内部按住shift并单击右键，选择<img src="https://s2.loli.net/2023/05/17/mPrRlTjMZXz9nkc.png" alt="image-20210520110701674" style="zoom:50%;" /></p><p>在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb</span><br></pre></td></tr></table></figure><p>输入后回车即可。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>在mac系统下首先打开终端，使用cd定位到DailyAUTO文件夹。</p><p>在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb</span><br></pre></td></tr></table></figure><p>输入后回车即可。</p><h3 id="第一次使用"><a href="#第一次使用" class="headerlink" title="第一次使用"></a>第一次使用</h3><p>在第一次使用的时候会在屏幕上打印提醒</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请手动填写&#x2F;Users&#x2F;***&#x2F;Desktop&#x2F;DailyAUTO&#x2F;formdb&#x2F;910e5efaed9eaea5f146faa60c3ab47a.json，之后重新运行脚本</span><br></pre></td></tr></table></figure><p>在formdb文件夹中找到相对应的json文件，使用文本编辑器打开（推荐vscode），如果打开后发现数据都集中在一行，请单击右键单击</p><img src="https://s2.loli.net/2023/05/17/yItjk3gXmQUseDP.png" alt="image-20210520110701674" style="zoom:67%;" /><p>填写规范请查看1129.json文件。</p><p>主要修改的为select项，如果对应的为选中，则将其修改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;isSelected&quot;: 1</span><br></pre></td></tr></table></figure><p>反之则为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;isSelected&quot;: null</span><br></pre></td></tr></table></figure><p>注意是单选还是多选题，切勿在单选题中修改多项select值为1。</p><h3 id="正式运行"><a href="#正式运行" class="headerlink" title="正式运行"></a>正式运行</h3><p>再次在命令行中输入上述命令</p><p>等待程序运行，在正常情况下会首先打印学校名字及登录地址，并打印所需要填写的表单的基本信息，下一行会打印表单详细信息（你已经填写好的）。</p><p>​                                                                                            <strong>数据已经脱敏</strong></p><img src="https://s2.loli.net/2023/05/17/MzwHlJ1AKdGnU67.png" alt="image-20210520110701674" style="zoom:50%;" /><p>如果是今天的第一次填写，将会返还”SUCCESS”</p><p>如果已经填写，将会返还”该收集已填写无需再次填写”</p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>此程序仅供学习，请勿用于违法途径。</p><h2 id="文件下载地址"><a href="#文件下载地址" class="headerlink" title="文件下载地址"></a>文件下载地址</h2><p>由于法律与政策，下载地址不予显示。</p>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python，网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在搭载M1芯片的mac上使用face_recognition库实现实时人脸识别小demo</title>
      <link href="2021/05/16/M1%20%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>2021/05/16/M1%20%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        在搭载M1芯片的mac上顺利进行开发是一件不仅随缘而且需要人品的事情，不仅仅因为M1芯片的ARM架构所带来的编译方式的不同，bugsur新的文件路径系统以及时不时的抽风也使得顺利开发的路上艰难险阻。今天就来看看GitHub上大名鼎鼎的开源人脸库face_recognition如何比较顺利地在M1上跑起来且实现简单的实时人脸识别的功能。</p><div class="tag-plugin note" color="red"><div class="body"><p>由于不可描述的原因，网络环境所造成的安装失败不在本文讨论范围中。</p></div></div><h1 id="第一部分-关于环境的那点事"><a href="#第一部分-关于环境的那点事" class="headerlink" title="第一部分  关于环境的那点事"></a>第一部分  关于环境的那点事</h1><h2 id="网络环境搭建"><a href="#网络环境搭建" class="headerlink" title="网络环境搭建"></a>网络环境搭建</h2><div class="tag-plugin note" color="green"><div class="body"><p>建议进行设置省去不必要的麻烦</p></div></div><p>大部分的环境搭建与库安装需要使用终端进行，由于终端默认并不走代理的网络，</p><p>为了此后下载的顺利，先需要设置终端也可以使用代理。</p><p>首先，在当前用户根目录新建一个文件名为 .bash_profile的空白文本「. 开头文件为隐藏文件」，然后输入以下代码：</p><figure class="highlight md"><figcaption><span>.bash_profile</span></figcaption><table><tr><td class="code"><pre><span class="line">function proxy<span class="emphasis">_off()&#123;</span></span><br><span class="line"><span class="emphasis">        unset http_</span>proxy</span><br><span class="line"><span class="code">        unset https_proxy</span></span><br><span class="line"><span class="code">        unset ftp_proxy</span></span><br><span class="line"><span class="code">        unset rsync_proxy</span></span><br><span class="line"><span class="code">        echo -e &quot;已关闭代理&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="code">function proxy_on() &#123;</span></span><br><span class="line"><span class="code">        export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line"><span class="code">        export http_proxy=&quot;https://127.0.0.1:1087&quot;</span></span><br><span class="line"><span class="code">        export https_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export ftp_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export rsync_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export HTTP_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export HTTPS_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export FTP_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export RSYNC_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        echo -e &quot;已开启代理&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>在<strong>export no_proxy</strong>与<strong>export http_proxy</strong>填入对应的本地代理服务器地址以及端口</p><p>可以在你的代理软件中查看</p><p><img src="https://s2.loli.net/2023/05/17/DQGUuVM5hx6asg2.png" alt="截屏2021-03-31 上午12.42.42.png"></p><p>将文件配置好并放在用户根目录后</p><h3 id="当让终端走代理的时候，输入："><a href="#当让终端走代理的时候，输入：" class="headerlink" title="当让终端走代理的时候，输入："></a>当让终端走代理的时候，输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source  ~&#x2F;.bash_profile</span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure><h3 id="想关闭代理的时候，输入："><a href="#想关闭代理的时候，输入：" class="headerlink" title="想关闭代理的时候，输入："></a>想关闭代理的时候，输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_off</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="orange"><div class="body"><p>此为一次性设置，关闭终端后失效</p></div></div><h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><h3 id="安装python最新版本"><a href="#安装python最新版本" class="headerlink" title="安装python最新版本"></a>安装python最新版本</h3><p>从python官网下载最新版本python 记得选中 <a href="https://www.python.org/ftp/python/3.9.2/python-3.9.2-macos11.pkg">macOS 64-bit universal2 installer</a></p><div class="tag-plugin note" color="black"><div class="title"><strong>下载地址</strong></div><div class="body"><p><a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a></p></div></div><p>安装完成后在终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open ~&#x2F;.bash_profile </span><br></pre></td></tr></table></figure><p>在文件中加上一行环境变量配置后保存退出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:$PATH   </span><br></pre></td></tr></table></figure><p>重新打开终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile </span><br><span class="line">python3 --version     -------注意是python3</span><br></pre></td></tr></table></figure><p>顺利的话你会在终端中看到python的版本号信息，python安装到此结束</p><h3 id="各种依赖包安装"><a href="#各种依赖包安装" class="headerlink" title="各种依赖包安装"></a>各种依赖包安装</h3><div class="tag-plugin note"><div class="title"><strong>radiation</strong></div><div class="body"><p>yellow, 头铁的可以试试直接安装 设置好终端网络代理后 在终端中输入 pip3 install face_recognition</p></div></div><p>在安装face_recognition之前我们需要安装</p><div class="tag-plugin checkbox" ><input type="checkbox"/><span>homebrew</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>miniforge</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>numpy</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>openblas</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>dlib</span></div><h3 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h3><div class="tag-plugin note" color="red"><div class="body"><p>唯一的重点是配置环境变量</p></div></div><p>下载安装过程略</p><p>安装完成后根据提示在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open ~&#x2F; .zprofile</span><br></pre></td></tr></table></figure><p>在文件中加入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval &quot;$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)&quot;</span><br></pre></td></tr></table></figure><p>保存后重启homebrew，在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew</span><br></pre></td></tr></table></figure><p>如果出现各种指令提示，证明安装成功</p><h3 id="安装miniforge"><a href="#安装miniforge" class="headerlink" title="安装miniforge"></a>安装miniforge</h3><div class="tag-plugin note" color="purple"><div class="title"><strong>注意</strong></div><div class="body"><p>鉴于M1版本的开发工具适配进程目前并不同步，所以这里使用miniforge来进行库管理</p></div></div><p>在网站中选择Apple Silicon版本下载，下载后直接运行即可</p><img src="https://s2.loli.net/2023/05/17/JFu2coavtEZB8LC.png" width="50%"><p>接下来我们需要在终端中激活</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n myenv python&#x3D;3.9 &#x2F;&#x2F;创建名为myenv，python版本为3.9的环境</span><br><span class="line">conda activate myenv &#x2F;&#x2F;激活环境</span><br></pre></td></tr></table></figure><h3 id="安装numpy"><a href="#安装numpy" class="headerlink" title="安装numpy"></a>安装numpy</h3><p>激活conda且配置好网络代理后可以直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install numpy&#x3D;1.9.14</span><br></pre></td></tr></table></figure><p>等待下载安装，安装完成后检测是否安装成功，在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><p>没报错的话就安装成功了</p><h3 id="安装openblas"><a href="#安装openblas" class="headerlink" title="安装openblas"></a>安装openblas</h3><p>激活conda且配置好网络代理后可以直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install openblas</span><br></pre></td></tr></table></figure><p>等待下载安装，安装完成后检测是否安装成功，在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> openblas</span><br></pre></td></tr></table></figure><p>没报错安装成功</p><h3 id="需要编译的库"><a href="#需要编译的库" class="headerlink" title="需要编译的库"></a>需要编译的库</h3><div class="tag-plugin checkbox" ><input type="checkbox"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>dlib</span></div><div class="tag-plugin note" color="yellow"><div class="body"><p>这三个包如果安装失败，可以多试几次，cmake有概率编译失败</p></div></div><h3 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h3><p>点击链接下载opencv库，仅适用于M1芯片</p><p><a href="https://github.com/wizyoung/AppleSiliconSelfBuilds/blob/main/builds/opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl">opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl</a></p><p>在终端中激活环境</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate myenv &#x2F;&#x2F;激活环境</span><br></pre></td></tr></table></figure><p>定位到下载目录并安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 目录</span><br><span class="line">pip3 install opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl</span><br></pre></td></tr></table></figure><p>等待安装即可</p><h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><p>终端配置好网络代理后输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install cmake &#x2F;&#x2F;安装cmake</span><br></pre></td></tr></table></figure><h3 id="安装Dlib"><a href="#安装Dlib" class="headerlink" title="安装Dlib"></a>安装Dlib</h3><p>激活conda且配置好网络代理后直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install dlib </span><br></pre></td></tr></table></figure><p>安装后在终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;import dlib</span><br></pre></td></tr></table></figure><p>如果未报错恭喜你安装成功，我们就差最后一步了</p><p>对着检查一下吧</p><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>homebrew</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>miniforge</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>numpy</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>openblas</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>dlib</span></div><h2 id="安装face-recognition"><a href="#安装face-recognition" class="headerlink" title="安装face_recognition"></a>安装face_recognition</h2><p>激活conda且配置好网络代理后直接在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install face_recognition</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="light"><div class="body"><p>如果出现了任何错误，欢迎在评论区告诉我</p></div></div><div class="tag-plugin note" color="green"><div class="title"><strong>温馨提示</strong></div><div class="body"><p>此过程需要网络以及人品双buff叠加，请坐和放宽……</p></div></div><p>安装完成后在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> face_recognition</span><br></pre></td></tr></table></figure><p>如果没有报错证明万里长征我们已经走了一半了。</p><p>也可以使用 pip3 list 命令来查看所有已经安装的库 如图</p><p><img src="https://s2.loli.net/2023/05/17/uCx1dKmAkaMZ46l.png" alt="截屏2021-03-31 上午1.05.28.png"></p><p>到此安装告一段落</p><h1 id="第二部分-开始造轮子吧"><a href="#第二部分-开始造轮子吧" class="headerlink" title="第二部分  开始造轮子吧"></a>第二部分  开始造轮子吧</h1><p>由于安装这些依赖和库可能已经损耗你的大部分精力了，</p><p>所以接下来我们就快速地来看看怎么把这个简单的实时人脸识别跑起来吧。</p><div class="tag-plugin note" color="red"><div class="body"><p>摄像头是必须的，所以请不要关上盖子运行接下来的步骤</p></div></div><h3 id="下载py文件"><a href="#下载py文件" class="headerlink" title="下载py文件"></a>下载py文件</h3><p>从GitHub上下载</p><p><a href="https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py">facerec_from_webcam_faster.py</a></p><h3 id="使用编辑器编辑"><a href="#使用编辑器编辑" class="headerlink" title="使用编辑器编辑"></a>使用编辑器编辑</h3><p>用你喜欢的编辑器打开，这里使用vscode示范，下面代码都是从源文件中截出，对应修改即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load a sample picture and learn how to recognize it.</span></span><br><span class="line"></span><br><span class="line">图片人名1_image = face_recognition.load_image_file(<span class="string">&quot;把这里改成你要识别的图片的路径&quot;</span>)   </span><br><span class="line"></span><br><span class="line">图片人名1_face_encoding = face_recognition.face_encodings(图片人名1_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a second sample picture and learn how to recognize it.</span></span><br><span class="line"></span><br><span class="line">图片人名2_image = face_recognition.load_image_file(<span class="string">&quot;把这里改成你要识别的图片2的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片人名2_face_encoding = face_recognition.face_encodings(图片人名1_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create arrays of known face encodings and their names</span></span><br><span class="line">known_face_encodings = [</span><br><span class="line">    图片人名1_face_encoding,</span><br><span class="line">    图片人名2_face_encoding</span><br><span class="line">]</span><br><span class="line">known_face_names = [</span><br><span class="line">    <span class="string">&quot;图片1所对应的全名&quot;</span>,</span><br><span class="line">    <span class="string">&quot;图片2所对应的全名&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>如图，图片1为Obama，图片2为biden</p><img src="https://s2.loli.net/2023/05/17/8GY3PlShE6OQdJ9.png" alt="WX20210328-193809@2x.png"  /><h3 id="运行一下吧！"><a href="#运行一下吧！" class="headerlink" title="运行一下吧！"></a>运行一下吧！</h3><p>打开终端，输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 &lt;将文件拖到这里或者粘贴文件的路径&gt;</span><br></pre></td></tr></table></figure><p>就像这样</p><p><img src="https://s2.loli.net/2023/05/17/jW6kPmswvN4nrXK.png" alt="WX20210328-195510@2x.png"> </p><p>按下回车等待奇迹的发生</p><p>不出意外的话，掏出你的小手机拿出一张照片或者把你的脸对准摄像头，就可以看到</p><img src="https://s2.loli.net/2023/05/17/NHzceP3gfYtynl5.png" alt="521616932197_.pic_hd.jpg" style="zoom:60%;" /><h2 id="大功告成啦！"><a href="#大功告成啦！" class="headerlink" title="大功告成啦！"></a>大功告成啦！</h2><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>总体来说跑起这个小项目还是基本没有难度的，最主要的是有稳定的网络以及足够的耐心</p><p>face_recognition这个库具有很多方向的应用，今天只是简单地入门一下，还有很多玩法可以发掘哦！</p><div class="tag-plugin note" color="dark"><div class="title"><strong>致谢</strong></div><div class="body"><p>谢谢阅读，欢迎你的留言！</p></div></div>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> python </tag>
            
            <tag> M1 </tag>
            
            <tag> face_recognition </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在openwrt上使用DDNSTO插件进行远程管理</title>
      <link href="2021/04/05/DDNSTO/"/>
      <url>2021/04/05/DDNSTO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin note" color="orange"><div class="body"><p>DDNSTO有付费与免费两种模式选择，免费套餐需要每隔7天手动进行一次续期</p></div></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>openwrt是目前众多路由器刷机的选择，界面美观而且插件丰富，但是有一定的上手成本，远程管理路由器在openwrt上的配置并不简单，ddnsto的出现大大降低了新手的使用成本，使用体验也十分友好。</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><div class="tag-plugin note" color="green"><div class="title"><strong>小提示</strong></div><div class="body"><p>本插件理论上适用于任何基于openwrt的原版或者第三方路由器</p></div></div><div class="tag-plugin note" color="green"><div class="body"><p>本文使用LEDE固件进行演示</p></div></div><h3 id="安装DDNSTO插件"><a href="#安装DDNSTO插件" class="headerlink" title="安装DDNSTO插件"></a>安装DDNSTO插件</h3><p>从网站中下载对应架构版本的ipk文件</p><div class="tag-plugin note" color="dark"><div class="title"><strong>下载地址</strong></div><div class="body"><p><a href="https://firmware.koolshare.cn/binary/ddnsto/openwrt/">https://firmware.koolshare.cn/binary/ddnsto/openwrt/</a></p></div></div><p>在openwrt路由器后台管理界面中安装插件</p><p>使用文件传输功能将.ipk文件上传至/tmp/upload/</p><p><img src="https://s2.loli.net/2023/05/17/VJBywGW35vdjlsU.png" alt="截屏2021-04-05 下午10.13.25.png"></p><p>上传成功后跳转至软件包页面</p><p><img src="https://s2.loli.net/2023/05/17/C58FTYhkneIKyUv.png" alt="截屏2021-04-05 下午10.15.02.png"></p><p>在下载并安装软件包输入框中输入/tmp/upload/对应的名字.ipk等待安装完成</p><p>在服务中看到DDNS.to内网穿透一栏就证明安装成功了</p><h3 id="配置DDNSTO"><a href="#配置DDNSTO" class="headerlink" title="配置DDNSTO"></a>配置DDNSTO</h3><p>打开<a href="https://www.ddnsto.com点击右上角登录后台并使用微信注册/">https://www.ddnsto.com点击右上角登录后台并使用微信注册</a></p><p>复制页面上的令牌<img src="https://s2.loli.net/2023/05/17/1E967LeiVQHPIRw.png" alt="image-20210405222125549.png"></p><p>回到路由器页面打开DDNS.to插件页面在令牌框内将复制的令牌粘贴并勾选启用，点击页面的保存&amp;应用</p><p><img src="https://s2.loli.net/2023/05/17/opkN9r28lDgy7nm.png" alt="截屏2021-04-05 下午10.23.04.png"></p><p>稍等片刻回到DDNSTO后台，你的路由器应该就会出现在页面中。</p><p>点击添加域名映射，输入你喜欢的名字并将路由器的内网地址填入并保存。</p><h2 id="使用DDNSTO"><a href="#使用DDNSTO" class="headerlink" title="使用DDNSTO"></a>使用DDNSTO</h2><p>一切配置完成后应该如图一样</p><p><img src="https://s2.loli.net/2023/05/17/3TXy4CAibBw8doF.png" alt="WX20210405-222616@2x.png"></p><p>点击给出的域名，如果可以正确跳转至路由器管理页面，恭喜你已经可以正常使用啰！SEE YOU NEXT TIME！</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用python写一个自动获取局域网ip地址并开启SS服务器的小工具</title>
      <link href="2021/03/30/%E6%A0%A1%E5%9B%AD%E7%BD%91SS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/03/30/%E6%A0%A1%E5%9B%AD%E7%BD%91SS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个学年学校把宽带运营商从之前的联通大哥哥换成了如今的电信小弟弟，使用体验可谓一落千丈，最主要的原因是电信不再像联通提供拨号上网的账号和密码，改成了强制使用天翼校园的程序来进行认证上网，而且限制只能一台设备在线，这直接搞垮了宿舍内的一堆需要联网的设备，首先想到的是通过电脑先连接在共享给路由器，感谢这位兄弟提供的方法@<a href="https://blog.csdn.net/cbcrzcbc/article/details/108612445?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161707454916780271558206%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161707454916780271558206&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-108612445.pc_search_result_no_baidu_js&utm_term=%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD">task138</a>，但是转念一想，既然学校内覆盖了校园网，那是否可以使用电脑搭建服务器从而达到在校园网范围内手机或者iPad都可以上网呢?这就是今天讨论的方法。</p><div class="tag-plugin note" color="red"><div class="body"><p>此方法仅限交流，请勿在保密场所使用</p></div></div><div class="tag-plugin note" color="green"><div class="body"><p>目前仅适用于Windows</p></div></div><div class="tag-plugin note" color="dark"><div class="title"><strong>源码:</strong></div><div class="body"><p><a href="https://github.com/hamster1963/-SS-">https://github.com/hamster1963/-SS-</a></p></div></div><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>自动获取本机局域网地址并写入配置文件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>自动获取本机局域网地址并写入配置文件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>开启时显示各项配置参数，帮助使用者配置代理软件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>开启SS代理服务器，出错时显示错误弹窗</span></div><h2 id="原理与改进"><a href="#原理与改进" class="headerlink" title="原理与改进"></a>原理与改进</h2><p>开启SS代理服务器部分参考了GitHub上的<a href="https://github.com/shadowsocks/libQtShadowsocks">shadowsocks-libqss</a>项目，需要使用者手动填写config文件，使用起来学习成本有一点高，且如果没有成功运行也没有错误提示，所以使用python编写一个小脚本改进一下，以达到上述的功能。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="windows开启服务器"><a href="#windows开启服务器" class="headerlink" title="windows开启服务器"></a>windows开启服务器</h3><p>想开启SS代理服务器十分简单，如果不想更改默认的端口、密码、加密方式，可以直接双击使用 开启SS代理服务器.exe，打开后根据弹窗配置自己的代理软件，安卓小飞机，苹果小火箭，windows使用clash，macOS使用surge。</p><p>一切顺利后应该是这样的界面</p><p><img src="https://s2.loli.net/2023/05/17/xkFOngzIiB5LEJG.png"></p><h3 id="ios使用小火箭连接"><a href="#ios使用小火箭连接" class="headerlink" title="ios使用小火箭连接"></a>ios使用小火箭连接</h3><p>在小火箭中点击右上角加号，类型选择Shadowsocks，根据配置弹窗中的信息，填入相关配置，混淆与插件为空。如图:</p><img src="https://s2.loli.net/2023/05/17/eWn7lYDuPB1XJ69.png" alt="IMG_42143F5BF2D2-1.jpeg" style="zoom:33%;" /><h3 id="macos使用surge连接"><a href="#macos使用surge连接" class="headerlink" title="macos使用surge连接"></a>macos使用surge连接</h3><p>打开surge面板，在策略中选择添加</p><img src="https://s2.loli.net/2023/05/17/ID4YgcboJdkURFX.png" alt="截屏2021-03-31 上午12.43.35.png" style="zoom: 67%;" /><p>填入配置信息，出站选择全局代理即可</p><img src="https://s2.loli.net/2023/05/17/mgIoqMwSjnZrKQ4.png" alt="截屏2021-03-31 上午12.44.03.png" style="zoom:67%;" /><p><img src="https://s2.loli.net/2023/05/17/SXMNRaEvmTlju4t.png"></p><p>surge教程到此结束</p><h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><p>我们的目标其实很简单，就是获取当前IP地址并且写入到config文件中，并在启动服务器时有弹窗包含主要配置信息提醒用户。</p><h3 id="获取ip地址"><a href="#获取ip地址" class="headerlink" title="获取ip地址"></a>获取ip地址</h3><p>这是一个很通用的获取本机局域网ip地址的方法，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取实时IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询本机ip地址</span></span><br><span class="line"><span class="string">    :return: ip</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br></pre></td></tr></table></figure><h3 id="将ip地址写入配置文件"><a href="#将ip地址写入配置文件" class="headerlink" title="将ip地址写入配置文件"></a>将ip地址写入配置文件</h3><p>配置文件的类型是json，在python中我们可以很轻松地修改json文件内的值，只需要知道key和value的对应关系即可，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将IP地址写入json文件</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    data[<span class="string">&#x27;server&#x27;</span>] = get_host_ip() <span class="comment"># &lt;--- 添加实时ip地址.</span></span><br><span class="line"></span><br><span class="line">os.remove(filename)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>由于上面的 get_host_ip()是直接返还ip地址的，所以在server的value部分我们直接使用get_host_ip()即可。</p><h3 id="读取基础配置信息"><a href="#读取基础配置信息" class="headerlink" title="读取基础配置信息"></a>读取基础配置信息</h3><p>在开屏弹窗中我们需要显示基本信息，所以我们先需要读取json文件内的我们需要的value值，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取json 获取端口/密码/加密方式</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    a = data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    b = data[<span class="string">&#x27;server_port&#x27;</span>]</span><br><span class="line">    c = data[<span class="string">&#x27;method&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><p>弹窗使用的是tkinter库，语法也十分简单，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>():</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;你的ip地址是&quot;</span> + get_host_ip()+<span class="string">&quot;\n你的端口号是&quot;</span>+<span class="built_in">str</span>(b)+<span class="string">&quot;\n你的密码是&quot;</span> + a + <span class="string">&quot;\n加密方式是&quot;</span>+ c +<span class="string">&quot;\n请勿关闭cmd窗口&quot;</span>)</span><br></pre></td></tr></table></figure><p>实现界面如图</p><img src="https://s2.loli.net/2023/05/17/4lzSGF9ZgBIVTL3.png" alt="截屏2021-03-31 上午12.39.39.png" style="zoom:50%;" /><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>基本的小组件都写好了我们最后就把积木拼成小车车🚗就可以了,加入检测是否运行成功的弹窗，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主程序</span></span><br><span class="line">netopen = threading.Thread(target=runserver)<span class="comment">#, daemon=True)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    netopen.start()</span><br><span class="line">    <span class="keyword">if</span> netopen.is_alive() == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#弹窗显示</span></span><br><span class="line">        talk()</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;欢迎&quot;</span>,<span class="string">&quot;开启成功,如需退出请关闭cmd窗口&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>  netopen.is_alive() == <span class="literal">False</span>:</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;退出&quot;</span>,<span class="string">&quot;服务已退出，请检查配置&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><div class="tag-plugin note"><div class="title"><strong>quote,</strong></div><div class="body"><p>由于我们是调用了外部的程序，所以这里使用线程监控来实现检测服务器程序是否正确运行。</p></div></div><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>完整源码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化弹窗</span></span><br><span class="line">root = tkinter.Tk()</span><br><span class="line">root.withdraw()</span><br><span class="line">root.wm_attributes(<span class="string">&#x27;-topmost&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取实时IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询本机ip地址</span></span><br><span class="line"><span class="string">    :return: ip</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"><span class="comment">#将IP地址写入json文件</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    data[<span class="string">&#x27;server&#x27;</span>] = get_host_ip() <span class="comment"># &lt;--- 添加实时ip地址.</span></span><br><span class="line"></span><br><span class="line">os.remove(filename)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取json 获取端口/密码/加密方式</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    a = data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    b = data[<span class="string">&#x27;server_port&#x27;</span>]</span><br><span class="line">    c = data[<span class="string">&#x27;method&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span>():</span></span><br><span class="line">    os.system(<span class="string">&#x27;shadowsocks-server.bat&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>():</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;你的ip地址是&quot;</span> + get_host_ip()+<span class="string">&quot;\n你的端口号是&quot;</span>+<span class="built_in">str</span>(b)+<span class="string">&quot;\n你的密码是&quot;</span> + a + <span class="string">&quot;\n加密方式是&quot;</span>+ c +<span class="string">&quot;\n请勿关闭cmd窗口&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#主程序</span></span><br><span class="line">netopen = threading.Thread(target=runserver)<span class="comment">#, daemon=True)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    netopen.start()</span><br><span class="line">    <span class="keyword">if</span> netopen.is_alive() == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#弹窗显示</span></span><br><span class="line">        talk()</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;欢迎&quot;</span>,<span class="string">&quot;开启成功,如需退出请关闭cmd窗口&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>  netopen.is_alive() == <span class="literal">False</span>:</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;退出&quot;</span>,<span class="string">&quot;服务已退出，请检查配置&quot;</span>)</span><br></pre></td></tr></table></figure><p>逻辑还是比较简单的，基本就是在调用不同的组件，但是成品还是很不错的，大大降低了学习和使用成本。</p><h2 id="最后想说的话"><a href="#最后想说的话" class="headerlink" title="最后想说的话"></a>最后想说的话</h2><p>这个方法对于校园网来说只能算是另辟蹊径，并没有完全从根本上解决问题，如果天翼校园的客户端能写得好一点，连接设备数能放宽一点，想必会受到更多学生的接纳。See you next time！欢迎评论！</p>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> SS </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
