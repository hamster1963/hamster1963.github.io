<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用Github Actions为Go程序添加git与编译信息</title>
      <link href="2023/05/23/%E5%88%A9%E7%94%A8Github%20Actions%E4%B8%BAGo%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0git%E4%B8%8E%E7%BC%96%E8%AF%91%E4%BF%A1%E6%81%AF/"/>
      <url>2023/05/23/%E5%88%A9%E7%94%A8Github%20Actions%E4%B8%BAGo%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0git%E4%B8%8E%E7%BC%96%E8%AF%91%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>可以通过/version获取到当前服务的git版本号以及相关信息，也可以看到编译时间与编译环境等信息。</p><p><img src="https://s2.loli.net/2023/05/23/F5xGV3UgXrmOPAh.png"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在进行Go程序的编译时，可以通过传入额外的参数来修改编译过程，比较常见的有：</p><ol><li><strong><code>o &lt;output&gt;</code></strong>: 指定输出文件的名称。例如，<code>go build -o myprogram</code>将生成名为 <code>myprogram</code> 的可执行文件。</li><li><strong><code>ldflags &quot;&lt;flags&gt;&quot;</code></strong>: 用于传递链接器（ld）的标志。您可以使用此选项将特定标志传递给链接器，例如设置版本信息或自定义链接行为。例如，<code>go build -ldflags &quot;-X main.version=1.0.0&quot;</code>将在构建过程中设置名为 <strong><code>version</code></strong> 的变量的值为 <code>1.0.0</code>。</li><li><strong><code>gcflags &quot;&lt;flags&gt;&quot;</code></strong>: 用于传递Go编译器（gc）的标志。您可以使用此选项传递特定标志给编译器，例如优化级别或其他调试信息。例如，<code>go build -gcflags &quot;-N -l&quot;</code> 将禁用优化并生成带有调试信息的可执行文件。</li></ol><p>本次的实现则是利用<code>ldflags &quot;&lt;flags&gt;&quot;</code>指令进行信息的注入。</p><h2 id="核心构建指令"><a href="#核心构建指令" class="headerlink" title="核心构建指令"></a>核心构建指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go build -o ./temp/release/linux_amd64/service -ldflags <span class="string">&quot;     -X &#x27;home-network-watcher/utility/bin_utils.GitTag=v1.11.12&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=8405a9a7a15c33399d8cc400f08836e14b9dc085&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=2023.05.21.03:56:22&#x27;     -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=github@action golang:1.20-buster&#x27; &quot;</span>  main.go</span><br></pre></td></tr></table></figure><p>接下来进行Go代码与GitHub Actions、Dockerfile的编写。</p><h2 id="Go美化注入代码"><a href="#Go美化注入代码" class="headerlink" title="Go美化注入代码"></a>Go美化注入代码</h2><p>新建一个.Go文件，以变量的形式用以储存在程序中需要的git与版本信息，并创建一个函数用以美化显示信息。</p><p>创建需要注入信息的变量，设置默认值为unknown，等待编译注入再进行重新赋值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> binInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化为 unknown，如果编译时没有传入这些值，则为 unknown</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">GitTag         = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">GitCommitLog   = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">GitStatus      = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">BuildTime      = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">BuildGoVersion = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">VersionString = <span class="string">&quot;GitTag:&quot;</span> + GitTag + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;GitCommitLog:&quot;</span> + GitCommitLog + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;GitStatus:&quot;</span> + GitStatus + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;BuildTime:&quot;</span> + BuildTime + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;BuildGoVersion:&quot;</span> + BuildGoVersion + <span class="string">&quot;\n&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*// StringifySingleLine 返回单行格式</span></span><br><span class="line"><span class="comment">func StringifySingleLine() string &#123;</span></span><br><span class="line"><span class="comment">return fmt.Sprintf(&quot;GitTag=%s. GitCommitLog=%s. GitStatus=%s. BuildTime=%s. GoVersion=%s. runtime=%s/%s.&quot;,</span></span><br><span class="line"><span class="comment">GitTag, GitCommitLog, GitStatus, BuildTime, BuildGoVersion, runtime.GOOS, runtime.GOARCH)</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringifyMultiLine 返回多行格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringifyMultiLine</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;GitTag=%s\nGitCommitLog=%s\nGitStatus=%s\nBuildTime=%s\nGoVersion=%s\nruntime=%s/%s\n&quot;</span>,</span><br><span class="line">GitTag, GitCommitLog, GitStatus, BuildTime, BuildGoVersion, runtime.GOOS, runtime.GOARCH)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">beauty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对一些值做美化处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">beauty</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> GitStatus == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// GitStatus 为空时，说明本地源码与最近的 commit 记录一致，无修改</span></span><br><span class="line"><span class="comment">// 为它赋一个特殊值</span></span><br><span class="line">GitStatus = <span class="string">&quot;cleanly&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 将多行结果合并为一行</span></span><br><span class="line">GitStatus = strings.Replace(strings.Replace(GitStatus, <span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot; |&quot;</span>, <span class="number">-1</span>), <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; |&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Go项目中显示git与编译信息"><a href="#在Go项目中显示git与编译信息" class="headerlink" title="在Go项目中显示git与编译信息"></a>在Go项目中显示git与编译信息</h2><p>可在main.go中设置命令行参数进行信息显示。</p><p>如下代码，在运行编译后的二进制文件时，通过<code>-v</code>进行信息显示。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/gogf/gf/contrib/drivers/mysql/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gogf/gf/v2/os/gctx&quot;</span></span><br><span class="line"><span class="string">&quot;home-network-watcher/internal/cmd&quot;</span></span><br><span class="line">_ <span class="string">&quot;home-network-watcher/internal/logic&quot;</span></span><br><span class="line">_ <span class="string">&quot;home-network-watcher/internal/packed&quot;</span></span><br><span class="line">binInfo <span class="string">&quot;home-network-watcher/utility/bin_utils&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := flag.Bool(<span class="string">&quot;v&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Show bin info.&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *v &#123;</span><br><span class="line">_, _ = fmt.Fprint(os.Stderr, binInfo.StringifyMultiLine())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">cmd.Main.Run(gctx.New())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以通过绑定接口的形式，在访问服务<code>/version</code> 时进行信息的显示。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">group.ALL(<span class="string">&quot;/version&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(r *ghttp.Request)</span></span> &#123;</span><br><span class="line">r.Response.Write(binInfo.VersionString)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Dockerfile编写"><a href="#Dockerfile编写" class="headerlink" title="Dockerfile编写"></a>Dockerfile编写</h2><p>首先定义Go构建器</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br></pre></td></tr></table></figure><p>设置需要注入的构建参数的默认值</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> GIT_TAG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_COMMIT_LOG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TIME=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_GO_VERSION=<span class="string">&quot;github@action golang:1.20-buster&quot;</span></span><br></pre></td></tr></table></figure><p>关键的注入则是通过在docker进行构建时也可以进行参数的绑定这个特性来完成的。</p><p>GitHub Action将ARG的参数传入docker build后，接下来则将信息传入到gf build或者go build中，首先构建传入的信息。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置 LDFlags 变量</span></span><br><span class="line"><span class="keyword">ENV</span> LDFLAGS=<span class="string">&quot; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=$&#123;GIT_COMMIT_LOG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=$&#123;BUILD_TIME&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=$&#123;BUILD_GO_VERSION&#125;&#x27; \</span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>以<code>&#39;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#39;</code> 为例</p><p>go通过追溯包名进行参数数据的传递，在上述定义存储变量的Go文件中，模块为<code>&quot;home-network-watcher/utility/bin_utils”</code> ，则在构建时也是传入包名加内部的变量名进行数据传递，在这里我们将上面获取到的GIT_TAG传递给GitTag变量。</p><p>最后则是通过go build传递进去</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -ldflags <span class="string">&quot;<span class="variable">$&#123;LDFLAGS&#125;</span>&quot;</span> -o temp/release/linux_amd64/service main.go</span></span><br></pre></td></tr></table></figure><p>以下为完整Dockerfile</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置构建参数的默认值</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_TAG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> GIT_COMMIT_LOG=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_TIME=<span class="string">&quot;unknown&quot;</span></span><br><span class="line"><span class="keyword">ARG</span> BUILD_GO_VERSION=<span class="string">&quot;github@action golang:1.20-buster&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印构建参数</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;GIT_TAG=<span class="variable">$&#123;GIT_TAG&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;GIT_COMMIT_LOG=<span class="variable">$&#123;GIT_COMMIT_LOG&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;BUILD_TIME=<span class="variable">$&#123;BUILD_TIME&#125;</span>&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;BUILD_GO_VERSION=<span class="variable">$&#123;BUILD_GO_VERSION&#125;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 LDFlags 变量</span></span><br><span class="line"><span class="keyword">ENV</span> LDFLAGS=<span class="string">&quot; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitTag=$&#123;GIT_TAG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.GitCommitLog=$&#123;GIT_COMMIT_LOG&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildTime=$&#123;BUILD_TIME&#125;&#x27; \</span></span><br><span class="line"><span class="string">    -X &#x27;home-network-watcher/utility/bin_utils.BuildGoVersion=$&#123;BUILD_GO_VERSION&#125;&#x27; \</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get github.com/gogf/gf/cmd/gf/v2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go install github.com/gogf/gf/cmd/gf/v2</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> gf build -e <span class="string">&quot;-ldflags \&quot;<span class="variable">$&#123;LDFLAGS&#125;</span>\&quot; &quot;</span></span></span><br><span class="line"><span class="comment"># RUN go build -ldflags &quot;$&#123;LDFLAGS&#125;&quot; -o temp/release/linux_amd64/service main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> loads/alpine:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;Hamster &lt;liaolaixin@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                INSTALLATION</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的项目路径</span></span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">WORKDIR</span><span class="bash"> /app/main</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go/src/app/temp/release/linux_amd64/service <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 添加应用可执行文件，并设置执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 增加端口绑定</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10401</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                   START</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$WORKDIR</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;./service&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="Github-Actions编写"><a href="#Github-Actions编写" class="headerlink" title="Github Actions编写"></a>Github Actions编写</h2><p>十分简单，只需要利用Actions里面可以方便获取的git信息即可，通过<code>—build-arg</code>传递入docker build中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-push:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">get_version</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;CURRENT_VERSION=$&#123;GITHUB_REF/refs\/tags\//&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Git</span> <span class="string">Commit</span> <span class="string">Log</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">git-commit-log</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;GIT_COMMIT_LOG=$<span class="template-variable">&#123;&#123; github.sha &#125;&#125;</span>&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Build</span> <span class="string">Time</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">build-time</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;BUILD_TIME=$(date +&#x27;%Y.%m.%d.%H:%M:%S&#x27;)&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">Dockerhub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">.</span> <span class="string">--build-arg</span> <span class="string">GIT_TAG=$&#123;&#123;env.CURRENT_VERSION&#125;&#125;</span> <span class="string">--build-arg</span> <span class="string">GIT_COMMIT_LOG=&quot;$&#123;&#123;env.GIT_COMMIT_LOG&#125;&#125;&quot;</span> <span class="string">--build-arg</span> <span class="string">BUILD_TIME=$&#123;&#123;env.BUILD_TIME&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">environment</span> <span class="string">variables</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.GIT_COMMIT_LOG&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.BUILD_TIME&#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123;env.CURRENT_VERSION&#125;&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">env.CURRENT_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">as</span> <span class="string">latest</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:latest</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">env.CURRENT_VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:latest</span></span><br></pre></td></tr></table></figure><p>将获取到的信息首先储存在<code>$GITHUB_ENV</code>中，在构建docker build指令时进行传递</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="variable">$IMAGE_NAME</span>:<span class="variable">$&#123;&#123; github.sha &#125;</span>&#125; . --build-arg GIT_TAG=<span class="variable">$&#123;&#123;env.CURRENT_VERSION&#125;</span>&#125; --build-arg GIT_COMMIT_LOG=<span class="string">&quot;<span class="variable">$&#123;&#123;env.GIT_COMMIT_LOG&#125;</span>&#125;&quot;</span> --build-arg BUILD_TIME=<span class="variable">$&#123;&#123;env.BUILD_TIME&#125;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/23/z5es4VuFhUygAI7.png"></p><p>这样子便完成了git与版本信息的注入，十分的自动便捷。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>主要的难点还是如何将信息在整个构建的过程中传递下去，只要可以传递好所需的信息在构建的时候即可以方便地通过go build的-ldflags将信息传递入二进制文件中。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Docker </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Actions为Go项目实现简易CI/CD</title>
      <link href="2023/05/01/%E4%BD%BF%E7%94%A8GitHub%20Actions%E4%B8%BAGo%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93CI:CD/"/>
      <url>2023/05/01/%E4%BD%BF%E7%94%A8GitHub%20Actions%E4%B8%BAGo%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93CI:CD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Github-Actions与CI-CD"><a href="#Github-Actions与CI-CD" class="headerlink" title="Github Actions与CI/CD"></a>Github Actions与CI/CD</h2><p>GitHub Actions是GitHub提供的一种自动化工具，可以帮助您在代码仓库中自动执行任务，如构建、测试和部署。CI/CD（持续集成/持续部署）是一种自动化软件开发实践，可以帮助您更快地交付高质量的软件。在本文中，我们将介绍如何使用GitHub Actions为Go项目实现简易CI/CD。</p><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p><img src="https://s2.loli.net/2023/05/01/3knKw9TEiHsIJYt.png"></p><p>将Actions主要分为三个部分</p><ol><li>在代码提交后进行编译检查，检查是否存在代码错误。</li><li>在进行git tag操作后，针对tag进行docker镜像的构建与推送。</li><li>达到版本号发布时，自动构建多平台可执行二进制文件。</li></ol><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><h3 id="为Actions开放仓库权限"><a href="#为Actions开放仓库权限" class="headerlink" title="为Actions开放仓库权限"></a>为Actions开放仓库权限</h3><p>在仓库主页，选中<strong>Settings→Actions→General→Workflow permissions</strong>，将权限设置为Read and write permisssions。</p><p><img src="https://s2.loli.net/2023/05/01/4I6uCWfpiXgcNZK.png"></p><h3 id="获取Docker相关信息"><a href="#获取Docker相关信息" class="headerlink" title="获取Docker相关信息"></a>获取Docker相关信息</h3><p>将信息储存在<strong>Actions secrets and variables</strong>中，分别设置Docker用户名，token与仓库名称。</p><p>获取 Docker token 的步骤如下：</p><ol><li>登录到 Docker Hub 帐户。</li><li>点击右上角的头像，选择“Account Settings”。</li><li>在左侧菜单中选择“Security”。</li><li>滚动到“Access Tokens”部分，然后单击“New Access Token”按钮。</li><li>输入访问令牌的描述，选择令牌的有效期，并选择要授予令牌的权限。</li><li>单击“Create”按钮以生成令牌。</li><li>复制生成的令牌并保存在安全的地方。</li></ol><p>仓库名称则为 <strong>用户名/仓库名</strong></p><h3 id="进行secrets的设置"><a href="#进行secrets的设置" class="headerlink" title="进行secrets的设置"></a>进行secrets的设置</h3><p>在<strong>Settings→Secrets and variables</strong>中点击<strong>New repository secret</strong>进行新增。</p><ol><li>DOCKER_USERNAME</li><li>DOCKER_ACCESS_TOKEN </li><li>DOCKER_IMAGE_NAME</li></ol><p><img src="https://s2.loli.net/2023/05/01/5WStRVPOZh4MzeD.png"></p><h2 id="设置Actions"><a href="#设置Actions" class="headerlink" title="设置Actions"></a>设置Actions</h2><p>点击仓库内<strong>Actions</strong>模块，点击<strong>New workflow</strong>进行工作流的新增。</p><h3 id="代码编译检查工作流"><a href="#代码编译检查工作流" class="headerlink" title="代码编译检查工作流"></a>代码编译检查工作流</h3><p>将会在检测到push或pull_request后进行代码编译检查。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a golang project</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">代码编译测试</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-go@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">go-version:</span> <span class="number">1.19</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">go</span> <span class="string">build</span> <span class="string">-v</span> <span class="string">./...</span></span><br><span class="line">        <span class="string">pwd</span></span><br></pre></td></tr></table></figure><h3 id="编译构建并推送Docker镜像"><a href="#编译构建并推送Docker镜像" class="headerlink" title="编译构建并推送Docker镜像"></a>编译构建并推送Docker镜像</h3><p>此工作流只会在仓库新增tag时进行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">tag</span> <span class="string">v0.0.1</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">--tags</span></span><br></pre></td></tr></table></figure><p>工作流分为以下几个步骤</p><ol><li>获取tag作为版本号</li><li>根据Dockerfile进行Docker镜像的构建</li><li>针对构建完成镜像进行tag打版本号</li><li>将镜像推送至Dockerhub</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;v*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">IMAGE_NAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_IMAGE_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-push:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">get_version</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;VERSION=$&#123;GITHUB_REF/refs\/tags\//&#125;&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_OUTPUT</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">Dockerhub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKER_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">.</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">steps.get_version.outputs.VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tag</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">as</span> <span class="string">latest</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">$IMAGE_NAME:latest</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:$&#123;&#123;</span> <span class="string">steps.get_version.outputs.VERSION</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">push</span> <span class="string">$IMAGE_NAME:latest</span></span><br></pre></td></tr></table></figure><p>这时我们需要针对项目进行Dockerfile的编写，一下是一个针对Goframe项目的示例。</p><ol><li>设置golang构建环境，有许多版本可以选择，可以参考<a href="https://hub.docker.com/_/golang">https://hub.docker.com/_/golang</a>，这里选择<strong>golang:1.20-buster。</strong></li><li>拷贝代码至构建环境，进行构建，在这里将编译完成后将二进制文件命名为service，构建命令也可以指定系统与架构，在命令中加上<strong>GOOS=linux GOARCH=amd64</strong>。</li><li>设置镜像环境，设置工作路径，为二进制文件添加权限并增加端口绑定。</li><li>设置入口命令。</li></ol><p>至此一份Dockerfile就编写完成了。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span>-buster AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> VERSION=dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 go build -o service -ldflags=-X=main.version=<span class="variable">$&#123;VERSION&#125;</span> main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> loads/alpine:<span class="number">3.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;Hamster &lt;liaolaixin@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                INSTALLATION</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置固定的项目路径</span></span><br><span class="line"><span class="keyword">ENV</span> <span class="keyword">WORKDIR</span><span class="bash"> /app/main</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /go/src/app/service <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"><span class="comment"># 添加应用可执行文件，并设置执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x <span class="variable">$WORKDIR</span>/service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加端口绑定</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10399</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment">#                                   START</span></span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$WORKDIR</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;./service&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>新增后通过git tag测试工作流，检查Dockerhub是否有最新构建镜像。</p><p><img src="https://s2.loli.net/2023/05/01/bTpIQWdFaGjXs6t.png"></p><p><img src="https://s2.loli.net/2023/05/01/slGbngieMRJIqZo.png"></p><h2 id="编译多平台二进制文件"><a href="#编译多平台二进制文件" class="headerlink" title="编译多平台二进制文件"></a>编译多平台二进制文件</h2><p>设置为只在新增release时进行构建，可以设置需要的系统架构或排除的，十分简单易用。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">build-go-binary</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">created</span>] <span class="comment"># 表示在创建新的 Release 时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-go-binary:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">goos:</span> [<span class="string">linux</span>, <span class="string">windows</span>, <span class="string">darwin</span>] <span class="comment"># 需要打包的系统</span></span><br><span class="line">        <span class="attr">goarch:</span> [<span class="string">amd64</span>, <span class="string">arm64</span>] <span class="comment"># 需要打包的架构</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="comment"># 排除某些平台和架构</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">goarch:</span> <span class="string">arm64</span></span><br><span class="line">            <span class="attr">goos:</span> <span class="string">windows</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wangyoucao577/go-release-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 一个默认的变量，用来实现往 Release 中添加文件</span></span><br><span class="line">          <span class="attr">goos:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.goos</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">goarch:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.goarch</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">goversion:</span> <span class="number">1.18</span> <span class="comment"># 可以指定编译使用的 Golang 版本</span></span><br><span class="line">          <span class="attr">binary_name:</span> <span class="string">&quot;push_go&quot;</span> <span class="comment"># 可以指定二进制文件的名称</span></span><br><span class="line">          <span class="attr">pre_command:</span> <span class="string">export</span> <span class="string">CGO_ENABLED=0</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">GODEBUG=http2client=0</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在仓库中新增release并测试，等待编译完成后即可在release中查看不同系统架构的二进制文件。</p><p><img src="https://s2.loli.net/2023/05/01/AMTp96LrmwROkcj.png"></p><p><img src="https://s2.loli.net/2023/05/01/mCYA7OkpiJ43Pba.png"></p><h2 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h2><p>可针对Actions的进度进行消息通知，在<strong>Settings→Webhooks</strong>设置推送目标URL，搭配自建的消息推送即可实现在手机上获取Actions进度流程。</p><img src="https://s2.loli.net/2023/05/01/tVzdPTXu3UZeb8k.jpg" style="zoom:33%;" /><h2 id="TODO-可复用工作流"><a href="#TODO-可复用工作流" class="headerlink" title="TODO: 可复用工作流"></a>TODO: 可复用工作流</h2>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Docker </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向破解登录获取360路由器信息</title>
      <link href="2023/04/29/%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96360%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BF%A1%E6%81%AF%20/"/>
      <url>2023/04/29/%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96360%E8%B7%AF%E7%94%B1%E5%99%A8%E4%BF%A1%E6%81%AF%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>360路由器目前没有无损刷机的办法，获取ssh终端权限较为困难，如想获取路由器状态信息以及连接设备信息就比较困难，但可以通过采用逆向破解网页登陆的形式进行后台的登录进行信息获取。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/hamster1963/360-router-data-retriever">https://github.com/hamster1963/360-router-data-retriever</a></p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p>采用代码进行360后台的登录，进行路由器信息的获取。</p><p><img src="https://s2.loli.net/2023/04/29/lP21qpnfYciB8ku.png"></p><h2 id="登陆过程分析"><a href="#登陆过程分析" class="headerlink" title="登陆过程分析"></a>登陆过程分析</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>直接采用Safari的开发者工具进行抓包。</p><p>在输入框中输入管理员密码进行登录。</p><img src="https://s2.loli.net/2023/04/29/qKLdOtjYf2nrNwJ.png" style="zoom:50%;" /><p><img src="https://s2.loli.net/2023/04/29/kSl9RNuyVEebhtM.png"></p><p>可以看到页面首先请求了get_rand_key.cgi（CGI是通用网关接口，是一种比较传统的动态网页的实现方式），通过Get方法获取到了一串随机的字符串。</p><p><img src="https://s2.loli.net/2023/04/29/hYjMGzbcuK3rn9F.png"></p><p>在获取完成后进行一些暂时未知的处理后请求了web_login.cgi，请求数据中包括了管理员用户名与密码，可以发现pass密码中的值并不是我们所填入的密码值，首先猜测可能为md5或aes加密后的字符串。</p><p><img src="https://s2.loli.net/2023/04/29/dRaCTYcKXIGtn9e.png"></p><p>查看登陆接口在登陆成功后的返还与Header。接口返还了登陆状态码以及Token-ID字段数据，同时在返回的Header中可以看到有Set-Cookie字段，猜测在后续的数据接口中应该会在请求头中携带token以及cookie进行权限验证。</p><p><img src="https://s2.loli.net/2023/04/29/uhJop1VMIiS2AHF.png"></p><p><img src="https://s2.loli.net/2023/04/29/97WvGq3pLAVJyY8.png"></p><p>查看后续请求头，可以观察到在Cookie中携带了先前返回的信息，包含Set-Cookie以及token信息。</p><p><img src="https://s2.loli.net/2023/04/29/p6kqYZRSTmeH5C7.png"></p><p>目前为止，可以对登陆过程进行一个小总结。</p><p>输入账号密码→点击登录→获取随机字符串→进行加密→请求登录接口→获取Cookie以及token</p><p>目前主要难点为如何进行加密的逆向破解。</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>首先尝试md5加密，与目标密码不一致。</p><p>其次尝试简单粗暴的方式，查源码。查看js代码后，发现js代码进过webpack混淆打包，从函数名以及变量名中很难找出加密的代码块，因此使用关键词进行搜索。</p><p><img src="https://s2.loli.net/2023/04/29/CvOPTq6JdurMxmn.png"></p><p>果然还是简单粗暴比较有用，在搜索到AES关键词后，可以从代码中发现密码加密的关键逻辑<img src="https://s2.loli.net/2023/04/29/8x3N4wdiPZRpShO.png"></p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">                        <span class="keyword">switch</span> (t.prev = t.next) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.next = <span class="number">2</span>, c(<span class="number">0</span>).then((<span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">                                r = n || t;</span><br><span class="line">                                <span class="keyword">var</span> o = a.enc.Hex.parse(r.rand_key),</span><br><span class="line">                                    u = a.enc.Latin1.parse(<span class="string">&quot;360luyou@install&quot;</span>),</span><br><span class="line">                                    c = a.AES.encrypt(e, o, &#123;</span><br><span class="line">                                        iv: u,</span><br><span class="line">                                        mode: a.mode.CBC,</span><br><span class="line">                                        padding: a.pad.Pkcs7</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                i = c.ciphertext.toString()</span><br><span class="line">                            &#125;));</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.abrupt(<span class="string">&quot;return&quot;</span>, r.key_index + i);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.stop()</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">                        <span class="keyword">switch</span> (t.prev = t.next) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            <span class="keyword">if</span> (r = e.substr(<span class="number">32</span>, e.length - <span class="number">32</span>), i = &#123;&#125;, !n) &#123;</span><br><span class="line">                                t.next = <span class="number">6</span>;</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            i.rand_key = n,</span><br><span class="line">                            t.next = <span class="number">9</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.next = <span class="number">8</span>, c(<span class="number">0</span>, e, !<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                            i = t.sent;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                            <span class="keyword">if</span> (i.rand_key) &#123;</span><br><span class="line">                                t.next = <span class="number">11</span>;</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> t.abrupt(<span class="string">&quot;return&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                            <span class="keyword">return</span> u = a.enc.Hex.parse(i.rand_key), s = a.enc.Latin1.parse(<span class="string">&quot;360luyou@install&quot;</span>), d = a.enc.Hex.parse(r).toString(a.enc.Base64), p = a.AES.decrypt(d, u, &#123;</span><br><span class="line">                                iv: s,</span><br><span class="line">                                mode: a.mode.CBC,</span><br><span class="line">                                padding: a.pad.Pkcs7</span><br><span class="line">                            &#125;), t.abrupt(<span class="string">&quot;return&quot;</span>, p.toString(a.enc.Utf8));</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">                            <span class="keyword">return</span> t.stop()</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p>虽然变量名与函数名被混淆，但可以从代码中看到采用AES加密。</p><p>首先进行加密前的处理，对rand_key进行hex，定义iv，设置模式为CBC，padding为PKCS7。</p><p>加密步骤为：</p><ol><li>获取rand_key的后32位进行hex</li><li>对密码进行PKCS7Encode</li><li>最后以hex后的rand_key作为key，PKCS7Encode后的密码作为plainText，360luyou@install字符串进行hex后作为iv</li><li>进行AES加密</li></ol><p>在加密结束后，将前rand_key前32位与加密字符串进行拼接作为pass传输到路由器进行登录验证。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里给出Python与Go的加密示例。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_aes_str</span>(<span class="params">rand_key: <span class="built_in">bytes</span></span>):</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27;\x33\x36\x30\x6c\x75\x79\x6f\x75\x40\x69\x6e\x73\x74\x61\x6c\x6c&#x27;</span>  <span class="comment"># &quot;360luyou@install&quot;.decode(&#x27;hex&#x27;)</span></span><br><span class="line">    encryptor = AES.new(rand_key, mode, iv)</span><br><span class="line">    encoder = PKCS7Encoder()</span><br><span class="line">    text = <span class="string">&quot;password&quot;</span>  <span class="comment"># password</span></span><br><span class="line">    pad_text = encoder.encode(text)</span><br><span class="line">    cipher = encryptor.encrypt(<span class="built_in">bytes</span>(pad_text, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GenerateAesString 生成加密字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">GenerateAesString</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 判断随机字符串是否为空</span></span><br><span class="line"><span class="keyword">if</span> r.randStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">g.Dump(<span class="string">&quot;randStr is empty&quot;</span>)</span><br><span class="line">err := r.GetRandomString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// randKey := &quot;fbf8a1ca3b31ace17adece7f6941a278017ff28b58200c5a153e07f5dc840b3f&quot;</span></span><br><span class="line">decodeString, err := hex.DecodeString(r.randStr[<span class="number">32</span>:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">block, err := aes.NewCipher(decodeString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">encryptor := cipher.NewCBCEncrypter(block, configs.DefaultAesIv)</span><br><span class="line">p7 := utils.PKCS7Encoder&#123;BlockSize: <span class="number">16</span>&#125;</span><br><span class="line">padded := p7.Encode([]<span class="keyword">byte</span>(r.Password))</span><br><span class="line">cipherText := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(padded))</span><br><span class="line">encryptor.CryptBlocks(cipherText, padded)</span><br><span class="line">r.aesStr = hex.EncodeToString(cipherText)</span><br><span class="line"><span class="keyword">if</span> r.aesStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">g.Dump(<span class="string">&quot;aesStr is empty&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;aesStr is empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">g.Dump(gtime.Now().String() + <span class="string">&quot; Generate AESKey &quot;</span> + r.aesStr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go项目代码层级"><a href="#Go项目代码层级" class="headerlink" title="Go项目代码层级"></a>Go项目代码层级</h2><p>完整的登陆以及获取信息由Go代码进行编写。</p><p>首先定义不同模块的接口以及结构体</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LoginMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">Login() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AesMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">GetRandomString() error</span><br><span class="line">GenerateAesString() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Router <span class="keyword">struct</span> &#123;</span><br><span class="line">Address   <span class="keyword">string</span></span><br><span class="line">Password  <span class="keyword">string</span></span><br><span class="line">state     <span class="keyword">bool</span></span><br><span class="line">aesIv     []<span class="keyword">byte</span></span><br><span class="line">inHeaders <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">randStr   <span class="keyword">string</span></span><br><span class="line">aesStr    <span class="keyword">string</span></span><br><span class="line">token     <span class="keyword">string</span></span><br><span class="line">cookie    <span class="keyword">string</span></span><br><span class="line">Headers   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RouterMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">GetRouterInfo() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后以嵌套接口的形式将不同模块组合起来。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RouterController <span class="keyword">interface</span> &#123;</span><br><span class="line">LoginMethod</span><br><span class="line">AesMethod</span><br><span class="line">RouterMethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用时，采用接口赋值的形式调用接口内的方法，使程序变得更加灵活且便于维护。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> routerMain internal.RouterController</span><br><span class="line">myRouter := internal.Router&#123;</span><br><span class="line">Address:  configs.RouterAddress,</span><br><span class="line">Password: configs.RouterPassword,</span><br><span class="line">&#125;</span><br><span class="line">routerMain = &amp;myRouter</span><br><span class="line"></span><br><span class="line">err := routerMain.GetRandomString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.GenerateAesString()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.Login()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = routerMain.GetRouterInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言项目内存泄露问题的发现与解决</title>
      <link href="2023/04/24/%E4%B8%80%E6%AC%A1Go%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
      <url>2023/04/24/%E4%B8%80%E6%AC%A1Go%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98%E7%9A%84%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>后端功能为采集家庭网络信息并对外开放接口，每1s或每5s进行采集。</p><p>采用docker打包Go编译完成后的二进制文件，通过docker-compose部署在云服务器上。</p><p>在运行一段时间后，内存报警，内存占用不断增高，怀疑发生了内存泄漏，且GC在其中无法清理内存。</p><h2 id="原功能实现"><a href="#原功能实现" class="headerlink" title="原功能实现"></a>原功能实现</h2><p>原功能采用for关键词加time.Sleep进行实现，参考于Python服务器探针代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">CPU = get_cpu()</span><br><span class="line">Uptime = get_uptime()</span><br><span class="line">Load_1, Load_5, Load_15 = os.getloadavg()</span><br><span class="line">MemoryTotal, MemoryUsed, SwapTotal, SwapFree = get_memory()</span><br><span class="line">HDDTotal, HDDUsed = get_hdd()</span><br><span class="line">  get_router_info()</span><br></pre></td></tr></table></figure><p>在Go代码中，为获取一段时间内的消耗流量与消耗流量最多用户，创建了两个变量。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxFLow <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> maxFLowUser <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>并在后续的计算中给变量赋值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算用户流量变化</span></span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> userList.Array() &#123;</span><br><span class="line">userMap := gconv.Map(user)</span><br><span class="line"><span class="keyword">for</span> _, userNow := <span class="keyword">range</span> userListNow &#123;</span><br><span class="line">userNowMap := gconv.Map(userNow)</span><br><span class="line"><span class="keyword">if</span> userMap[<span class="string">&quot;id&quot;</span>] == userNowMap[<span class="string">&quot;id&quot;</span>] &#123;</span><br><span class="line"><span class="comment">// 计算用户流量变化</span></span><br><span class="line">totalFlow := gconv.Int(userNowMap[<span class="string">&quot;down&quot;</span>]) - gconv.Int(userMap[<span class="string">&quot;down&quot;</span>])</span><br><span class="line"><span class="keyword">if</span> totalFlow &gt; maxFLow &#123;</span><br><span class="line">maxFLow = totalFlow</span><br><span class="line">maxFLowUser = gconv.String(userNowMap[<span class="string">&quot;remark&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存泄露原因"><a href="#内存泄露原因" class="headerlink" title="内存泄露原因"></a>内存泄露原因</h2><p>由于采用for关键词，在 Go 中，如果在 for 循环中创建了一个新的变量，但在每个循环迭代中没有将其重新分配，则可能会导致内存泄漏。</p><p>例如，以下代码段将创建一个新的字符串，并在每个循环迭代中将其连接到另一个字符串上，但它没有在每个迭代中将新字符串重新分配：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    newString := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    result += newString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，每次迭代都会创建一个新的字符串，但由于新的字符串没有重新分配，因此在每个迭代后，将有一个新的字符串和一个旧的字符串（在 result 变量中）仍然引用它。这会导致大量的内存泄漏，因为旧的字符串仍然存在于内存中，而无法被垃圾回收器清理。</p><p>为了避免内存泄漏，可以在每个迭代中将新字符串重新分配给变量，如下所示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    newString := <span class="string">&quot;hello&quot;</span></span><br><span class="line">    result += newString</span><br><span class="line">    newString = <span class="string">&quot;&quot;</span> <span class="comment">// 重新分配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将新字符串分配给一个新变量，可以确保每次迭代都有一个新的变量来引用新的字符串，从而避免内存泄漏。在重新分配新变量后，旧的字符串将不再被引用，并且可以被垃圾回收器清理。</p><p>归根结底，则是在每次循环中创建的变量一直处在引用状态，GC无法正确对其进行垃圾回收，导致程序内存占用一直在不断升高。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>采用Go语言的思路进行书写，项目基于Goframe框架，重构后采用框架中的gcron（定时任务）进行定期的数据拉取，函数内部定义参数可在函数在执行结束后结束引用关系，避免采用for循环造成内存泄露。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_, err = gcron.AddSingleton(ctx, <span class="string">&quot;*/5 * * * * *&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">err = network_utils.NodeUtils.GetNodeInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">g.Dump(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">&quot;获取当前代理节点信息&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于GC"><a href="#关于GC" class="headerlink" title="关于GC"></a>关于GC</h2><p>Go语言的垃圾回收（GC）是在运行时进行的，不是在函数结束后。Go语言的垃圾回收器是一种并发、自适应的垃圾回收器，它会在程序运行时自动检测内存使用情况，并在必要时回收不再使用的内存。</p><p>具体来说，Go语言的垃圾回收器会在程序运行时周期性地扫描堆内存中的对象，标记那些仍然被引用的对象，然后清理那些未被引用的对象。垃圾回收器的执行时间由当前程序的内存使用情况和硬件配置等因素决定，并不一定在函数结束后立即进行。</p><p>总之，Go语言的垃圾回收是一种自动的、并发的机制，它可以在程序运行时周期性地回收未被引用的内存。这种机制可以减少程序员的内存管理负担，提高程序的可靠性和性能。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭负载均衡节点部署</title>
      <link href="2023/04/15/%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8A%82%E7%82%B9%E5%88%86%E4%BA%AB%20/"/>
      <url>2023/04/15/%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%8A%82%E7%82%B9%E5%88%86%E4%BA%AB%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="实现原因"><a href="#实现原因" class="headerlink" title="实现原因"></a>实现原因</h2><p>身边的几个朋友有着查查谷歌学术，逛逛ig的需求，但是都对科学上网了解不多且对软件的认知还停在vpn阶段。</p><p>因此计划利用家用服务器进行节点的搭建，对外只暴露为vmess节点，内部为多个机场与服务器组成的负载均衡节点，在保障科学上网稳定的同时也可以降低朋友们的学习成本，采用流行的软件进行连接即可。</p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><h3 id="外部节点效果"><a href="#外部节点效果" class="headerlink" title="外部节点效果"></a>外部节点效果</h3><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/IMG_2162.jpg" style="zoom: 20%;" /><h3 id="x-ui面板管理节点界面"><a href="#x-ui面板管理节点界面" class="headerlink" title="x-ui面板管理节点界面"></a>x-ui面板管理节点界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled.png"></p><h3 id="v2rayA界面"><a href="#v2rayA界面" class="headerlink" title="v2rayA界面"></a>v2rayA界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%201.png"></p><h3 id="Uptime-Kuma节点监控界面"><a href="#Uptime-Kuma节点监控界面" class="headerlink" title="Uptime Kuma节点监控界面"></a>Uptime Kuma节点监控界面</h3><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%202.png"></p><h3 id="Bark推送示例"><a href="#Bark推送示例" class="headerlink" title="Bark推送示例"></a>Bark推送示例</h3><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/WechatIMG321.jpeg" style="zoom:25%;" /><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>架构为下图所示</p><p>在路由器针对单用户节点进行端口转发，在xui中设置出站流量转发至v2raya。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%203.png"></p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>在nas上进行部署，配置如下图，配置不高但转发性能远大于家宽上传带宽，因此将就一下也可以。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%204.png" style="zoom:50%;" /><p>全部组件都在Docker上进行部署，便于后续的维护与升级。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%205.png"></p><h2 id="v2raya搭建"><a href="#v2raya搭建" class="headerlink" title="v2raya搭建"></a>v2raya搭建</h2><p><strong>项目地址</strong> <a href="https://github.com/v2rayA/v2rayA">https://github.com/v2rayA/v2rayA</a></p><p>本次项目的核心负载均衡部分由开源项目v2rayA进行控制，v2rayA 是一个支持全局透明代理的 V2Ray Linux 客户端，同时兼容SS、SSR、Trojan(trojan-go)、<a href="https://github.com/esrrhs/pingtunnel">PingTunnel</a>协议。</p><h3 id="采用Docker进行部署v2rayA"><a href="#采用Docker进行部署v2rayA" class="headerlink" title="采用Docker进行部署v2rayA"></a>采用Docker进行部署v2rayA</h3><p>采用Docker进行部署。在本项目中由于我们主要将v2rayA用以对外服务，因此在部署时不采用host模式，手动进行端口的开放。我们只需要开发管理后台的2017端口以及接收x-ui面板转发socks5流量的20172端口（可自行选择更换）。也可以开放更多端口供后续其他用途。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run v2raya</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d \</span></span><br><span class="line"><span class="bash">  -p 2017:2017 \</span></span><br><span class="line"><span class="bash">  -p 20170-20172:20170-20172 \</span></span><br><span class="line"><span class="bash">  --restart=always \</span></span><br><span class="line"><span class="bash">  --name v2raya \</span></span><br><span class="line"><span class="bash">  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \</span></span><br><span class="line"><span class="bash">  -v /etc/v2raya:/etc/v2raya \</span></span><br><span class="line"><span class="bash">  mzz2017/v2raya</span></span><br></pre></td></tr></table></figure><h3 id="管理后台配置"><a href="#管理后台配置" class="headerlink" title="管理后台配置"></a>管理后台配置</h3><p>因为v2rayA的用途为节点的负载均衡，因此在设置中可以将分流关闭，对外只作为一个节点，并且将透明代理与系统代理关闭，不进行过多的流量处理。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%206.png" style="zoom:50%;" /><p>在设置中开启端口分享，在地址与端口中将socks5端口绑定到Docker部署时开放的端口。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%207.png" style="zoom:50%;" /><h3 id="节点的添加与负载均衡"><a href="#节点的添加与负载均衡" class="headerlink" title="节点的添加与负载均衡"></a>节点的添加与负载均衡</h3><p>v2rayA可以添加服务器与订阅多种使用节点的方式，点击创建为新建单节点，点击导入则为订阅。</p><p>在添加完节点与订阅后，只需点击节点后的选择，即为加入负载均衡列表中。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%208.png"></p><p>负载均衡的原理为针对每个节点进行延迟的测试，自动连接延迟最低的节点进行使用。在PROXY中可以配置延迟测试的站点，测试间隔时间。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%209.png" style="zoom:33%;" /><p>配置完成后，点击左上角运行按钮，等待显示正在运行蓝色按钮即配置完成。也可在左边栏中查看当前节点连接情况与延迟。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2010.png" style="zoom: 33%;" /><h2 id="x-ui搭建"><a href="#x-ui搭建" class="headerlink" title="x-ui搭建"></a>x-ui搭建</h2><p>x-ui为一个支持多协议多用户的xray面板，在项目中只要用作对外开放节点的管理以及将出口流量转发至v2rayA。</p><h3 id="采用Docker进行部署x-ui"><a href="#采用Docker进行部署x-ui" class="headerlink" title="采用Docker进行部署x-ui"></a>采用Docker进行部署x-ui</h3><p>在部署x-ui时，采用host模式进行部署，避免后续节点新增带来的端口映射问题。</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">mkdir x-ui &amp;&amp; cd x-ui</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd --network=host \</span></span><br><span class="line"><span class="bash">    -v <span class="variable">$PWD</span>/db/:/etc/x-ui/ \</span></span><br><span class="line"><span class="bash">    -v <span class="variable">$PWD</span>/cert/:/root/cert/ \</span></span><br><span class="line"><span class="bash">    --name x-ui --restart=unless-stopped \</span></span><br><span class="line"><span class="bash">    enwaiax/x-ui:latest</span></span><br></pre></td></tr></table></figure><p>部署完成后，访问ip:54321进行面板的访问，初始用户名与密码为admin。</p><p>登陆完成后，务必修改用户名与密码。</p><h3 id="x-ui流量转发配置"><a href="#x-ui流量转发配置" class="headerlink" title="x-ui流量转发配置"></a>x-ui流量转发配置</h3><p>此步将配置x-ui全部的出站流量转发至v2rayA中，达到采用负载均衡节点的目的。</p><p>在面板设置中的xray项目相关设置中进行设置。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;api&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;services&quot;</span>:[</span><br><span class="line">            <span class="string">&quot;HandlerService&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LoggerService&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StatsService&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;api&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;listen&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>:<span class="number">62789</span>,</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;dokodemo-door&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;api&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;outbounds&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;socks&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line">                <span class="attr">&quot;servers&quot;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;192.168.31.93&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;port&quot;</span>:<span class="number">20172</span>,</span><br><span class="line">                        <span class="attr">&quot;users&quot;</span>:[</span><br><span class="line">                            </span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;direct&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;blackhole&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;blocked&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;policy&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;system&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;statsInboundDownlink&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;statsInboundUplink&quot;</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;routing&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;rules&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;inboundTag&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;api&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;api&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;ip&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;blocked&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;domain&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geosite:cn&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;ip&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;geoip:cn&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;direct&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;blocked&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;protocol&quot;</span>:[</span><br><span class="line">                    <span class="string">&quot;bittorrent&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;stats&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心在outbounds中，进行协议的配置与目标服务器ip与端口的配置，此处填入服务器内网ip与socks5端口即可。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2011.png" style="zoom:50%;" /><h3 id="添加节点进行测试"><a href="#添加节点进行测试" class="headerlink" title="添加节点进行测试"></a>添加节点进行测试</h3><p>在入站列表进行对外节点的添加，选择vmess协议，端口随机生成，其余配置不变点击添加。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2012.png" style="zoom:50%;" /><p>可以利用软件扫描节点二维码进行连接测试。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2013.png" style="zoom:50%;" /><h2 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h2><p>在上述组件配置完成后，最后一步则是进行域名的配置，因为家宽的ip通常在72小时会进行重新拨号获取，因此采用DDNS用于动态域名解析，省去手动更换ip进行连接的使用成本。</p><p>本项目采用DDNS-Go进行动态解析。在Domains中填入需要动态解析的域名即可。IP变更通知配置可采用bark推送进行通知。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2014.png" style="zoom:50%;" /><h2 id="路由器进行端口转发并通过域名进行节点连接"><a href="#路由器进行端口转发并通过域名进行节点连接" class="headerlink" title="路由器进行端口转发并通过域名进行节点连接"></a>路由器进行端口转发并通过域名进行节点连接</h2><p>在路由器后台针对单节点进行端口转发即可用域名加端口的方式进行节点连接。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2015.png"></p><h2 id="节点监控"><a href="#节点监控" class="headerlink" title="节点监控"></a>节点监控</h2><p>采用uptimekuma进行节点的监控，采用bark进行推送。</p><p>在xui新建一个加密的sock5节点（注意⚠️：这种方式并不安全），记录信息后在uptimekuma中进行创建新监控服务。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2016.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2017.png" style="zoom:50%;" /><p>通过检测访问<a href="https://gstatic.com/generate_204">https://gstatic.com/generate_204</a>进行节点连通性的检测。</p><p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2018.png"></p><h3 id="节点通知"><a href="#节点通知" class="headerlink" title="节点通知"></a>节点通知</h3><p>采用bark进行节点状态的通知，关于推送配置可直接使用Uptime Kuma中的bark配置或BarkPush-Go进行多设备统一推送，此项目仍在完善中，请关注后续文章。</p><img src="https://raw.githubusercontent.com/hamster1963/photostore/main/new_store/Untitled%2019.png" style="zoom:33%;" /><h2 id="服务器监控"><a href="#服务器监控" class="headerlink" title="服务器监控"></a>服务器监控</h2><p>最后可以针对nas整体进行状态的监控，本项目采用哪吒探针进行监控。</p><p><a href="https://github.com/naiba/nezha">https://github.com/naiba/nezha</a></p><p><img src="https://github.com/naiba/nezha/raw/master/resource/static/brand.svg" alt="https://github.com/naiba/nezha/raw/master/resource/static/brand.svg"></p><h2 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h2><p>生命不息，折腾不止。</p><p>如有任何疑问与建议务必留言，每条留言都会用心回复。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于音乐的分享</title>
      <link href="2021/05/20/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/"/>
      <url>2021/05/20/%E9%9F%B3%E4%B9%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> Hello大家好!!!</p><p>这是我第一次尝试写下关于音乐分享的文章，很不成熟也很可能味如嚼蜡，谢谢您的谅解！！</p><div class="tag-plugin note" color="blue"><div class="body"><p>推荐歌单仅仅是个人喜好哦！</p></div></div><div class="tag-plugin note" color="dark"><div class="title"><strong>小提示</strong></div><div class="body"><p>全部歌曲都可以直接点击播放</p></div></div><h2 id="关于我喜欢的音乐风格"><a href="#关于我喜欢的音乐风格" class="headerlink" title="关于我喜欢的音乐风格"></a>关于我喜欢的音乐风格</h2><h3 id="小时候"><a href="#小时候" class="headerlink" title="小时候"></a>小时候</h3><p>对于听歌这件事主要还是小时侯家庭的影响，在我还在母亲肚子里时我父母听到别人聊天时说到听音乐也是一种“胎教”，便两个人去了我们这个小城市的音响店买了一对立式的音响和一个功放机，开始在家里播放音乐，根据后来他们所说，最早期播放的大多是古典音乐，像莫扎特、巴赫的钢琴曲和交响曲，后来觉得有些乏味，便开始播放邓丽君，陈百强，张学友的歌曲。</p>        <div id="aplayer-GLxrJbEh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GLxrJbEh"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "月亮代表我的心",              author: "邓丽君",              url: "https://music.163.com/song/media/outer/url?id=228755.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-FkOQxXXQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-FkOQxXXQ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "偏偏喜欢你",              author: "陈百强",              url: "https://music.163.com/song/media/outer/url?id=27874938.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-pzcmBEvL" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-pzcmBEvL"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "吻别",              author: "张学友",              url: "https://music.163.com/song/media/outer/url?id=190449.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>如今在我家书柜还存放着当年的CD，但也有一部分在搬家的过程中丢失了。我父母在我小时候的印象里总是会抱着一些CD回来，放进CD机等待播放，印象最深刻的是两件事，第一个便是在CD机放进CD机后并不能马上播放歌曲，因为功放机还需要一点点的“热身”，叫做热机，功放在第一次开机时会有很清脆的滴答声，而真正热身好则是在大约2分钟后有一声非常清脆的滴答声，这个时候便可以按下CD机上的播放键了。</p>        <div id="aplayer-eCcQectl" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-eCcQectl"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Blue Bossa",              author: "Eddie Higgins",              url: "https://music.163.com/song/media/outer/url?id=1307049.mp3",              pic: "https://i.loli.net/2021/04/08/FufDKxeGiPJdXNU.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>第二件印象深刻的事情便是小学每次放学坐公交车回家，常常会在走进屋子前听到里面传来的乐器声或者唱歌的人声，闷闷的，而打开门走进去的一瞬间耳朵就会被音乐包裹，如同爱丽丝掉进树洞一般，而如果开门前没有听到，估计是我做错了什么，需要提前做好挨揍的准备。我的许多音乐的来源在智能手机出现之前都是来自于家里CD所播放的音乐，还有一部分来自于《猫和老鼠》中的交响乐（哈）。</p>        <div id="aplayer-XzYkYUqP" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-XzYkYUqP"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Tom and Jerry",              author: "Bradley",              url: "https://music.163.com/song/media/outer/url?id=25962464.mp3",              pic: "https://i.loli.net/2021/04/08/UwXvYIDgdoznLMi.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="前智能手机"><a href="#前智能手机" class="headerlink" title="前智能手机"></a>前智能手机</h3><p>在智能手机之前其实还有一个小小的时代，我叫做前智能时代，印象最深的便是诺基亚的5230型号，有着如今智能手机基本的功能，但是操作起来并不是那么顺畅，屏幕是电容屏，需要用手指戳下去才能响应，也有了那个时候的特色就是触控笔。<br><img src="https://s2.loli.net/2023/05/17/JmcKdktWyu6vSMe.png" style="zoom:50%;" /></p><p>但当时可以将音乐随身放在一个手机里已经让我非常震撼了，当时传输的方式主要是用线连接电脑后传输，或者用蓝牙传输，蓝牙在那个时候可谓称得上是真正的黑科技，在电脑上选择文件，选择蓝牙传输到手机，那时候音乐的文件，大多数是acc或者mp3的文件，256k的音质，蓝牙的传输速率那时大约200k左右，传一张专辑的歌曲还是需要一点点耐心的。</p><p><img src="https://s2.loli.net/2023/05/17/sLEwe6X2G8Qcquh.png" alt="XP的蓝牙"><br>诺基亚5230陪伴了我小学期间每天放学从学校到家里的一小段路，那时候也是网络歌手充斥网络的时代，和现在不同，那时候的网络歌手并没有一个完整的团队，很多时候只有自己录制自己唱歌就发到网上去了，虽然质量比不上如今的，但是很多经典的歌曲还是留了下来。尤其是经典的网恋歌曲….</p>        <div id="aplayer-RrSnJuIC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RrSnJuIC"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "爱到花开",              author: "戊道子",              url: "https://music.163.com/song/media/outer/url?id=5244681.mp3",              pic: "https://i.loli.net/2021/04/08/jMLB9rwEWPbCF48.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>我印象里在小学三四年级天天回家听的就是这首可谓是网恋元祖歌曲哈哈哈哈，以至于在很长一段时间内听到这首歌的前奏都有点起鸡皮疙瘩的感觉…..</p><h3 id="智能手机时代"><a href="#智能手机时代" class="headerlink" title="智能手机时代"></a>智能手机时代</h3><p>在初一的时候我真正的迎来了我的第一台智能手机，那便是大名鼎鼎(以前)的台湾手机厂商HTC(火腿肠)的Incredible S，出厂预装的是安卓2.2.</p><p><img src="https://s2.loli.net/2023/05/17/tZK3hH2Cepar7AT.png" alt="htc G11"></p><p>第一个下载的软件除了QQ便是QQ音乐了，还记得第一次打开QQ音乐，主页上扑面而来的帅气男人，那肯定就是周董了</p>        <div id="aplayer-nrUSRmvk" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-nrUSRmvk"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "说好的幸福呢",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-说好的幸福呢.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-knBPgDGP" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-knBPgDGP"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "花海",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-花海.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>        <div id="aplayer-qONqFGVy" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-qONqFGVy"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "给我一首歌的时间",              author: "周杰伦",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/周杰伦-给我一首歌的时间.mp3",              pic: "https://i.loli.net/2021/04/08/aILZKwO18o92p3T.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>也是在听过周董的歌之后，我对于自己所喜欢的音乐才有了一个初步的理解，那时的我喜欢干净的音乐，在歌曲里各种乐器的位置摆放合理，不会互相打架，用尽可能少的乐器演绎出丰富的听觉效果，而在那个时候，听得最多的除了周董，便是李荣浩了。</p><p>第一次认识李荣浩是在电台里，在FM102.2深夜12点开始的节目叫做《千里共良宵》，某一次广告前的过场音乐直接抓住了我的耳朵，13年的听歌识曲并不完善，我只能尽可能的记住歌词，然后再去搜索，那时候我印象最深的一句便是“越勇敢越孤单”，这一句便让我认识了李荣浩。</p>        <div id="aplayer-GknlEllq" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GknlEllq"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "都一样",              author: "李荣浩",              url: "https://music.163.com/song/media/outer/url?id=27731172.mp3",              pic: "https://i.loli.net/2021/04/08/X6V1nOjuELw3pSF.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>那段时间向身边的同学推荐李荣浩，他们的表情就像李荣浩的眼睛一样，眯成了一条缝，那个时候没有抖音，大家听歌还是有耐心听完一整首的，大家所喜欢的风格也不同，但李荣浩在那个时候可谓时流行音乐的一个异类，前有R&amp;B教父陶喆、周董还有陈奕迅三座大山，那时候很多人说李荣浩是周杰伦加陈奕迅，也有人说李荣浩的音乐千篇一律，但是李荣浩确实闯出了一条路来。</p>        <div id="aplayer-uHOcoREm" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-uHOcoREm"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "不搭",              author: "李荣浩",              url: "https://music.163.com/song/media/outer/url?id=29764563.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/14ce36d3d539b6009f46967be350352ac75cb776.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>李荣浩最厉害的对于和声的运用，这与他多年的幕后经验是紧密相关的，许多歌曲旋律并不复杂但和声的运用使得歌曲增彩不少。</p><h3 id="吉他"><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h3><p>在初三中考完的假期内我拥有了我的第一把吉他，也就是这个时候我开始真正的不仅仅去听音乐，更想要去触碰音乐。</p>        <div id="aplayer-ZSzIqeYz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-ZSzIqeYz"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "拥抱",              author: "五月天",              url: "https://music.163.com/song/media/outer/url?id=386542.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/a8014c086e061d95bcc46a0c79f40ad162d9ca00.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>五月天的拥抱是我学习的第一首歌曲，当时是一位朋友的朋友在唱吧上唱了这一首并且分享给了我，当时第一次听到我便下定决心要学会这一首拥抱，第二天打开吉他教材，噢～好家伙，第一页就是这首歌的谱子，也就是在这样的机缘巧合下我慢慢开始学习一首又一首的歌，我也开始接触指弹。</p>        <div id="aplayer-VhwAeZCc" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-VhwAeZCc"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "LOVIN' YOU",              author: "押尾コータロー",              url: "https://music.163.com/song/media/outer/url?id=22822506.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s4716396.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>押尾桑的许多歌曲都可谓是吉他指弹入门的必练曲，到并不是因为多简单，而是因为实在是太好听了，虽然许多人都认为押尾的歌曲的难度稍低，但是如果想要完整流畅地弹奏下来还是需要多年的苦练的。而上面这一首LOVIN’ YOU则是我第一首学会弹奏的指弹曲，直到现在我也不敢说我已经可以完全无压力地弹奏下来了，每一次弹奏都为这精致的编排所震撼。</p><p>在押尾桑后我开始了解更多来自世界各地的指弹大师，首先当然是来自澳洲的<em>Tommy Emmanuel</em>，还记得第一次听到close to you的弹奏时，我根本不相信这是一把吉他所能创造的效果，各种技巧和和弦都是为了旋律服务的感觉实在是太棒了。也让我对吉他的理解更加的深刻。</p>        <div id="aplayer-iMvxGLdC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-iMvxGLdC"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Since We Met",              author: "Tommy Emmanuel",              url: "https://music.163.com/song/media/outer/url?id=2002030.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s3681710.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><img src="https://s2.loli.net/2023/05/17/46ewkH5IDc9UsBX.png" alt="Tommy Emmanuel" style="zoom:50%;" /><img src="https://s2.loli.net/2023/05/17/YDlqBuKeSksMIOP.png" alt="Tommy Emmanuel" style="zoom:50%;" /><p>当然除了Tommy Emmanuel我还尤其喜欢来自日本的伍伍慧，他极具天赋的编曲以及各种古典技巧的融合使得他的曲子听起来尤其的活泼以及有生气，他所改编的爵士名曲<em>Moon River</em>不仅仅尤其地温暖，而且其中的改编更让人如痴如醉。</p>        <div id="aplayer-ffERfFhD" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-ffERfFhD"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Moon River",              author: "伍伍慧",              url: "https://music.163.com/song/media/outer/url?id=26450089.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s27996751.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h3 id="方大同"><a href="#方大同" class="headerlink" title="方大同"></a>方大同</h3><p>终于在高中，我开始认识方大同。</p>        <div id="aplayer-JfDKUoAr" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-JfDKUoAr"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "红豆",              author: "方大同",              url: "https://m10.music.126.net/20210517202811/6dd994d699da3e242260e335e3880d91/ymusic/ff10/edf4/18cd/a81822d7d51e1de5206569eb09576e58.mp3",              pic: "https://s2.loli.net/2023/05/17/o4O1ueAUaZcvn56.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>“有时候　有时候</p><p>我会相信一切有尽头</p><p>相聚离开都有时候</p><p>没有什么会永垂不朽</p><p>可是我　有时候</p><p>宁愿选择留恋不放手</p><p>等到风景都看透</p><p>也许你会陪我看细水长流</p><p>”</p><p>那天晚上是我第一次认真听方大同的歌，回到宿舍我马上去向朋友借了一把吉他，开始弹奏方大同的红豆。也是第一次我从心底感觉原来弹唱也可以这么酷，吉他的编排可以如此抓耳朵。我一直弹一直弹，我舍友久违地说了一句：真好听啊。在那个时候我知道方大同这个男人以后应该会陪我很久很久了。</p><p>第二天在秋游的路上我也一直在耳机里不断地循环，回来的路上也是。</p><p>第二天开始我开始听方大同的其他歌曲，刚开始这并不是一个很顺畅的过程，以往的流行歌曲经验对于大同的歌曲来说并不管用，无论是旋律，和声，和弦，对于我来说都完全是崭新的，我还记得第一次听《暖》，并不觉得这首歌是我的菜，直到两天后第二次听，才发现，噢！太棒了！</p>        <div id="aplayer-hJVghgpn" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-hJVghgpn"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "暖",              author: "方大同",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/方大同-暖.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/9825bc315c6034a82b7f9283c313495409237616.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>大同的许多歌曲都是如此，有着难以言喻的前瞻性，让你在每一次重播时都觉得，这首歌太潮了！</p><p>也是因为大同，我对于音乐的理解更加深入，大同的许多音乐灵感其实是来自于他小时候所听的黑人音乐，爵士乐，放克，还有各种灵魂乐，布鲁斯以及R&amp;B。也使得他的歌曲不仅仅多元，而且极具创造性，各种即兴信手拈来。</p><p>也是在那个时候开始我开始收集方大同的专辑，像让大同的声音在音响上呈现，我第一张真正意义上的方大同发行专辑便是《橙月》。</p><img src="https://s2.loli.net/2023/05/17/pvnMTQmGIF4wV36.png" alt="Orange Moon" style="zoom: 50%;" />        <div id="aplayer-LPHBLAHW" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-LPHBLAHW"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "小小虫",              author: "方大同",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/方大同-小小虫.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/9d82d158ccbf6c81d15b405dbc3eb13533fa4012.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>随着听大同的歌曲越来越来，我发现我的耳朵也变刁了，尤其是听到流行歌曲的时候，不自主地会与大同的歌曲进行比较，如果这首歌是完完全全在套路之内的，那我大可能就把这首歌给pass掉，但如果有意料之外的旋律或者和弦就会马上吸引到我。</p><img src="https://s2.loli.net/2023/05/17/D7XYSgJZR5OpByx.png" alt="the show"  /><h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>疫情期间我开始花大量的时间去听歌，一天的时间都泡在音乐App中，巧合的是，在某一个晚上我打开YouTube，首页给我推荐了一张合辑，名字叫做睡前R&amp;B，封面是昏暗的房间，地上摆放着各种唱片，点击，便让我发现了这一位宝藏歌手。</p>        <div id="aplayer-aoIQvxeA" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aoIQvxeA"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "easy",              author: "Mac Ayres",              url: "https://music.163.com/song/media/outer/url?id=519943092.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s29520620.jpeg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>许多人评价Mac Ayres是如今被远远低估的R&amp;B歌手，我也很赞同，但他才23岁，未来可期。</p><p>这首歌还在被我用在了歌手大赛的复赛中（由于英语发音根本不标准被评委吐槽，但如果叫我评选2020年我的年度单曲，我会毫不犹豫地选择这首歌）</p><p>在疫情中我还认识了另外一位“老师”，那便是来自台湾的“李友廷老师”了</p><p>李友廷以极强的吉他演奏能力和极具个人风格的作品在台湾的综艺节目声林之王第一季夺得冠军，并在2020年底终于推出了首张个人专辑《如果你也爱我就好了》，听就好了。</p>        <div id="aplayer-RWeJZeCE" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;width:100%;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RWeJZeCE"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "直到我遇见了你",              author: "李友廷",              url: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/李友廷-直到我遇见了你.mp3",              pic: "https://cdn.jsdelivr.net/gh/hamster1963/photostore/img/s33763909.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="本月推荐歌单"><a href="#本月推荐歌单" class="headerlink" title="本月推荐歌单"></a>本月推荐歌单</h2><img src="https://s2.loli.net/2023/05/17/xB3QnjAqSsW15Do.png"  /><p>@</p><p>@@</p><p>@@@</p><p>@@@@</p><p>@@@@@</p><p>@@@@@@</p><p>@@@@@@@</p><p>@@@@@@@@</p><p>@@@@@@@@@</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>谢谢你的阅读</p><p>致敬那些漫漫长夜</p><p>谢谢ni。</p><p>2021.4.11</p>]]></content>
      
      
      <categories>
          
          <category> 音乐分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日校园自动填写表单信息脚本</title>
      <link href="2021/05/18/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%BE%85%E5%AF%BC%E5%91%98%E4%BF%A1%E6%81%AF%E8%84%9A%E6%9C%AC/"/>
      <url>2021/05/18/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%BE%85%E5%AF%BC%E5%91%98%E4%BF%A1%E6%81%AF%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢<a href="https://gitee.com/Finch1"><strong>Finch</strong></a>、<a href="https://gitee.com/lemofire"><strong>柠火</strong></a>提供的方法与思路。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在windows系统下，下载压缩包，在文件夹内部按住shift并单击右键，选择<img src="https://s2.loli.net/2023/05/17/mPrRlTjMZXz9nkc.png" alt="image-20210520110701674" style="zoom:50%;" /></p><p>在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb</span><br></pre></td></tr></table></figure><p>输入后回车即可。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>在mac系统下首先打开终端，使用cd定位到DailyAUTO文件夹。</p><p>在命令行中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb</span><br></pre></td></tr></table></figure><p>输入后回车即可。</p><h3 id="第一次使用"><a href="#第一次使用" class="headerlink" title="第一次使用"></a>第一次使用</h3><p>在第一次使用的时候会在屏幕上打印提醒</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请手动填写&#x2F;Users&#x2F;***&#x2F;Desktop&#x2F;DailyAUTO&#x2F;formdb&#x2F;910e5efaed9eaea5f146faa60c3ab47a.json，之后重新运行脚本</span><br></pre></td></tr></table></figure><p>在formdb文件夹中找到相对应的json文件，使用文本编辑器打开（推荐vscode），如果打开后发现数据都集中在一行，请单击右键单击</p><img src="https://s2.loli.net/2023/05/17/yItjk3gXmQUseDP.png" alt="image-20210520110701674" style="zoom:67%;" /><p>填写规范请查看1129.json文件。</p><p>主要修改的为select项，如果对应的为选中，则将其修改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;isSelected&quot;: 1</span><br></pre></td></tr></table></figure><p>反之则为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;isSelected&quot;: null</span><br></pre></td></tr></table></figure><p>注意是单选还是多选题，切勿在单选题中修改多项select值为1。</p><h3 id="正式运行"><a href="#正式运行" class="headerlink" title="正式运行"></a>正式运行</h3><p>再次在命令行中输入上述命令</p><p>等待程序运行，在正常情况下会首先打印学校名字及登录地址，并打印所需要填写的表单的基本信息，下一行会打印表单详细信息（你已经填写好的）。</p><p>​                                                                                            <strong>数据已经脱敏</strong></p><img src="https://s2.loli.net/2023/05/17/MzwHlJ1AKdGnU67.png" alt="image-20210520110701674" style="zoom:50%;" /><p>如果是今天的第一次填写，将会返还”SUCCESS”</p><p>如果已经填写，将会返还”该收集已填写无需再次填写”</p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>此程序仅供学习，请勿用于违法途径。</p><h2 id="文件下载地址"><a href="#文件下载地址" class="headerlink" title="文件下载地址"></a>文件下载地址</h2><p>由于法律与政策，下载地址不予显示。</p>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python，网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在搭载M1芯片的mac上使用face_recognition库实现实时人脸识别小demo</title>
      <link href="2021/05/16/M1%20%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>2021/05/16/M1%20%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        在搭载M1芯片的mac上顺利进行开发是一件不仅随缘而且需要人品的事情，不仅仅因为M1芯片的ARM架构所带来的编译方式的不同，bugsur新的文件路径系统以及时不时的抽风也使得顺利开发的路上艰难险阻。今天就来看看GitHub上大名鼎鼎的开源人脸库face_recognition如何比较顺利地在M1上跑起来且实现简单的实时人脸识别的功能。</p><div class="tag-plugin note" color="red"><div class="body"><p>由于不可描述的原因，网络环境所造成的安装失败不在本文讨论范围中。</p></div></div><h1 id="第一部分-关于环境的那点事"><a href="#第一部分-关于环境的那点事" class="headerlink" title="第一部分  关于环境的那点事"></a>第一部分  关于环境的那点事</h1><h2 id="网络环境搭建"><a href="#网络环境搭建" class="headerlink" title="网络环境搭建"></a>网络环境搭建</h2><div class="tag-plugin note" color="green"><div class="body"><p>建议进行设置省去不必要的麻烦</p></div></div><p>大部分的环境搭建与库安装需要使用终端进行，由于终端默认并不走代理的网络，</p><p>为了此后下载的顺利，先需要设置终端也可以使用代理。</p><p>首先，在当前用户根目录新建一个文件名为 .bash_profile的空白文本「. 开头文件为隐藏文件」，然后输入以下代码：</p><figure class="highlight md"><figcaption><span>.bash_profile</span></figcaption><table><tr><td class="code"><pre><span class="line">function proxy<span class="emphasis">_off()&#123;</span></span><br><span class="line"><span class="emphasis">        unset http_</span>proxy</span><br><span class="line"><span class="code">        unset https_proxy</span></span><br><span class="line"><span class="code">        unset ftp_proxy</span></span><br><span class="line"><span class="code">        unset rsync_proxy</span></span><br><span class="line"><span class="code">        echo -e &quot;已关闭代理&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="code">function proxy_on() &#123;</span></span><br><span class="line"><span class="code">        export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line"><span class="code">        export http_proxy=&quot;https://127.0.0.1:1087&quot;</span></span><br><span class="line"><span class="code">        export https_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export ftp_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export rsync_proxy=$http_proxy</span></span><br><span class="line"><span class="code">        export HTTP_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export HTTPS_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export FTP_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        export RSYNC_PROXY=$http_proxy</span></span><br><span class="line"><span class="code">        echo -e &quot;已开启代理&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>在<strong>export no_proxy</strong>与<strong>export http_proxy</strong>填入对应的本地代理服务器地址以及端口</p><p>可以在你的代理软件中查看</p><p><img src="https://s2.loli.net/2023/05/17/DQGUuVM5hx6asg2.png" alt="截屏2021-03-31 上午12.42.42.png"></p><p>将文件配置好并放在用户根目录后</p><h3 id="当让终端走代理的时候，输入："><a href="#当让终端走代理的时候，输入：" class="headerlink" title="当让终端走代理的时候，输入："></a>当让终端走代理的时候，输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source  ~&#x2F;.bash_profile</span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure><h3 id="想关闭代理的时候，输入："><a href="#想关闭代理的时候，输入：" class="headerlink" title="想关闭代理的时候，输入："></a>想关闭代理的时候，输入：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_off</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="orange"><div class="body"><p>此为一次性设置，关闭终端后失效</p></div></div><h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><h3 id="安装python最新版本"><a href="#安装python最新版本" class="headerlink" title="安装python最新版本"></a>安装python最新版本</h3><p>从python官网下载最新版本python 记得选中 <a href="https://www.python.org/ftp/python/3.9.2/python-3.9.2-macos11.pkg">macOS 64-bit universal2 installer</a></p><div class="tag-plugin note" color="black"><div class="title"><strong>下载地址</strong></div><div class="body"><p><a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a></p></div></div><p>安装完成后在终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open ~&#x2F;.bash_profile </span><br></pre></td></tr></table></figure><p>在文件中加上一行环境变量配置后保存退出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:$PATH   </span><br></pre></td></tr></table></figure><p>重新打开终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile </span><br><span class="line">python3 --version     -------注意是python3</span><br></pre></td></tr></table></figure><p>顺利的话你会在终端中看到python的版本号信息，python安装到此结束</p><h3 id="各种依赖包安装"><a href="#各种依赖包安装" class="headerlink" title="各种依赖包安装"></a>各种依赖包安装</h3><div class="tag-plugin note"><div class="title"><strong>radiation</strong></div><div class="body"><p>yellow, 头铁的可以试试直接安装 设置好终端网络代理后 在终端中输入 pip3 install face_recognition</p></div></div><p>在安装face_recognition之前我们需要安装</p><div class="tag-plugin checkbox" ><input type="checkbox"/><span>homebrew</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>miniforge</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>numpy</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>openblas</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>dlib</span></div><h3 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h3><div class="tag-plugin note" color="red"><div class="body"><p>唯一的重点是配置环境变量</p></div></div><p>下载安装过程略</p><p>安装完成后根据提示在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open ~&#x2F; .zprofile</span><br></pre></td></tr></table></figure><p>在文件中加入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval &quot;$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)&quot;</span><br></pre></td></tr></table></figure><p>保存后重启homebrew，在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew</span><br></pre></td></tr></table></figure><p>如果出现各种指令提示，证明安装成功</p><h3 id="安装miniforge"><a href="#安装miniforge" class="headerlink" title="安装miniforge"></a>安装miniforge</h3><div class="tag-plugin note" color="purple"><div class="title"><strong>注意</strong></div><div class="body"><p>鉴于M1版本的开发工具适配进程目前并不同步，所以这里使用miniforge来进行库管理</p></div></div><p>在网站中选择Apple Silicon版本下载，下载后直接运行即可</p><img src="https://s2.loli.net/2023/05/17/JFu2coavtEZB8LC.png" width="50%"><p>接下来我们需要在终端中激活</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n myenv python&#x3D;3.9 &#x2F;&#x2F;创建名为myenv，python版本为3.9的环境</span><br><span class="line">conda activate myenv &#x2F;&#x2F;激活环境</span><br></pre></td></tr></table></figure><h3 id="安装numpy"><a href="#安装numpy" class="headerlink" title="安装numpy"></a>安装numpy</h3><p>激活conda且配置好网络代理后可以直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install numpy&#x3D;1.9.14</span><br></pre></td></tr></table></figure><p>等待下载安装，安装完成后检测是否安装成功，在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><p>没报错的话就安装成功了</p><h3 id="安装openblas"><a href="#安装openblas" class="headerlink" title="安装openblas"></a>安装openblas</h3><p>激活conda且配置好网络代理后可以直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install openblas</span><br></pre></td></tr></table></figure><p>等待下载安装，安装完成后检测是否安装成功，在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> openblas</span><br></pre></td></tr></table></figure><p>没报错安装成功</p><h3 id="需要编译的库"><a href="#需要编译的库" class="headerlink" title="需要编译的库"></a>需要编译的库</h3><div class="tag-plugin checkbox" ><input type="checkbox"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox"/><span>dlib</span></div><div class="tag-plugin note" color="yellow"><div class="body"><p>这三个包如果安装失败，可以多试几次，cmake有概率编译失败</p></div></div><h3 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h3><p>点击链接下载opencv库，仅适用于M1芯片</p><p><a href="https://github.com/wizyoung/AppleSiliconSelfBuilds/blob/main/builds/opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl">opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl</a></p><p>在终端中激活环境</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate myenv &#x2F;&#x2F;激活环境</span><br></pre></td></tr></table></figure><p>定位到下载目录并安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 目录</span><br><span class="line">pip3 install opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl</span><br></pre></td></tr></table></figure><p>等待安装即可</p><h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><p>终端配置好网络代理后输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install cmake &#x2F;&#x2F;安装cmake</span><br></pre></td></tr></table></figure><h3 id="安装Dlib"><a href="#安装Dlib" class="headerlink" title="安装Dlib"></a>安装Dlib</h3><p>激活conda且配置好网络代理后直接在终端中输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install dlib </span><br></pre></td></tr></table></figure><p>安装后在终端输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;import dlib</span><br></pre></td></tr></table></figure><p>如果未报错恭喜你安装成功，我们就差最后一步了</p><p>对着检查一下吧</p><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>homebrew</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>miniforge</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>numpy</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>openblas</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>opencv</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>cmake</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>dlib</span></div><h2 id="安装face-recognition"><a href="#安装face-recognition" class="headerlink" title="安装face_recognition"></a>安装face_recognition</h2><p>激活conda且配置好网络代理后直接在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install face_recognition</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="light"><div class="body"><p>如果出现了任何错误，欢迎在评论区告诉我</p></div></div><div class="tag-plugin note" color="green"><div class="title"><strong>温馨提示</strong></div><div class="body"><p>此过程需要网络以及人品双buff叠加，请坐和放宽……</p></div></div><p>安装完成后在终端中输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> face_recognition</span><br></pre></td></tr></table></figure><p>如果没有报错证明万里长征我们已经走了一半了。</p><p>也可以使用 pip3 list 命令来查看所有已经安装的库 如图</p><p><img src="https://s2.loli.net/2023/05/17/uCx1dKmAkaMZ46l.png" alt="截屏2021-03-31 上午1.05.28.png"></p><p>到此安装告一段落</p><h1 id="第二部分-开始造轮子吧"><a href="#第二部分-开始造轮子吧" class="headerlink" title="第二部分  开始造轮子吧"></a>第二部分  开始造轮子吧</h1><p>由于安装这些依赖和库可能已经损耗你的大部分精力了，</p><p>所以接下来我们就快速地来看看怎么把这个简单的实时人脸识别跑起来吧。</p><div class="tag-plugin note" color="red"><div class="body"><p>摄像头是必须的，所以请不要关上盖子运行接下来的步骤</p></div></div><h3 id="下载py文件"><a href="#下载py文件" class="headerlink" title="下载py文件"></a>下载py文件</h3><p>从GitHub上下载</p><p><a href="https://github.com/ageitgey/face_recognition/blob/master/examples/facerec_from_webcam_faster.py">facerec_from_webcam_faster.py</a></p><h3 id="使用编辑器编辑"><a href="#使用编辑器编辑" class="headerlink" title="使用编辑器编辑"></a>使用编辑器编辑</h3><p>用你喜欢的编辑器打开，这里使用vscode示范，下面代码都是从源文件中截出，对应修改即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Load a sample picture and learn how to recognize it.</span></span><br><span class="line"></span><br><span class="line">图片人名1_image = face_recognition.load_image_file(<span class="string">&quot;把这里改成你要识别的图片的路径&quot;</span>)   </span><br><span class="line"></span><br><span class="line">图片人名1_face_encoding = face_recognition.face_encodings(图片人名1_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load a second sample picture and learn how to recognize it.</span></span><br><span class="line"></span><br><span class="line">图片人名2_image = face_recognition.load_image_file(<span class="string">&quot;把这里改成你要识别的图片2的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片人名2_face_encoding = face_recognition.face_encodings(图片人名1_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create arrays of known face encodings and their names</span></span><br><span class="line">known_face_encodings = [</span><br><span class="line">    图片人名1_face_encoding,</span><br><span class="line">    图片人名2_face_encoding</span><br><span class="line">]</span><br><span class="line">known_face_names = [</span><br><span class="line">    <span class="string">&quot;图片1所对应的全名&quot;</span>,</span><br><span class="line">    <span class="string">&quot;图片2所对应的全名&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>如图，图片1为Obama，图片2为biden</p><img src="https://s2.loli.net/2023/05/17/8GY3PlShE6OQdJ9.png" alt="WX20210328-193809@2x.png"  /><h3 id="运行一下吧！"><a href="#运行一下吧！" class="headerlink" title="运行一下吧！"></a>运行一下吧！</h3><p>打开终端，输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 &lt;将文件拖到这里或者粘贴文件的路径&gt;</span><br></pre></td></tr></table></figure><p>就像这样</p><p><img src="https://s2.loli.net/2023/05/17/jW6kPmswvN4nrXK.png" alt="WX20210328-195510@2x.png"> </p><p>按下回车等待奇迹的发生</p><p>不出意外的话，掏出你的小手机拿出一张照片或者把你的脸对准摄像头，就可以看到</p><img src="https://s2.loli.net/2023/05/17/NHzceP3gfYtynl5.png" alt="521616932197_.pic_hd.jpg" style="zoom:60%;" /><h2 id="大功告成啦！"><a href="#大功告成啦！" class="headerlink" title="大功告成啦！"></a>大功告成啦！</h2><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>总体来说跑起这个小项目还是基本没有难度的，最主要的是有稳定的网络以及足够的耐心</p><p>face_recognition这个库具有很多方向的应用，今天只是简单地入门一下，还有很多玩法可以发掘哦！</p><div class="tag-plugin note" color="dark"><div class="title"><strong>致谢</strong></div><div class="body"><p>谢谢阅读，欢迎你的留言！</p></div></div>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> macOS </tag>
            
            <tag> M1 </tag>
            
            <tag> face_recognition </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在openwrt上使用DDNSTO插件进行远程管理</title>
      <link href="2021/04/05/DDNSTO/"/>
      <url>2021/04/05/DDNSTO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin note" color="orange"><div class="body"><p>DDNSTO有付费与免费两种模式选择，免费套餐需要每隔7天手动进行一次续期</p></div></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>openwrt是目前众多路由器刷机的选择，界面美观而且插件丰富，但是有一定的上手成本，远程管理路由器在openwrt上的配置并不简单，ddnsto的出现大大降低了新手的使用成本，使用体验也十分友好。</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><div class="tag-plugin note" color="green"><div class="title"><strong>小提示</strong></div><div class="body"><p>本插件理论上适用于任何基于openwrt的原版或者第三方路由器</p></div></div><div class="tag-plugin note" color="green"><div class="body"><p>本文使用LEDE固件进行演示</p></div></div><h3 id="安装DDNSTO插件"><a href="#安装DDNSTO插件" class="headerlink" title="安装DDNSTO插件"></a>安装DDNSTO插件</h3><p>从网站中下载对应架构版本的ipk文件</p><div class="tag-plugin note" color="dark"><div class="title"><strong>下载地址</strong></div><div class="body"><p><a href="https://firmware.koolshare.cn/binary/ddnsto/openwrt/">https://firmware.koolshare.cn/binary/ddnsto/openwrt/</a></p></div></div><p>在openwrt路由器后台管理界面中安装插件</p><p>使用文件传输功能将.ipk文件上传至/tmp/upload/</p><p><img src="https://s2.loli.net/2023/05/17/VJBywGW35vdjlsU.png" alt="截屏2021-04-05 下午10.13.25.png"></p><p>上传成功后跳转至软件包页面</p><p><img src="https://s2.loli.net/2023/05/17/C58FTYhkneIKyUv.png" alt="截屏2021-04-05 下午10.15.02.png"></p><p>在下载并安装软件包输入框中输入/tmp/upload/对应的名字.ipk等待安装完成</p><p>在服务中看到DDNS.to内网穿透一栏就证明安装成功了</p><h3 id="配置DDNSTO"><a href="#配置DDNSTO" class="headerlink" title="配置DDNSTO"></a>配置DDNSTO</h3><p>打开<a href="https://www.ddnsto.com点击右上角登录后台并使用微信注册/">https://www.ddnsto.com点击右上角登录后台并使用微信注册</a></p><p>复制页面上的令牌<img src="https://s2.loli.net/2023/05/17/1E967LeiVQHPIRw.png" alt="image-20210405222125549.png"></p><p>回到路由器页面打开DDNS.to插件页面在令牌框内将复制的令牌粘贴并勾选启用，点击页面的保存&amp;应用</p><p><img src="https://s2.loli.net/2023/05/17/opkN9r28lDgy7nm.png" alt="截屏2021-04-05 下午10.23.04.png"></p><p>稍等片刻回到DDNSTO后台，你的路由器应该就会出现在页面中。</p><p>点击添加域名映射，输入你喜欢的名字并将路由器的内网地址填入并保存。</p><h2 id="使用DDNSTO"><a href="#使用DDNSTO" class="headerlink" title="使用DDNSTO"></a>使用DDNSTO</h2><p>一切配置完成后应该如图一样</p><p><img src="https://s2.loli.net/2023/05/17/3TXy4CAibBw8doF.png" alt="WX20210405-222616@2x.png"></p><p>点击给出的域名，如果可以正确跳转至路由器管理页面，恭喜你已经可以正常使用啰！SEE YOU NEXT TIME！</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用python写一个自动获取局域网ip地址并开启SS服务器的小工具</title>
      <link href="2021/03/30/%E6%A0%A1%E5%9B%AD%E7%BD%91SS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/03/30/%E6%A0%A1%E5%9B%AD%E7%BD%91SS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个学年学校把宽带运营商从之前的联通大哥哥换成了如今的电信小弟弟，使用体验可谓一落千丈，最主要的原因是电信不再像联通提供拨号上网的账号和密码，改成了强制使用天翼校园的程序来进行认证上网，而且限制只能一台设备在线，这直接搞垮了宿舍内的一堆需要联网的设备，首先想到的是通过电脑先连接在共享给路由器，感谢这位兄弟提供的方法@<a href="https://blog.csdn.net/cbcrzcbc/article/details/108612445?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161707454916780271558206%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161707454916780271558206&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-108612445.pc_search_result_no_baidu_js&utm_term=%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD">task138</a>，但是转念一想，既然学校内覆盖了校园网，那是否可以使用电脑搭建服务器从而达到在校园网范围内手机或者iPad都可以上网呢?这就是今天讨论的方法。</p><div class="tag-plugin note" color="red"><div class="body"><p>此方法仅限交流，请勿在保密场所使用</p></div></div><div class="tag-plugin note" color="green"><div class="body"><p>目前仅适用于Windows</p></div></div><div class="tag-plugin note" color="dark"><div class="title"><strong>源码:</strong></div><div class="body"><p><a href="https://github.com/hamster1963/-SS-">https://github.com/hamster1963/-SS-</a></p></div></div><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>自动获取本机局域网地址并写入配置文件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>自动获取本机局域网地址并写入配置文件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>开启时显示各项配置参数，帮助使用者配置代理软件</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>开启SS代理服务器，出错时显示错误弹窗</span></div><h2 id="原理与改进"><a href="#原理与改进" class="headerlink" title="原理与改进"></a>原理与改进</h2><p>开启SS代理服务器部分参考了GitHub上的<a href="https://github.com/shadowsocks/libQtShadowsocks">shadowsocks-libqss</a>项目，需要使用者手动填写config文件，使用起来学习成本有一点高，且如果没有成功运行也没有错误提示，所以使用python编写一个小脚本改进一下，以达到上述的功能。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="windows开启服务器"><a href="#windows开启服务器" class="headerlink" title="windows开启服务器"></a>windows开启服务器</h3><p>想开启SS代理服务器十分简单，如果不想更改默认的端口、密码、加密方式，可以直接双击使用 开启SS代理服务器.exe，打开后根据弹窗配置自己的代理软件，安卓小飞机，苹果小火箭，windows使用clash，macOS使用surge。</p><p>一切顺利后应该是这样的界面</p><p><img src="https://s2.loli.net/2023/05/17/xkFOngzIiB5LEJG.png"></p><h3 id="ios使用小火箭连接"><a href="#ios使用小火箭连接" class="headerlink" title="ios使用小火箭连接"></a>ios使用小火箭连接</h3><p>在小火箭中点击右上角加号，类型选择Shadowsocks，根据配置弹窗中的信息，填入相关配置，混淆与插件为空。如图:</p><img src="https://s2.loli.net/2023/05/17/eWn7lYDuPB1XJ69.png" alt="IMG_42143F5BF2D2-1.jpeg" style="zoom:33%;" /><h3 id="macos使用surge连接"><a href="#macos使用surge连接" class="headerlink" title="macos使用surge连接"></a>macos使用surge连接</h3><p>打开surge面板，在策略中选择添加</p><img src="https://s2.loli.net/2023/05/17/ID4YgcboJdkURFX.png" alt="截屏2021-03-31 上午12.43.35.png" style="zoom: 67%;" /><p>填入配置信息，出站选择全局代理即可</p><img src="https://s2.loli.net/2023/05/17/mgIoqMwSjnZrKQ4.png" alt="截屏2021-03-31 上午12.44.03.png" style="zoom:67%;" /><p><img src="https://s2.loli.net/2023/05/17/SXMNRaEvmTlju4t.png"></p><p>surge教程到此结束</p><h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><p>我们的目标其实很简单，就是获取当前IP地址并且写入到config文件中，并在启动服务器时有弹窗包含主要配置信息提醒用户。</p><h3 id="获取ip地址"><a href="#获取ip地址" class="headerlink" title="获取ip地址"></a>获取ip地址</h3><p>这是一个很通用的获取本机局域网ip地址的方法，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取实时IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询本机ip地址</span></span><br><span class="line"><span class="string">    :return: ip</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br></pre></td></tr></table></figure><h3 id="将ip地址写入配置文件"><a href="#将ip地址写入配置文件" class="headerlink" title="将ip地址写入配置文件"></a>将ip地址写入配置文件</h3><p>配置文件的类型是json，在python中我们可以很轻松地修改json文件内的值，只需要知道key和value的对应关系即可，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将IP地址写入json文件</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    data[<span class="string">&#x27;server&#x27;</span>] = get_host_ip() <span class="comment"># &lt;--- 添加实时ip地址.</span></span><br><span class="line"></span><br><span class="line">os.remove(filename)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>由于上面的 get_host_ip()是直接返还ip地址的，所以在server的value部分我们直接使用get_host_ip()即可。</p><h3 id="读取基础配置信息"><a href="#读取基础配置信息" class="headerlink" title="读取基础配置信息"></a>读取基础配置信息</h3><p>在开屏弹窗中我们需要显示基本信息，所以我们先需要读取json文件内的我们需要的value值，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取json 获取端口/密码/加密方式</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    a = data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    b = data[<span class="string">&#x27;server_port&#x27;</span>]</span><br><span class="line">    c = data[<span class="string">&#x27;method&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><p>弹窗使用的是tkinter库，语法也十分简单，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>():</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;你的ip地址是&quot;</span> + get_host_ip()+<span class="string">&quot;\n你的端口号是&quot;</span>+<span class="built_in">str</span>(b)+<span class="string">&quot;\n你的密码是&quot;</span> + a + <span class="string">&quot;\n加密方式是&quot;</span>+ c +<span class="string">&quot;\n请勿关闭cmd窗口&quot;</span>)</span><br></pre></td></tr></table></figure><p>实现界面如图</p><img src="https://s2.loli.net/2023/05/17/4lzSGF9ZgBIVTL3.png" alt="截屏2021-03-31 上午12.39.39.png" style="zoom:50%;" /><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>基本的小组件都写好了我们最后就把积木拼成小车车🚗就可以了,加入检测是否运行成功的弹窗，代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主程序</span></span><br><span class="line">netopen = threading.Thread(target=runserver)<span class="comment">#, daemon=True)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    netopen.start()</span><br><span class="line">    <span class="keyword">if</span> netopen.is_alive() == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#弹窗显示</span></span><br><span class="line">        talk()</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;欢迎&quot;</span>,<span class="string">&quot;开启成功,如需退出请关闭cmd窗口&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>  netopen.is_alive() == <span class="literal">False</span>:</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;退出&quot;</span>,<span class="string">&quot;服务已退出，请检查配置&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><div class="tag-plugin note"><div class="title"><strong>quote,</strong></div><div class="body"><p>由于我们是调用了外部的程序，所以这里使用线程监控来实现检测服务器程序是否正确运行。</p></div></div><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>完整源码如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化弹窗</span></span><br><span class="line">root = tkinter.Tk()</span><br><span class="line">root.withdraw()</span><br><span class="line">root.wm_attributes(<span class="string">&#x27;-topmost&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取实时IP地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询本机ip地址</span></span><br><span class="line"><span class="string">    :return: ip</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"><span class="comment">#将IP地址写入json文件</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    data[<span class="string">&#x27;server&#x27;</span>] = get_host_ip() <span class="comment"># &lt;--- 添加实时ip地址.</span></span><br><span class="line"></span><br><span class="line">os.remove(filename)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取json 获取端口/密码/加密方式</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;config.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    a = data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    b = data[<span class="string">&#x27;server_port&#x27;</span>]</span><br><span class="line">    c = data[<span class="string">&#x27;method&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runserver</span>():</span></span><br><span class="line">    os.system(<span class="string">&#x27;shadowsocks-server.bat&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>():</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">&quot;提示&quot;</span>,<span class="string">&quot;你的ip地址是&quot;</span> + get_host_ip()+<span class="string">&quot;\n你的端口号是&quot;</span>+<span class="built_in">str</span>(b)+<span class="string">&quot;\n你的密码是&quot;</span> + a + <span class="string">&quot;\n加密方式是&quot;</span>+ c +<span class="string">&quot;\n请勿关闭cmd窗口&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#主程序</span></span><br><span class="line">netopen = threading.Thread(target=runserver)<span class="comment">#, daemon=True)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    netopen.start()</span><br><span class="line">    <span class="keyword">if</span> netopen.is_alive() == <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#弹窗显示</span></span><br><span class="line">        talk()</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;欢迎&quot;</span>,<span class="string">&quot;开启成功,如需退出请关闭cmd窗口&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>  netopen.is_alive() == <span class="literal">False</span>:</span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">&quot;退出&quot;</span>,<span class="string">&quot;服务已退出，请检查配置&quot;</span>)</span><br></pre></td></tr></table></figure><p>逻辑还是比较简单的，基本就是在调用不同的组件，但是成品还是很不错的，大大降低了学习和使用成本。</p><h2 id="最后想说的话"><a href="#最后想说的话" class="headerlink" title="最后想说的话"></a>最后想说的话</h2><p>这个方法对于校园网来说只能算是另辟蹊径，并没有完全从根本上解决问题，如果天翼校园的客户端能写得好一点，连接设备数能放宽一点，想必会受到更多学生的接纳。See you next time！欢迎评论！</p>]]></content>
      
      
      <categories>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> python </tag>
            
            <tag> 服务器 </tag>
            
            <tag> SS </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
