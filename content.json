{"meta":{"title":"仓鼠杂货铺","subtitle":"Hamster","description":"sec place","author":"Hamster","url":"http://notion.laixinly.top","root":"/"},"pages":[{"title":"所有标签","date":"2021-05-16T07:21:56.468Z","updated":"2021-04-01T02:43:17.213Z","comments":true,"path":"tags/index.html","permalink":"http://notion.laixinly.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-17T13:39:06.869Z","updated":"2021-05-16T16:37:23.975Z","comments":true,"path":"about/index.html","permalink":"http://notion.laixinly.top/about/index.html","excerpt":"","text":"I think music is my favorite stuff.大家好，我是一个普普通通平平无奇的大二学生文章项目GitHub 关于我关于我 你知道什么 –《关于我》 关于我建站史我是谁我是刚刚过了20岁生日的伪文艺青年坐标南方爱好吉他和听别人弹吉他我也对数学感到头疼但仍在吃力挣扎穷不吃香菜和大葱，吃了可能会见上帝（逃 2021 友链页面搭建服务器使用VPS 2021-5-16 为了更易阅读与轻量化考量，换用主题Stellar 2021-03-31 使用CDN加速网站静态资源访问,提高响应速度 2021-03-05 使用vercel+coding加速网站访问 2021-03-02 完成关于页面的搭建（你现在看到的这个页面）小工具添加查看服务器状态 2021-03-01 完善菜单以及下拉栏布局添加搜索功能评论功能搭建 2021-02-28 使用Volantis主题构建页面完善页面布局完善小工具的跳转以及使用使用去不图床加快页面图片加载速度 2021-02-27 初步完成服务器以及页面的搭建使用githubpages承载，将来国内访问使用vercel加速"},{"title":"","date":"2021-05-16T07:21:56.465Z","updated":"2021-02-27T18:52:40.000Z","comments":true,"path":"mylist/index.html","permalink":"http://notion.laixinly.top/mylist/index.html","excerpt":"","text":""},{"title":"SS Server For School","date":"2021-05-17T13:17:41.392Z","updated":"2021-05-17T13:17:41.384Z","comments":true,"path":"wiki/SS Server For School/index.html","permalink":"http://notion.laixinly.top/wiki/SS%20Server%20For%20School/index.html","excerpt":"","text":"这是一个下载页面这是一个主要为校园网环境编写的小工具。文章程序下载GitHub源码"},{"title":"应用程序","date":"2021-05-17T12:38:47.223Z","updated":"2021-05-17T12:38:47.214Z","comments":true,"path":"wiki/categories/App/index.html","permalink":"http://notion.laixinly.top/wiki/categories/App/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2021-05-16T07:21:56.470Z","updated":"2021-02-27T18:49:38.000Z","comments":true,"path":"categories/index.html","permalink":"http://notion.laixinly.top/categories/index.html","excerpt":"","text":""},{"title":"Daily CP","date":"2021-05-20T04:06:31.861Z","updated":"2021-05-20T03:45:08.231Z","comments":true,"path":"wiki/Daily CP/index.html","permalink":"http://notion.laixinly.top/wiki/Daily%20CP/index.html","excerpt":"","text":"这是一个下载页面这是一个主要为今日校园每日表单信息自动填写的小工具。文章程序下载(抱歉,暂不提供)"},{"title":"Demo 储藏室","date":"2021-05-30T10:17:50.322Z","updated":"2021-05-30T10:17:50.311Z","comments":true,"path":"wiki/Demo Store/index.html","permalink":"http://notion.laixinly.top/wiki/Demo%20Store/index.html","excerpt":"","text":"关于我关于我 你知道什么 –《关于我》 这是一个Demo储藏室 2021.5.30下午15:00Sometimes-Mac Ayres var ap = new APlayer({ element: document.getElementById(\"aplayer-WEyVFSyA\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Sometimes\", author: \"Mac Ayres\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/47.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2021.5.15下午15:00Somebody new-Mac Ayres var ap = new APlayer({ element: document.getElementById(\"aplayer-NiWilrWY\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"Somebody new\", author: \"Mac Ayres\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/1st%20demo.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 中午13:00I’ll be your home now-Mac Ayres var ap = new APlayer({ element: document.getElementById(\"aplayer-nxWjIdBz\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"I'll be your home now\", author: \"Mac Ayres\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/be%20your%20home%20now.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2021.5.15晚上23:00黑洞里-方大同 var ap = new APlayer({ element: document.getElementById(\"aplayer-mvxzeGlb\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"黑洞里\", author: \"方大同\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/black.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2021.4.26凌晨1:00nothing var ap = new APlayer({ element: document.getElementById(\"aplayer-aQCxBkuB\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"nothing\", author: \"s\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/nothing.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2021.4.26晚上21:00en var ap = new APlayer({ element: document.getElementById(\"aplayer-qfkgQuEU\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"en?\", author: \"hamster\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/en.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.12.10晚上21:00难过到这边就好 var ap = new APlayer({ element: document.getElementById(\"aplayer-kyoKrlWx\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"难过到这边就好\", author: \"李友廷\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/nanguo.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.12.2晚上22:00麦香鱼 var ap = new APlayer({ element: document.getElementById(\"aplayer-AByWMAKR\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"麦香鱼\", author: \"李友廷\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/fish.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.12.2晚上22:00宇宙小姐 var ap = new APlayer({ element: document.getElementById(\"aplayer-lSBgiAiw\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"宇宙小姐\", author: \"李友廷\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/Lady.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.8.11晚上22:00rnb all night var ap = new APlayer({ element: document.getElementById(\"aplayer-TzogsUZA\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"rnb all night\", author: \"Lester\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/rnb%20all%20night.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.8.7凌晨3:00three o var ap = new APlayer({ element: document.getElementById(\"aplayer-GhuYFhGJ\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"three o\", author: \"cangshu\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/three.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.8.7凌晨1:00拥抱 var ap = new APlayer({ element: document.getElementById(\"aplayer-KjrUwKdP\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"拥抱\", author: \"l&h\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/hold.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.6.26凌晨1:00慢慢喜欢你 var ap = new APlayer({ element: document.getElementById(\"aplayer-WMDttJfl\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"慢慢喜欢你\", author: \"hamster\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/love.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.5.27晚上21:00love song var ap = new APlayer({ element: document.getElementById(\"aplayer-OvKReQQn\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"love song\", author: \"hamster\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/lovesong.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 2020.4.1晚上25:00说谎 var ap = new APlayer({ element: document.getElementById(\"aplayer-etPiGjkx\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"说谎\", author: \"LLX\", url: \"https://cdn.jsdelivr.net/gh/hamster1963/photostore/musicstore/lie.m4a\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);"},{"title":"Python","date":"2021-05-20T04:13:11.332Z","updated":"2021-05-20T04:06:44.885Z","comments":true,"path":"wiki/categories/Python/index.html","permalink":"http://notion.laixinly.top/wiki/categories/Python/index.html","excerpt":"","text":""},{"title":"Demo储藏室","date":"2021-05-30T10:11:25.714Z","updated":"2021-05-17T12:56:45.663Z","comments":true,"path":"wiki/categories/Music/index.html","permalink":"http://notion.laixinly.top/wiki/categories/Music/index.html","excerpt":"","text":""}],"posts":[{"title":"今日校园自动填写表单信息脚本","slug":"今日校园自动填写辅导员信息脚本","date":"2021-05-20T02:55:53.187Z","updated":"2021-05-20T04:01:45.982Z","comments":true,"path":"2021/05/20/今日校园自动填写辅导员信息脚本/","link":"","permalink":"http://notion.laixinly.top/2021/05/20/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%BE%85%E5%AF%BC%E5%91%98%E4%BF%A1%E6%81%AF%E8%84%9A%E6%9C%AC/","excerpt":"","text":"致谢感谢Finch、柠火提供的方法与思路。 使用方法Windows在windows系统下，下载压缩包，在文件夹内部按住shift并单击右键，选择 在命令行中输入 python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径 例如 python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb 输入后回车即可。 macOS在mac系统下首先打开终端，使用cd定位到DailyAUTO文件夹。 在命令行中输入 python3 DailyCP.py 学校全名 学号 密码 定位地址 formdb文件夹绝对路径 例如 python3 DailyCP.py xx大学 3****9 d***4 广*******路 &#x2F;Users&#x2F;*****&#x2F;Desktop&#x2F;Campus-master&#x2F;formdb 输入后回车即可。 第一次使用在第一次使用的时候会在屏幕上打印提醒 请手动填写&#x2F;Users&#x2F;***&#x2F;Desktop&#x2F;DailyAUTO&#x2F;formdb&#x2F;910e5efaed9eaea5f146faa60c3ab47a.json，之后重新运行脚本 在formdb文件夹中找到相对应的json文件，使用文本编辑器打开（推荐vscode），如果打开后发现数据都集中在一行，请单击右键单击 填写规范请查看1129.json文件。 主要修改的为select项，如果对应的为选中，则将其修改为 &quot;isSelected&quot;: 1 反之则为 &quot;isSelected&quot;: null 注意是单选还是多选题，切勿在单选题中修改多项select值为1。 正式运行再次在命令行中输入上述命令 等待程序运行，在正常情况下会首先打印学校名字及登录地址，并打印所需要填写的表单的基本信息，下一行会打印表单详细信息（你已经填写好的）。 ​ 数据已经脱敏 如果是今天的第一次填写，将会返还”SUCCESS” 如果已经填写，将会返还”该收集已填写无需再次填写” 警告此程序仅供学习，请勿用于违法途径。 文件下载地址由于法律与政策，下载地址不予显示。","categories":[{"name":"python开发","slug":"python开发","permalink":"http://notion.laixinly.top/categories/python%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"python，网络","slug":"python，网络","permalink":"http://notion.laixinly.top/tags/python%EF%BC%8C%E7%BD%91%E7%BB%9C/"}],"author":"Hamster"},{"title":"在openwrt上使用DDNSTO插件进行远程管理","slug":"DDNSTO","date":"2021-04-04T16:00:00.000Z","updated":"2021-05-17T01:19:58.284Z","comments":true,"path":"2021/04/05/DDNSTO/","link":"","permalink":"http://notion.laixinly.top/2021/04/05/DDNSTO/","excerpt":"","text":"DDNSTO有付费与免费两种模式选择，免费套餐需要每隔7天手动进行一次续期 前言openwrt是目前众多路由器刷机的选择，界面美观而且插件丰富，但是有一定的上手成本，远程管理路由器在openwrt上的配置并不简单，ddnsto的出现大大降低了新手的使用成本，使用体验也十分友好。 使用教程小提示本插件理论上适用于任何基于openwrt的原版或者第三方路由器 本文使用LEDE固件进行演示 安装DDNSTO插件从网站中下载对应架构版本的ipk文件 下载地址https://firmware.koolshare.cn/binary/ddnsto/openwrt/ 在openwrt路由器后台管理界面中安装插件 使用文件传输功能将.ipk文件上传至/tmp/upload/ 上传成功后跳转至软件包页面 在下载并安装软件包输入框中输入/tmp/upload/对应的名字.ipk等待安装完成 在服务中看到DDNS.to内网穿透一栏就证明安装成功了 配置DDNSTO打开https://www.ddnsto.com点击右上角登录后台并使用微信注册 复制页面上的令牌 回到路由器页面打开DDNS.to插件页面在令牌框内将复制的令牌粘贴并勾选启用，点击页面的保存&amp;应用 稍等片刻回到DDNSTO后台，你的路由器应该就会出现在页面中。 点击添加域名映射，输入你喜欢的名字并将路由器的内网地址填入并保存。 使用DDNSTO一切配置完成后应该如图一样 点击给出的域名，如果可以正确跳转至路由器管理页面，恭喜你已经可以正常使用啰！SEE YOU NEXT TIME！","categories":[{"name":"openwrt","slug":"openwrt","permalink":"http://notion.laixinly.top/categories/openwrt/"}],"tags":[{"name":"openwrt","slug":"openwrt","permalink":"http://notion.laixinly.top/tags/openwrt/"},{"name":"内网穿透","slug":"内网穿透","permalink":"http://notion.laixinly.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}],"author":"Hamster"},{"title":"利用python写一个自动获取局域网ip地址并开启SS服务器的小工具","slug":"校园网SS服务器","date":"2021-03-30T02:29:32.648Z","updated":"2021-05-17T01:49:25.863Z","comments":true,"path":"2021/03/30/校园网SS服务器/","link":"","permalink":"http://notion.laixinly.top/2021/03/30/%E6%A0%A1%E5%9B%AD%E7%BD%91SS%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"前言这个学年学校把宽带运营商从之前的联通大哥哥换成了如今的电信小弟弟，使用体验可谓一落千丈，最主要的原因是电信不再像联通提供拨号上网的账号和密码，改成了强制使用天翼校园的程序来进行认证上网，而且限制只能一台设备在线，这直接搞垮了宿舍内的一堆需要联网的设备，首先想到的是通过电脑先连接在共享给路由器，感谢这位兄弟提供的方法@task138，但是转念一想，既然学校内覆盖了校园网，那是否可以使用电脑搭建服务器从而达到在校园网范围内手机或者iPad都可以上网呢?这就是今天讨论的方法。 此方法仅限交流，请勿在保密场所使用 目前仅适用于Windows 源码:https://github.com/hamster1963/-SS- 实现效果自动获取本机局域网地址并写入配置文件 自动获取本机局域网地址并写入配置文件 开启时显示各项配置参数，帮助使用者配置代理软件 开启SS代理服务器，出错时显示错误弹窗 原理与改进开启SS代理服务器部分参考了GitHub上的shadowsocks-libqss项目，需要使用者手动填写config文件，使用起来学习成本有一点高，且如果没有成功运行也没有错误提示，所以使用python编写一个小脚本改进一下，以达到上述的功能。 使用方法windows开启服务器想开启SS代理服务器十分简单，如果不想更改默认的端口、密码、加密方式，可以直接双击使用 开启SS代理服务器.exe，打开后根据弹窗配置自己的代理软件，安卓小飞机，苹果小火箭，windows使用clash，macOS使用surge。 一切顺利后应该是这样的界面 ios使用小火箭连接在小火箭中点击右上角加号，类型选择Shadowsocks，根据配置弹窗中的信息，填入相关配置，混淆与插件为空。如图: macos使用surge连接打开surge面板，在策略中选择添加 填入配置信息，出站选择全局代理即可 surge教程到此结束 程序编写我们的目标其实很简单，就是获取当前IP地址并且写入到config文件中，并在启动服务器时有弹窗包含主要配置信息提醒用户。 获取ip地址这是一个很通用的获取本机局域网ip地址的方法，代码如下: #获取实时IP地址def get_host_ip(): &quot;&quot;&quot; 查询本机ip地址 :return: ip &quot;&quot;&quot; try: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect((&#x27;8.8.8.8&#x27;, 80)) ip = s.getsockname()[0] finally: s.close() return ip 将ip地址写入配置文件配置文件的类型是json，在python中我们可以很轻松地修改json文件内的值，只需要知道key和value的对应关系即可，代码如下: #将IP地址写入json文件filename = &#x27;config.json&#x27;with open(filename, &#x27;r&#x27;) as f: data = json.load(f) data[&#x27;server&#x27;] = get_host_ip() # &lt;--- 添加实时ip地址.os.remove(filename)with open(filename, &#x27;w&#x27;) as f: json.dump(data, f, indent=4) 由于上面的 get_host_ip()是直接返还ip地址的，所以在server的value部分我们直接使用get_host_ip()即可。 读取基础配置信息在开屏弹窗中我们需要显示基本信息，所以我们先需要读取json文件内的我们需要的value值，代码如下: #读取json 获取端口/密码/加密方式filename = &#x27;config.json&#x27;with open(filename, &#x27;r&#x27;) as f: data = json.load(f) a = data[&#x27;password&#x27;] b = data[&#x27;server_port&#x27;] c = data[&#x27;method&#x27;] 弹窗弹窗使用的是tkinter库，语法也十分简单，代码如下: def talk(): tkinter.messagebox.showinfo(&quot;提示&quot;,&quot;你的ip地址是&quot; + get_host_ip()+&quot;\\n你的端口号是&quot;+str(b)+&quot;\\n你的密码是&quot; + a + &quot;\\n加密方式是&quot;+ c +&quot;\\n请勿关闭cmd窗口&quot;) 实现界面如图 主程序基本的小组件都写好了我们最后就把积木拼成小车车🚗就可以了,加入检测是否运行成功的弹窗，代码如下: #主程序netopen = threading.Thread(target=runserver)#, daemon=True)if __name__==&#x27;__main__&#x27;: netopen.start() if netopen.is_alive() == True: #弹窗显示 talk() tkinter.messagebox.showinfo(&quot;欢迎&quot;,&quot;开启成功,如需退出请关闭cmd窗口&quot;) if netopen.is_alive() == False: tkinter.messagebox.showinfo(&quot;退出&quot;,&quot;服务已退出，请检查配置&quot;) quote,由于我们是调用了外部的程序，所以这里使用线程监控来实现检测服务器程序是否正确运行。 大功告成完整源码如下 import jsonimport osimport socketimport tkinterimport tkinter.messageboxfrom threading import Threadimport threading#初始化弹窗root = tkinter.Tk()root.withdraw()root.wm_attributes(&#x27;-topmost&#x27;,1)#获取实时IP地址def get_host_ip(): &quot;&quot;&quot; 查询本机ip地址 :return: ip &quot;&quot;&quot; try: s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect((&#x27;8.8.8.8&#x27;, 80)) ip = s.getsockname()[0] finally: s.close() return ip#将IP地址写入json文件filename = &#x27;config.json&#x27;with open(filename, &#x27;r&#x27;) as f: data = json.load(f) data[&#x27;server&#x27;] = get_host_ip() # &lt;--- 添加实时ip地址.os.remove(filename)with open(filename, &#x27;w&#x27;) as f: json.dump(data, f, indent=4)#读取json 获取端口/密码/加密方式filename = &#x27;config.json&#x27;with open(filename, &#x27;r&#x27;) as f: data = json.load(f) a = data[&#x27;password&#x27;] b = data[&#x27;server_port&#x27;] c = data[&#x27;method&#x27;]def runserver(): os.system(&#x27;shadowsocks-server.bat&#x27;)def talk(): tkinter.messagebox.showinfo(&quot;提示&quot;,&quot;你的ip地址是&quot; + get_host_ip()+&quot;\\n你的端口号是&quot;+str(b)+&quot;\\n你的密码是&quot; + a + &quot;\\n加密方式是&quot;+ c +&quot;\\n请勿关闭cmd窗口&quot;) #主程序netopen = threading.Thread(target=runserver)#, daemon=True)if __name__==&#x27;__main__&#x27;: netopen.start() if netopen.is_alive() == True: #弹窗显示 talk() tkinter.messagebox.showinfo(&quot;欢迎&quot;,&quot;开启成功,如需退出请关闭cmd窗口&quot;) if netopen.is_alive() == False: tkinter.messagebox.showinfo(&quot;退出&quot;,&quot;服务已退出，请检查配置&quot;) 逻辑还是比较简单的，基本就是在调用不同的组件，但是成品还是很不错的，大大降低了学习和使用成本。 最后想说的话这个方法对于校园网来说只能算是另辟蹊径，并没有完全从根本上解决问题，如果天翼校园的客户端能写得好一点，连接设备数能放宽一点，想必会受到更多学生的接纳。See you next time！欢迎评论！","categories":[{"name":"python开发","slug":"python开发","permalink":"http://notion.laixinly.top/categories/python%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"python","slug":"python","permalink":"http://notion.laixinly.top/tags/python/"},{"name":"服务器","slug":"服务器","permalink":"http://notion.laixinly.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"SS","slug":"SS","permalink":"http://notion.laixinly.top/tags/SS/"},{"name":"校园网","slug":"校园网","permalink":"http://notion.laixinly.top/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/"},{"name":"网络","slug":"网络","permalink":"http://notion.laixinly.top/tags/%E7%BD%91%E7%BB%9C/"}],"author":"Hamster"},{"title":"在搭载M1芯片的mac上使用face_recognition库实现实时人脸识别小demo","slug":"M1 人脸识别","date":"2021-03-27T14:47:55.207Z","updated":"2021-05-17T01:39:03.688Z","comments":true,"path":"2021/03/27/M1 人脸识别/","link":"","permalink":"http://notion.laixinly.top/2021/03/27/M1%20%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/","excerpt":"","text":"前言​ 在搭载M1芯片的mac上顺利进行开发是一件不仅随缘而且需要人品的事情，不仅仅因为M1芯片的ARM架构所带来的编译方式的不同，bugsur新的文件路径系统以及时不时的抽风也使得顺利开发的路上艰难险阻。今天就来看看GitHub上大名鼎鼎的开源人脸库face_recognition如何比较顺利地在M1上跑起来且实现简单的实时人脸识别的功能。 由于不可描述的原因，网络环境所造成的安装失败不在本文讨论范围中。 第一部分 关于环境的那点事网络环境搭建建议进行设置省去不必要的麻烦 大部分的环境搭建与库安装需要使用终端进行，由于终端默认并不走代理的网络， 为了此后下载的顺利，先需要设置终端也可以使用代理。 首先，在当前用户根目录新建一个文件名为 .bash_profile的空白文本「. 开头文件为隐藏文件」，然后输入以下代码： .bash_profilefunction proxy_off()&#123; unset http_proxy unset https_proxy unset ftp_proxy unset rsync_proxy echo -e &quot;已关闭代理&quot;&#125; function proxy_on() &#123; export no_proxy=&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot; export http_proxy=&quot;http://127.0.0.1:1087&quot; export https_proxy=$http_proxy export ftp_proxy=$http_proxy export rsync_proxy=$http_proxy export HTTP_PROXY=$http_proxy export HTTPS_PROXY=$http_proxy export FTP_PROXY=$http_proxy export RSYNC_PROXY=$http_proxy echo -e &quot;已开启代理&quot;&#125; 在export no_proxy与export http_proxy填入对应的本地代理服务器地址以及端口 可以在你的代理软件中查看 将文件配置好并放在用户根目录后 当让终端走代理的时候，输入：source ~&#x2F;.bash_profileproxy_on 想关闭代理的时候，输入：proxy_off 此为一次性设置，关闭终端后失效 基本环境搭建安装python最新版本从python官网下载最新版本python 记得选中 macOS 64-bit universal2 installer 下载地址https://www.python.org/downloads/mac-osx/ 安装完成后在终端输入 open ~&#x2F;.bash_profile 在文件中加上一行环境变量配置后保存退出 export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:$PATH 重新打开终端输入 source ~&#x2F;.bash_profile python3 --version -------注意是python3 顺利的话你会在终端中看到python的版本号信息，python安装到此结束 各种依赖包安装radiationyellow, 头铁的可以试试直接安装 设置好终端网络代理后 在终端中输入 pip3 install face_recognition 在安装face_recognition之前我们需要安装 homebrew miniforge numpy openblas opencv cmake dlib 安装homebrew唯一的重点是配置环境变量 下载安装过程略 安装完成后根据提示在终端中输入 open ~&#x2F; .zprofile 在文件中加入 eval &quot;$(&#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F;brew shellenv)&quot; 保存后重启homebrew，在终端中输入 brew 如果出现各种指令提示，证明安装成功 安装miniforge注意鉴于M1版本的开发工具适配进程目前并不同步，所以这里使用miniforge来进行库管理 在网站中选择Apple Silicon版本下载，下载后直接运行即可 接下来我们需要在终端中激活 conda create -n myenv python&#x3D;3.9 &#x2F;&#x2F;创建名为myenv，python版本为3.9的环境conda activate myenv &#x2F;&#x2F;激活环境 安装numpy激活conda且配置好网络代理后可以直接在终端中输入 pip3 install numpy&#x3D;1.9.14 等待下载安装，安装完成后检测是否安装成功，在终端中输入 python3&gt;&gt;&gt;import numpy 没报错的话就安装成功了 安装openblas激活conda且配置好网络代理后可以直接在终端中输入 pip3 install openblas 等待下载安装，安装完成后检测是否安装成功，在终端中输入 python3 &gt;&gt;&gt;import openblas 没报错安装成功 需要编译的库opencv cmake dlib 这三个包如果安装失败，可以多试几次，cmake有概率编译失败 安装opencv点击链接下载opencv库，仅适用于M1芯片 opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl 在终端中激活环境 conda activate myenv &#x2F;&#x2F;激活环境 定位到下载目录并安装 cd 目录pip3 install opencv_contrib_python-4.5.0+bbaa777-cp39-cp39-macosx_11_0_arm64.whl 等待安装即可 安装cmake终端配置好网络代理后输入 brew install cmake &#x2F;&#x2F;安装cmake 安装Dlib激活conda且配置好网络代理后直接在终端中输入 pip3 install dlib 安装后在终端输入 python3&gt;&gt;&gt;import dlib 如果未报错恭喜你安装成功，我们就差最后一步了 对着检查一下吧 homebrew miniforge numpy openblas opencv cmake dlib 安装face_recognition激活conda且配置好网络代理后直接在终端中输入 pip3 install face_recognition 如果出现了任何错误，欢迎在评论区告诉我 温馨提示此过程需要网络以及人品双buff叠加，请坐和放宽…… 安装完成后在终端中输入 python3&gt;&gt;&gt;import face_recognition 如果没有报错证明万里长征我们已经走了一半了。 也可以使用 pip3 list 命令来查看所有已经安装的库 如图 到此安装告一段落 第二部分 开始造轮子吧由于安装这些依赖和库可能已经损耗你的大部分精力了， 所以接下来我们就快速地来看看怎么把这个简单的实时人脸识别跑起来吧。 摄像头是必须的，所以请不要关上盖子运行接下来的步骤 下载py文件从GitHub上下载 facerec_from_webcam_faster.py 使用编辑器编辑用你喜欢的编辑器打开，这里使用vscode示范，下面代码都是从源文件中截出，对应修改即可。 # Load a sample picture and learn how to recognize it.图片人名1_image = face_recognition.load_image_file(&quot;把这里改成你要识别的图片的路径&quot;) 图片人名1_face_encoding = face_recognition.face_encodings(图片人名1_image)[0]# Load a second sample picture and learn how to recognize it.图片人名2_image = face_recognition.load_image_file(&quot;把这里改成你要识别的图片2的路径&quot;)图片人名2_face_encoding = face_recognition.face_encodings(图片人名1_image)[0]# Create arrays of known face encodings and their namesknown_face_encodings = [ 图片人名1_face_encoding, 图片人名2_face_encoding]known_face_names = [ &quot;图片1所对应的全名&quot;, &quot;图片2所对应的全名&quot;] 例子如图，图片1为Obama，图片2为biden 运行一下吧！打开终端，输入 python3 &lt;将文件拖到这里或者粘贴文件的路径&gt; 就像这样 按下回车等待奇迹的发生 不出意外的话，掏出你的小手机拿出一张照片或者把你的脸对准摄像头，就可以看到 大功告成啦！尾巴总体来说跑起这个小项目还是基本没有难度的，最主要的是有稳定的网络以及足够的耐心 face_recognition这个库具有很多方向的应用，今天只是简单地入门一下，还有很多玩法可以发掘哦！ 致谢谢谢阅读，欢迎你的留言！","categories":[{"name":"python开发","slug":"python开发","permalink":"http://notion.laixinly.top/categories/python%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"python","slug":"python","permalink":"http://notion.laixinly.top/tags/python/"},{"name":"macOS","slug":"macOS","permalink":"http://notion.laixinly.top/tags/macOS/"},{"name":"M1","slug":"M1","permalink":"http://notion.laixinly.top/tags/M1/"},{"name":"face_recognition","slug":"face-recognition","permalink":"http://notion.laixinly.top/tags/face-recognition/"},{"name":"人脸识别","slug":"人脸识别","permalink":"http://notion.laixinly.top/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"}],"author":"Hamster"}],"categories":[{"name":"python开发","slug":"python开发","permalink":"http://notion.laixinly.top/categories/python%E5%BC%80%E5%8F%91/"},{"name":"openwrt","slug":"openwrt","permalink":"http://notion.laixinly.top/categories/openwrt/"}],"tags":[{"name":"python，网络","slug":"python，网络","permalink":"http://notion.laixinly.top/tags/python%EF%BC%8C%E7%BD%91%E7%BB%9C/"},{"name":"openwrt","slug":"openwrt","permalink":"http://notion.laixinly.top/tags/openwrt/"},{"name":"内网穿透","slug":"内网穿透","permalink":"http://notion.laixinly.top/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"python","slug":"python","permalink":"http://notion.laixinly.top/tags/python/"},{"name":"服务器","slug":"服务器","permalink":"http://notion.laixinly.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"SS","slug":"SS","permalink":"http://notion.laixinly.top/tags/SS/"},{"name":"校园网","slug":"校园网","permalink":"http://notion.laixinly.top/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/"},{"name":"网络","slug":"网络","permalink":"http://notion.laixinly.top/tags/%E7%BD%91%E7%BB%9C/"},{"name":"macOS","slug":"macOS","permalink":"http://notion.laixinly.top/tags/macOS/"},{"name":"M1","slug":"M1","permalink":"http://notion.laixinly.top/tags/M1/"},{"name":"face_recognition","slug":"face-recognition","permalink":"http://notion.laixinly.top/tags/face-recognition/"},{"name":"人脸识别","slug":"人脸识别","permalink":"http://notion.laixinly.top/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"}]}